"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7620],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),h=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=h(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=h(n),u=o,m=c["".concat(l,".").concat(u)]||c[u]||p[u]||s;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var h=2;h<s;h++)i[h]=n[h];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8014:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return r},metadata:function(){return h},toc:function(){return p}});var a=n(7462),o=n(3366),s=(n(7294),n(3905)),i=["components"],r={title:"Demo",sidebar_label:"Demo",pagination_next:null,pagination_prev:null,slug:"demo",hide_table_of_contents:!1},l="Demo",h={unversionedId:"lecture-10/demo",id:"lecture-10/demo",title:"Demo",description:"Testing APIs with Postman",source:"@site/docs/lecture-10/demo.md",sourceDirName:"lecture-10",slug:"/lecture-10/demo",permalink:"/sp2022/lecture-10/demo",tags:[],version:"current",frontMatter:{title:"Demo",sidebar_label:"Demo",pagination_next:null,pagination_prev:null,slug:"demo",hide_table_of_contents:!1},sidebar:"docs"},d={},p=[{value:"Testing APIs with Postman",id:"testing-apis-with-postman",level:2},{value:"Exercise: GET and POST Requests with Postman",id:"exercise-get-and-post-requests-with-postman",level:3},{value:"We will now see the POST request with Postman.",id:"we-will-now-see-the-post-request-with-postman",level:4},{value:"Exercise: PUT, PATCH, and DELETE Requests with Postman",id:"exercise-put-patch-and-delete-requests-with-postman",level:3},{value:"Asynchronous JavaScript",id:"asynchronous-javascript",level:2},{value:"XMLHttpRequest",id:"xmlhttprequest",level:2},{value:"Intro",id:"intro",level:3},{value:"Exercise",id:"exercise",level:3},{value:"Fetch API",id:"fetch-api",level:2},{value:"intro",id:"intro-1",level:3},{value:"Exercise",id:"exercise-1",level:3},{value:"Axios",id:"axios",level:2},{value:"Intro",id:"intro-2",level:3},{value:"Exercise",id:"exercise-2",level:3}],c={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"demo"},"Demo"),(0,s.kt)("h2",{id:"testing-apis-with-postman"},"Testing APIs with Postman"),(0,s.kt)("p",null,"Postman has a simple user interface that allows us to easily test APIs by sending HTTP requests. For example, checking whether we are receiving the correct data from the endpoint with the GET method takes only three steps without writing any JavaScript\xa0code:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Adding the endpoint"),(0,s.kt)("li",{parentName:"ul"},"Choosing the HTTP method"),(0,s.kt)("li",{parentName:"ul"},"Clicking the Send button")),(0,s.kt)("p",null,"To install Postman, go to the ",(0,s.kt)("a",{parentName:"p",href:"https://www.getpostman.com/downloads/"},"download page"),",, and follow the instructions."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Postman is available on Mac, Windows, and Linux. "))),(0,s.kt)("p",null,"Once installed, launch Postman."),(0,s.kt)("p",null,"Now let's make the same requests using Postman. In the following exercise, we are going to practice the Five Common HTTP Methods section, GET, POST, PUT, PATCH, and DELETE. For the APIs, we are going to follow the routes in JSONPlaceholder, ",(0,s.kt)("a",{parentName:"p",href:"http://jsonplaceholder.typicode.com/"},"http://jsonplaceholder.typicode.com/"),"."),(0,s.kt)("h3",{id:"exercise-get-and-post-requests-with-postman"},"Exercise: GET and POST Requests with Postman"),(0,s.kt)("p",null,"In this exercise, firstly, we are going to make a request to receive data using the GET method, and then we'll use the POST request with Postman. Let's see how:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"After you install Postman, click the New button in the top-left corner of the interface and click Request in the pop-up window."),(0,s.kt)("li",{parentName:"ul"},"Give GET method as the Request name."),(0,s.kt)("li",{parentName:"ul"},"Choose a Collection. A collection in Postman is like a folder where you can organize your requests and easily share them with others. If you have no collections yet, click the Create Collection link and make one. Then click the Save button.\nAdd our first request. The GET method should already be selected, but if not, select GET in the drop-down menu."),(0,s.kt)("li",{parentName:"ul"},"In the input field with the placeholder saying Enter request URL, add ",(0,s.kt)("a",{parentName:"li",href:"http://jsonplaceholder.typicode.com/posts"},"http://jsonplaceholder.typicode.com/posts")," and click the Send button. You should successfully receive the 200 OK status with the data from the server-"),(0,s.kt)("li",{parentName:"ul"},"If you specify the wrong endpoint, it will return with a 404 Not Found status and an empty object")),(0,s.kt)("h4",{id:"we-will-now-see-the-post-request-with-postman"},"We will now see the POST request with Postman."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Click the New button in the top-left corner again and click Request in the pop-up window."),(0,s.kt)("li",{parentName:"ul"},"Add POST method as a Request name and choose a collection.\nFor the HTTP method, choose POST and add the endpoint, ",(0,s.kt)("a",{parentName:"li",href:"https://jsonplaceholder.typicode.com/posts"},"https://jsonplaceholder.typicode.com/posts"),". Let's say we want to add the title and body as user ID: 1 for the new post. In that case, we need to include the data as shown in the following code in the body of the request. So, click the Body tab, choose raw, select JSON (application/json), and add the following data in the textarea field:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "title": "this is the title of the new post",\n  "body": "this is the body of the new post",\n  "userId": 1\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"We also need to tell the server that the format of the data returned should be JSON.\nSo, including the Content-Type with application/json by selecting JSON (application/json) will automatically add the content-type to the header. You can see this in the Headers tab"),(0,s.kt)("li",{parentName:"ul"},"Click the Send button, and you will receive a 201 Created status with the newly created data, along with the ID.")),(0,s.kt)("p",null,"We will now go ahead and test the other HTTP methods with Postman."),(0,s.kt)("h3",{id:"exercise-put-patch-and-delete-requests-with-postman"},"Exercise: PUT, PATCH, and DELETE Requests with Postman"),(0,s.kt)("p",null,"In this exercise, we will use the PUT, PATCH, and DELETE requests and test them with Postman:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Click the New button in the top-left corner of the interface and click Request in the pop-up window."),(0,s.kt)("li",{parentName:"ul"},"Select the PUT method. We are going to make changes to post ID: 1, so add the endpoint, ",(0,s.kt)("a",{parentName:"li",href:"https://jsonplaceholder.typicode.com/posts/1"},"https://jsonplaceholder.typicode.com/posts/1"),"."),(0,s.kt)("li",{parentName:"ul"},"Click body and add the new data that we want to update.\nSelect raw and choose JSON (application/json), which will automatically add the content-type for us. In the textarea, add the following data:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "title": "this is updated title"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Click the Send button, and you will receive a 200 OK status with the updated data. However, you will notice that the returned data only contains two details, title and id, as shown in the following snippet. This is because, as mentioned in the PUT versus PATCH section, the PUT method will override the entire data matching with post id 1. To partially update the data, we need to use PATCH.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "title": "this is updated title",\n  "id": 1\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Create a new request and choose the PATCH method this time with the ",(0,s.kt)("a",{parentName:"li",href:"https://jsonplaceholder.typicode.com/posts/2"},"https://jsonplaceholder.typicode.com/posts/2")," endpoint and add the same details as before.\nClick the Send button, and you should receive a 200 OK status with the entire data, but only the title updated."),(0,s.kt)("li",{parentName:"ul"},"Create a new request and select the DELETE method with the ",(0,s.kt)("a",{parentName:"li",href:"https://jsonplaceholder.typicode.com/posts/1"},"https://jsonplaceholder.typicode.com/posts/1")," endpoint."),(0,s.kt)("li",{parentName:"ul"},"As we are not updating any details, we don't need to include any headers or body. Click the Send button."),(0,s.kt)("li",{parentName:"ul"},"You will receive a 200 OK status with an empty object, which indicates that the data has successfully been deleted.")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The POST, PUT, PATCH, and DELETE requests did not actually update the data from the JSONPlaceholder server; however, JSONPlaceholder returned the correct status as if the data had been updated."))),(0,s.kt)("h2",{id:"asynchronous-javascript"},"Asynchronous JavaScript"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"setTimeout(() => {\n  console.log('loop..')\n  let i = 0\n  while (i < 50000000000) {\n    i++\n  }\n  console.log('end')\n}, 5000)\n")),(0,s.kt)("h2",{id:"xmlhttprequest"},"XMLHttpRequest"),(0,s.kt)("h3",{id:"intro"},"Intro"),(0,s.kt)("p",null,"we will look at the basics of requesting and receiving data from a server using XMLHttpRequest (created by Microsoft in the late 1990s.)."),(0,s.kt)("p",null,"Let's see how to initiate XMLHttpRequest:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The first step is to create an instance of XMLHttpRequest object:")),(0,s.kt)("p",null,"const xhr = new XMLHttpRequest();"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Then, to specify the type of data contained in the response, we can use the responseType property. The supported values are an empty string, arraybuffer, blob, document, JSON, and plaintext.\nTo use JSON, add the property to the instance and assign the value:")),(0,s.kt)("p",null,"xhr.responseType = 'json';"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Once we have created the instance of the XHR object, we need to set the connection to a server by using the open() method. The open() method requires two mandatory parameters, which are a method such as GET, POST, PUT, or DELETE, and the URL to send the request to:")),(0,s.kt)("p",null,"xhr.open('POST', '",(0,s.kt)("a",{parentName:"p",href:"https://yourdomain.com/api/posts/new')"},"https://yourdomain.com/api/posts/new')"),";"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"If you need to set any HTTP headers, call the setRequestHeader method with the header and value. The setRequestHeader method must be called after open() but before send():")),(0,s.kt)("p",null,"xhr.setRequestHeader('Content-Type', 'application/json');"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It's time to send a request. To send a request, we need to use the send() method with the body of the data:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"xhr.send(JSON.stringify({\n  title: 'this is a title',\n  body: 'this is body'\n}));\n")),(0,s.kt)("p",null,"When sending data to a server, the format of the data should be a string. The JSON.stringify() method converts a JavaScript object to a string."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"To get the data, we can call the load event through the standard addEventListner() API to XMLHttpRequest. We use the load event because the event is waiting for all the resources on the page is finished loading before it gets fired:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"xhr.addEventListener('load', res => {\n  console.log(res);\n});\n")),(0,s.kt)("p",null,"Let's do an exercise to see how to use XMLHttpRequest to fetch data from a server."),(0,s.kt)("h3",{id:"exercise"},"Exercise"),(0,s.kt)("p",null,"In this exercise, we are going to use XMLHttpRequest to request data from JSONPlaceholder, ",(0,s.kt)("a",{parentName:"p",href:"http://jsonplaceholder.typicode.com/"},"http://jsonplaceholder.typicode.com/"),", a dummy URL to test the data. This allows us to use a fake online REST API to test requesting data with all the HTTP methods. We are particularly going to request the details of a post that has the ID\xa0number 1."),(0,s.kt)("p",null,"The endpoint URL we are going to request is ",(0,s.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/posts/1"},"https://jsonplaceholder.typicode.com/posts/1"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Open the DevTools in your browser in the Console panel"),(0,s.kt)("li",{parentName:"ul"},"Instantiate XMLHttpRequest() using the new keyword:\nconst xhr = new XMLHttpRequest();")),(0,s.kt)("p",null,"The new keyword is used to instantiate an object."),(0,s.kt)("p",null,"As we want to receive the data in JSON format, we will add the responseType property and assign json:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"const xhr = new XMLHttpRequest();\n// assign json\nxhr.responseType = 'json';\n")),(0,s.kt)("p",null,"Initialize the request with the open() method. The first argument we want to set is GET HTTP method, and the second argument is the endpoint URL we are going to request data from:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"const xhr = new XMLHttpRequest();\n// assign json\nxhr.responseType = 'json';\n// initialize the request\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/posts/1');\n")),(0,s.kt)("p",null,"Send the request to the server:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"const xhr = new XMLHttpRequest();\n// assign json\nxhr.responseType = 'json';\n// initialize the request\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/posts/1');\n// send request to the server\nxhr.send();\n")),(0,s.kt)("p",null,"Let's receive the data with the load event. To get the data, we can access the response property from the result:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const xhr = new XMLHttpRequest();\n// assign json\nxhr.responseType = 'json';\n// initialize the request\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/posts/1');\n// send request to the server\nxhr.send();\n// receive data\nxhr.addEventListener('load', () => {\n\xa0\xa0console.log(xhr.response);\n});\n")),(0,s.kt)("p",null,"Open up the DevTools in your browser and in the Console panel, enter the code. Let's execute the code in the browser. In a few moments, you will receive the data back from the server as follows:"),(0,s.kt)("p",null,"We should receive the userId, id, and title from the dummy REST API URL. Also, it is to be noted that sending simple data requires going through many steps with XMLHttpRequest. "),(0,s.kt)("h2",{id:"fetch-api"},"Fetch API"),(0,s.kt)("h3",{id:"intro-1"},"intro"),(0,s.kt)("p",null,"The Fetch API, introduced in 2015, is a promise-based API (more on promise-based APIs in Chapter 15, Promise API and async/await.) that allows us to send requests to a server, quite similar to what XMLHttpRequest does, but there's a bit of a difference, as we'll see in a moment."),(0,s.kt)("p",null,"Let's write the same request we did with XMLHttpRequest in the last section with the Fetch API and then compare the two APIs to find out the benefits of the Fetch API compared to XMLHttpRequest."),(0,s.kt)("p",null,"To send data to a server, we need to call the fetch() function, which is available in the global window scope, so it is accessible from anywhere in your JavaScript code. In the fetch() function, we are going to specify the URL to send the data to and some optional information, such as the method, the body of data, and the headers, like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"fetch('https://yourdomain.com/api/posts/new', {\n\xa0\xa0method: 'POST',\n\xa0\xa0body: JSON.stringify({\n\xa0\xa0\xa0\xa0title: 'this is a title',\n\xa0\xa0\xa0\xa0body: 'this is body',\n\xa0\xa0\xa0\xa0Header: {\n\xa0\xa0\xa0\xa0\xa0\xa0'Content-Type': 'application/json'\n\xa0\xa0\xa0\xa0}\n\xa0\xa0})\n});\n")),(0,s.kt)("p",null,"To get the response sent back from the server, we can make use of promises. "),(0,s.kt)("p",null,"Promises are used to tell you three states based on the asynchronous communication or actions with the server:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Fulfilled: The action succeeded."),(0,s.kt)("li",{parentName:"ul"},"Rejected: The action failed."),(0,s.kt)("li",{parentName:"ul"},"Pending: The action is pending; it's not fulfilled or rejected yet.")),(0,s.kt)("p",null,"When the action is either fulfilled with a value or rejected with an error, the promise's then() method is called. So, when we call the then() method for the first time, it will return a response object. The response object has several methods, and one of them is json(). In order to convert the response to JSON format, we need to call the json() method and call then() method again. In the second then() method, we will get the response as a JavaScript object. Let's add the then() method to the preceding fetch() function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"fetch('https://yourdomain.com/api/posts/new', {\n\xa0\xa0method: 'POST',\n\xa0\xa0body: JSON.stringify({\n\xa0\xa0\xa0\xa0title: 'this is a title',\n\xa0\xa0\xa0\xa0body: 'this is body',\n\xa0\xa0\xa0\xa0Header: {\n\xa0\xa0\xa0\xa0\xa0\xa0'Content-Type': 'application/json'\n\xa0\xa0\xa0\xa0}\n\xa0\xa0})\n}).then(function(res) {\n\xa0\xa0return res.json();\n}).then(function(data) {\n\xa0\xa0console.log(data);\n});\n\n")),(0,s.kt)("h3",{id:"exercise-1"},"Exercise"),(0,s.kt)("p",null,"In this exercise, we are going to make use of the Fetch API to request the same data as we did in Exercise 14.01, Requesting Data using XMLHttpRequest with JSONPlaceholder (",(0,s.kt)("a",{parentName:"p",href:"http://jsonplaceholder.typicode.com/"},"http://jsonplaceholder.typicode.com/"),"). To do so, let's go through the following steps:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Open up the DevTools in your browser and go to the Console panel.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Add the URL as the first parameter to request data from the endpoint using the Fetch API. As this is a simple GET request, we don't need to add any additional\xa0parameters:\nfetch('",(0,s.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/posts/1'"},"https://jsonplaceholder.typicode.com/posts/1'"),")")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Call the then() function twice to receive the data to get the response and to get the data in the JavaScript object format. Put together, the code should look like\xa0this:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"fetch('https://jsonplaceholder.typicode.com/posts/1')\n\xa0\xa0.then(function(res) {\n\xa0\xa0\xa0\xa0return res.json();\n\xa0\xa0}).then(function(data) {\n\xa0\xa0\xa0\xa0console.log(data);\n\xa0\xa0});\n")),(0,s.kt)("p",null,"Run it and see the result received from the server. It is dependent on your internet speed, but when you receive data from the server that contains body, id, title, and userId"),(0,s.kt)("p",null,"We have now seen how to request data from a server using XMLHttpRequest and the Fetch API. A notable difference between them is that the Fetch API, being promise-based, makes your code much more manageable and maintainable than XMLHttpRequest. "),(0,s.kt)("p",null,"Lastly, we are going to look at another method of performing HTTP requests called Axios."),(0,s.kt)("h2",{id:"axios"},"Axios"),(0,s.kt)("h3",{id:"intro-2"},"Intro"),(0,s.kt)("p",null,"Axios is a popular JavaScript library that is a promise-based HTTP client. It has many features, including transforming request and response data and canceling requests. We will use this API with React in order to fetch data from the server."),(0,s.kt)("p",null,"As Axios is a third-party library, we need to install it first. Once it's installed, we will be ready to make a request to a server. Let's look at a basic example using POST:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"import axios from \"axios\"\n\naxios({\n\xa0\xa0method: 'POST', // it could be any other HTTP methods such as GET or DELETE\n\xa0\xa0url: 'https://yourdomain.com/api/posts/new',\n\xa0\xa0headers: {'Content-Type': 'application/json'},\n\xa0\xa0data: {\n\xa0\xa0\xa0\xa0title: 'this is a title',\n\xa0\xa0\xa0\xa0body: 'this is body',\n\xa0\xa0}\n});\n")),(0,s.kt)("p",null,"In the preceding code, we are requesting the server to accept the data (title and body) and store it in the server. Axios also provides shortcut so that we can condense the preceding code like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"import axios from \"axios\"\n\naxios.post('https://yourdomain.com/api/posts/new', {\n\xa0\xa0title: 'this is a title',\n\xa0\xa0body: 'this is body',\n}, {\n\xa0\xa0headers: { 'Content-Type': 'application/json' }\n});\n")),(0,s.kt)("p",null,"Once the HTTP request is made, a response will be returned from the server containing information such as data, status, statusText, headers, config, and request. Among them, what we really want to get is the data, which contains the response provided by the server."),(0,s.kt)("p",null,"To receive the data, we can use the then() method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"import axios from \"axios\"\n\naxios.post('https://yourdomain.com/api/posts/new', {\n\xa0\xa0title: 'this is a title',\n\xa0\xa0body: 'this is body',\n}, {\n\xa0\xa0headers: { 'Content-Type': 'application/json'}\n})\n.then(function(res) {\n\xa0\xa0console.log(res);\n});\n")),(0,s.kt)("p",null,"The then() method returns the data, specifically the title and the body of the response. Let's look at the following exercise to learn how to request data using Axios."),(0,s.kt)("h3",{id:"exercise-2"},"Exercise"),(0,s.kt)("p",null,"In this exercise, we are going to use Axios to request data from a server. The endpoint URL we are going to use is ",(0,s.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/posts/1"},"https://jsonplaceholder.typicode.com/posts/1"),", the same as in the Fetch API exercise. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from \"axios\"\n\naxios.get('https://jsonplaceholder.typicode.com/posts/1')\n\xa0\xa0.then(function(res) {\n\xa0\xa0console.log(res);\n});\n")),(0,s.kt)("p",null,"Open up the DevTools in your browser and see if you are receiving data such as data, status, and headers:"),(0,s.kt)("p",null,"Call res.data as we want to get the data rather than any other information, and it will give us the data directly containing body, id, title, and userId:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from \"axios\"\n\naxios.get('https://jsonplaceholder.typicode.com/posts/1')\n\xa0\xa0.then(function(res) {\n\xa0\xa0console.log(res.data);\n});\n")))}u.isMDXComponent=!0}}]);