"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9841],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=a.createContext({}),u=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(t),d=l,k=m["".concat(i,".").concat(d)]||m[d]||c[d]||r;return t?a.createElement(k,o(o({ref:n},p),{},{components:t})):a.createElement(k,o({ref:n},p))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:l,o[1]=s;for(var u=2;u<r;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},829:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var a=t(7462),l=t(3366),r=(t(7294),t(3905)),o=["components"],s={title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},i="Lecture",u={unversionedId:"lecture-08/lecture",id:"lecture-08/lecture",title:"Lecture",description:"Lecture Slides will be in OMA after the session.",source:"@site/docs/lecture-08/lecture.md",sourceDirName:"lecture-08",slug:"/lecture-08/lecture",permalink:"/sp2022/lecture-08/lecture",tags:[],version:"current",frontMatter:{title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},sidebar:"docs"},p={},c=[{value:"JavaScript",id:"javascript",level:2},{value:"First-class functions",id:"first-class-functions",level:3},{value:"map()",id:"map",level:3},{value:"reduce()",id:"reduce",level:3},{value:"The conditional (ternary) operator",id:"the-conditional-ternary-operator",level:3},{value:"filter()",id:"filter",level:3},{value:"Lists and Keys",id:"lists-and-keys",level:2},{value:"Rendering Multiple Components",id:"rendering-multiple-components",level:3},{value:"Basic List Component",id:"basic-list-component",level:3},{value:"Keys",id:"keys",level:2},{value:"Extracting Components with Keys",id:"extracting-components-with-keys",level:3},{value:"Keys Must Only Be Unique Among Siblings",id:"keys-must-only-be-unique-among-siblings",level:3},{value:"Embedding map() in JSX",id:"embedding-map-in-jsx",level:3},{value:"CSS",id:"css",level:2},{value:"Forms",id:"forms",level:2},{value:"Controlled Components",id:"controlled-components",level:3},{value:"Alternatives to Controlled Components",id:"alternatives-to-controlled-components",level:3},{value:"Fully-Fledged Solutions",id:"fully-fledged-solutions",level:3},{value:"Example",id:"example",level:2},{value:"Ref",id:"ref",level:2}],m={toc:c};function d(e){var n=e.components,t=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lecture"},"Lecture"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Lecture Slides will be in OMA after the session."))),(0,r.kt)("h2",{id:"javascript"},"JavaScript"),(0,r.kt)("h3",{id:"first-class-functions"},"First-class functions"),(0,r.kt)("p",null,"A programming language is said to have ",(0,r.kt)("strong",{parentName:"p"},"First-class functions")," when functions in that language are treated like any other variable. For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Assign a function to a variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const foo = function() {\n   console.log("foobar");\n}\nfoo(); // Invoke it using the variable\n// foobar\n')),(0,r.kt)("p",null,"We assigned an ",(0,r.kt)("strong",{parentName:"p"},"Anonymous Function")," in a Variable, then we used that variable to invoke the function by adding parentheses ",(0,r.kt)("inlineCode",{parentName:"p"},"()")," at the end."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," ",(0,r.kt)("strong",{parentName:"p"},"Even if your function was named,")," you can use the variable name to invoke it. Naming it will be helpful when debugging your code. ",(0,r.kt)("em",{parentName:"p"},"But it won't affect the way we invoke it."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Pass a function as an Argument"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function sayHello() {\n   return "Hello, ";\n}\nfunction greeting(helloMessage, name) {\n  console.log(helloMessage() + name);\n}\n// Pass `sayHello` as an argument to `greeting` function\ngreeting(sayHello, "JavaScript!");\n// Hello, JavaScript!\n')),(0,r.kt)("p",null,"We are passing our ",(0,r.kt)("inlineCode",{parentName:"p"},"sayHello()")," function as an argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"greeting()")," function, this explains how we are treating the function as a ",(0,r.kt)("strong",{parentName:"p"},"value"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," The function that we pass as an argument to another function, is called a Callback function. ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"sayHello")," is a Callback function."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Return a function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function sayHello() {\n   return function() {\n      console.log("Hello!");\n   }\n}\n')),(0,r.kt)("p",null,"In this example; We need to return a function from another function - ",(0,r.kt)("em",{parentName:"p"},"We can return a function because we treated function in JavaScript as a ",(0,r.kt)("strong",{parentName:"em"},"value"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," A function that returns a function is called a ",(0,r.kt)("strong",{parentName:"p"},"Higher-Order Function"),".")),(0,r.kt)("p",null,"Back to our example; Now, we need to invoke ",(0,r.kt)("inlineCode",{parentName:"p"},"sayHello")," function and its returned ",(0,r.kt)("inlineCode",{parentName:"p"},"Anonymous Function"),". To do so, we have two ways:"),(0,r.kt)("p",null,"1- Using a variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const sayHello = function() {\n   return function() {\n      console.log("Hello!");\n   }\n}\nconst myFunc = sayHello();\nmyFunc();\n// Hello!\n')),(0,r.kt)("p",null,"This way, it returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello!")," message."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," You have to use another variable. If you invoked ",(0,r.kt)("inlineCode",{parentName:"p"},"sayHello")," directly, it would return the function itself ",(0,r.kt)("strong",{parentName:"p"},"without invoking its returned function"),".")),(0,r.kt)("p",null,"2- Using double parentheses"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function sayHello() {\n   return function() {\n      console.log("Hello!");\n   }\n}\nsayHello()();\n// Hello!\n')),(0,r.kt)("p",null,"We are using double parentheses ",(0,r.kt)("inlineCode",{parentName:"p"},"()()")," to invoke the returned function as well."),(0,r.kt)("h3",{id:"map"},"map()"),(0,r.kt)("p",null,"The map() method creates a new array populated with the results of calling a provided function on every element in the calling array. Since map builds a new array, using it when you aren't using the returned array is an anti-pattern; use ",(0,r.kt)("inlineCode",{parentName:"p"},"forEach")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"for...of"),"  instead. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Mapping an array of numbers to an array of square roots"),(0,r.kt)("p",null,"The following code takes an array of numbers and creates a new array containing the\nsquare roots of the numbers in the first array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const numbers = [1, 4, 9];\nconst roots = numbers.map((num) => Math.sqrt(num));\nconsole.log(roots)\nconsole.log(numbers)\n// roots is now     [1, 2, 3]\n// numbers is still [1, 4, 9]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Using map to reformat objects in an array"),(0,r.kt)("p",null,"The following code takes an array of objects and creates a new array containing the\nnewly reformatted objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const kvArray = [{ key: 1, value: 10 },\n                 { key: 2, value: 20 },\n                 { key: 3, value: 30 }];\n\nconst reformattedArray = kvArray.map(({ key, value}) => ({ [key]: value }));\nconsole.log(reformattedArray)\nconsole.log(kvArray)\n// reformattedArray is now [{1: 10}, {2: 20}, {3: 30}],\n\n// kvArray is still:\n// [{key: 1, value: 10},\n//  {key: 2, value: 20},\n//  {key: 3, value: 30}]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Mapping an array of numbers using a function containing an argument"),(0,r.kt)("p",null,"The following code shows how ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," works when a function requiring one\nargument is used with it. The argument will automatically be assigned from each element\nof the array as ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," loops through the original array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const numbers = [1, 4, 9];\nconst doubles = numbers.map((num) => num * 2);\nconsole.log(doubles);\nconsole.log(numbers);\n// doubles is now   [2, 8, 18]\n// numbers is still [1, 4, 9]\n")),(0,r.kt)("h3",{id:"reduce"},"reduce()"),(0,r.kt)("p",null,'The reduce() method executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value. '),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," How reduce() works without an initial value"),(0,r.kt)("p",null,"The code below shows what happens if we call ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce()")," with an array and no initial value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array = [15, 16, 17, 18, 19];\n\nfunction reducer(previous, current, index, array) {\n  const returns = previous + current;\n  console.log(`previous: ${previous}, current: ${current}, index: ${index}, returns: ${returns}`);\n  return returns;\n}\n\narray.reduce(reducer);\n")),(0,r.kt)("p",null,"The callback would be invoked four times, with the arguments and return values in each call being as follows:"),(0,r.kt)("table",{class:"standard-table"},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"callback"))," iteration"),(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"previousValue"))),(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"currentValue"))),(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"currentIndex"))),(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"array"))),(0,r.kt)("th",{scope:"col"},"return value"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"row"},"first call"),(0,r.kt)("td",null,(0,r.kt)("code",null,"15")),(0,r.kt)("td",null,(0,r.kt)("code",null,"16")),(0,r.kt)("td",null,(0,r.kt)("code",null,"1")),(0,r.kt)("td",null,(0,r.kt)("code",null,"[15, 16, 17, 18, 19]")),(0,r.kt)("td",null,(0,r.kt)("code",null,"31"))),(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"row"},"second call"),(0,r.kt)("td",null,(0,r.kt)("code",null,"31")),(0,r.kt)("td",null,(0,r.kt)("code",null,"17")),(0,r.kt)("td",null,(0,r.kt)("code",null,"2")),(0,r.kt)("td",null,(0,r.kt)("code",null,"[15, 16, 17, 18, 19]")),(0,r.kt)("td",null,(0,r.kt)("code",null,"48"))),(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"row"},"third call"),(0,r.kt)("td",null,(0,r.kt)("code",null,"48")),(0,r.kt)("td",null,(0,r.kt)("code",null,"18")),(0,r.kt)("td",null,(0,r.kt)("code",null,"3")),(0,r.kt)("td",null,(0,r.kt)("code",null,"[15, 16, 17, 18, 19]")),(0,r.kt)("td",null,(0,r.kt)("code",null,"66"))),(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"row"},"fourth call"),(0,r.kt)("td",null,(0,r.kt)("code",null,"66")),(0,r.kt)("td",null,(0,r.kt)("code",null,"19")),(0,r.kt)("td",null,(0,r.kt)("code",null,"4")),(0,r.kt)("td",null,(0,r.kt)("code",null,"[15, 16, 17, 18, 19]")),(0,r.kt)("td",null,(0,r.kt)("code",null,"85"))))),(0,r.kt)("p",null,"The value returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce()")," would be that of the last callback invocation (",(0,r.kt)("inlineCode",{parentName:"p"},"85"),")."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," How reduce() works with an initial value"),(0,r.kt)("p",null,"Here we reduce the same array using the same algorithm, but with an ",(0,r.kt)("em",{parentName:"p"},"initialValue")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"10")," passed the second argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"[15, 16, 17, 18, 19].reduce( (previousValue, currentValue, currentIndex, array) => previousValue + currentValue, 10 )\n")),(0,r.kt)("p",null,"We can log the output as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array = [15, 16, 17, 18, 19];\n\nfunction reducer(previous, current, index, array) {\n  const returns = previous + current;\n  console.log(`previous: ${previous}, current: ${current}, index: ${index}, returns: ${returns}`);\n  return returns;\n}\n\narray.reduce(reducer,10);\n")),(0,r.kt)("p",null,"The callback would be invoked five times, with the arguments and return values in each call being as follows:"),(0,r.kt)("table",{class:"standard-table"},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"callback"))," iteration"),(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"previousValue"))),(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"currentValue"))),(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"currentIndex"))),(0,r.kt)("th",{scope:"col"},(0,r.kt)("code",null,(0,r.kt)("var",null,"array"))),(0,r.kt)("th",{scope:"col"},"return value"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"row"},"first call"),(0,r.kt)("td",null,(0,r.kt)("code",null,"10")),(0,r.kt)("td",null,(0,r.kt)("code",null,"15")),(0,r.kt)("td",null,(0,r.kt)("code",null,"0")),(0,r.kt)("td",null,(0,r.kt)("code",null,"[15, 16, 17, 18, 19]")),(0,r.kt)("td",null,(0,r.kt)("code",null,"25"))),(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"row"},"second call"),(0,r.kt)("td",null,(0,r.kt)("code",null,"25")),(0,r.kt)("td",null,(0,r.kt)("code",null,"16")),(0,r.kt)("td",null,(0,r.kt)("code",null,"1")),(0,r.kt)("td",null,(0,r.kt)("code",null,"[15, 16, 17, 18, 19]")),(0,r.kt)("td",null,(0,r.kt)("code",null,"41"))),(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"row"},"third call"),(0,r.kt)("td",null,(0,r.kt)("code",null,"41")),(0,r.kt)("td",null,(0,r.kt)("code",null,"17")),(0,r.kt)("td",null,(0,r.kt)("code",null,"2")),(0,r.kt)("td",null,(0,r.kt)("code",null,"[15, 16, 17, 18, 19]")),(0,r.kt)("td",null,(0,r.kt)("code",null,"58"))),(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"row"},"fourth call"),(0,r.kt)("td",null,(0,r.kt)("code",null,"58")),(0,r.kt)("td",null,(0,r.kt)("code",null,"18")),(0,r.kt)("td",null,(0,r.kt)("code",null,"3")),(0,r.kt)("td",null,(0,r.kt)("code",null,"[15, 16, 17, 18, 19]")),(0,r.kt)("td",null,(0,r.kt)("code",null,"76"))),(0,r.kt)("tr",null,(0,r.kt)("th",{scope:"row"},"fifth call"),(0,r.kt)("td",null,(0,r.kt)("code",null,"76")),(0,r.kt)("td",null,(0,r.kt)("code",null,"19")),(0,r.kt)("td",null,(0,r.kt)("code",null,"4")),(0,r.kt)("td",null,(0,r.kt)("code",null,"[15, 16, 17, 18, 19]")),(0,r.kt)("td",null,(0,r.kt)("code",null,"95"))))),(0,r.kt)("p",null,"The value returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce()")," in this case would be ",(0,r.kt)("inlineCode",{parentName:"p"},"95"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Sum all the values of an array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let sum = [0, 1, 2, 3].reduce(function (previousValue, currentValue) {\n  return previousValue + currentValue\n}, 0)\n console.log(sum);\n// sum is 6\n")),(0,r.kt)("p",null,"Alternatively written with an arrow function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let total = [ 0, 1, 2, 3 ].reduce(\n  ( previousValue, currentValue ) => previousValue + currentValue,\n  0\n)\nconsole.log(total);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Sum of values in an object array"),(0,r.kt)("p",null,"To sum up the values contained in an array of objects, you ",(0,r.kt)("strong",{parentName:"p"},"must")," supply\nan ",(0,r.kt)("em",{parentName:"p"},"initialValue"),", so that each item passes through your function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(function (previousValue, currentValue) {\n    return previousValue + currentValue.x\n}, initialValue)\n\nconsole.log(sum) // logs 6\n")),(0,r.kt)("p",null,"Alternatively written with an arrow function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(\n    (previousValue, currentValue) => previousValue + currentValue.x\n    , initialValue\n)\n\nconsole.log(sum) // logs 6\n")),(0,r.kt)("h3",{id:"the-conditional-ternary-operator"},"The conditional (ternary) operator"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"conditional (ternary) operator")," is the only JavaScript operator that takes three operands: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a condition followed by a question mark (",(0,r.kt)("inlineCode",{parentName:"li"},"?"),"), "),(0,r.kt)("li",{parentName:"ul"},"then an expression to execute if the condition is truthy followed by a colon (",(0,r.kt)("inlineCode",{parentName:"li"},":"),"), and "),(0,r.kt)("li",{parentName:"ul"},"finally the expression to execute if the condition is falsy. Possible falsy expressions are ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"null"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"NaN"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),", the empty string (",(0,r.kt)("inlineCode",{parentName:"li"},'""'),"), and ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"),".")),(0,r.kt)("p",null,"This operator is frequently used as an alternative to an ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"},(0,r.kt)("inlineCode",{parentName:"a"},"if...else"))," statement."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," A simple example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let age = 26;\nlet beverage = (age >= 21) ? "Cola" : "Juice";\nconsole.log(beverage);\nage = 17;\nbeverage = (age >= 21) ? "Cola" : "Juice";\nconsole.log(beverage);\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Handling null values"),(0,r.kt)("p",null,"One common usage is to handle a value that may be ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let greeting = person => {\n    let name = person ? person.name : `stranger`\n    return `Howdy, ${name}`\n}\n\nconsole.log(greeting({name: `Alice`}));  // "Howdy, Alice"\nconsole.log(greeting(null));             // "Howdy, stranger"\n')),(0,r.kt)("h3",{id:"filter"},"filter()"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"filter()"))," method ",(0,r.kt)("strong",{parentName:"p"},"creates a new array")," with all elements that pass the test implemented by the provided function. If no elements pass the test, an empty array will be returned."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Filtering out all small values"),(0,r.kt)("p",null,"The following example uses ",(0,r.kt)("inlineCode",{parentName:"p"},"filter()")," to create a filtered array that has all elements with values less than ",(0,r.kt)("inlineCode",{parentName:"p"},"10")," removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function isBigEnough(value) {\n  return value >= 10\n}\nlet filtered = [12, 5, 8, 130, 44].filter(isBigEnough)\n// filtered is [12, 130, 44]\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Find all prime numbers in an array"),(0,r.kt)("p",null,"The following example returns all prime numbers in the array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n\nfunction isPrime(num) {\n  for (let i = 2; num > i; i++) {\n    if (num % i == 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}\n\nconsole.log(array.filter(isPrime)); // [2, 3, 5, 7, 11, 13]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Filtering invalid entries from JSON"),(0,r.kt)("p",null,"The following example uses ",(0,r.kt)("inlineCode",{parentName:"p"},"filter()")," to create a filtered json of all elements with non-zero, numeric ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let arr = [\n  { id: 15 },\n  { id: -1 },\n  { id: 0 },\n  { id: 3 },\n  { id: 12.2 },\n  { },\n  { id: null },\n  { id: NaN },\n  { id: 'undefined' }\n]\n\nlet invalidEntries = 0\n\nfunction filterByID(item) {\n  if (Number.isFinite(item.id) && item.id !== 0) {\n    return true\n  }\n  invalidEntries++\n  return false;\n}\n\nlet arrByID = arr.filter(filterByID)\n\nconsole.log('Filtered Array\\n', arrByID)\n// Filtered Array\n// [{ id: 15 }, { id: -1 }, { id: 3 }, { id: 12.2 }]\n\nconsole.log('Number of Invalid Entries = ', invalidEntries)\n// Number of Invalid Entries = 5\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Searching in array"),(0,r.kt)("p",null,"Following example uses ",(0,r.kt)("inlineCode",{parentName:"p"},"filter()")," to filter array content based on search criteria."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let fruits = ['apple', 'banana', 'grapes', 'mango', 'orange']\n\n/**\n * Filter array items based on search criteria (query)\n */\nfunction filterItems(arr, query) {\n  return arr.filter(function(el) {\n    return el.toLowerCase().indexOf(query.toLowerCase()) !== -1\n  })\n}\n\nconsole.log(filterItems(fruits, 'ap'))  // ['apple', 'grapes']\nconsole.log(filterItems(fruits, 'an'))  // ['banana', 'mango', 'orange']\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Using arrow function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fruits = ['apple', 'banana', 'grapes', 'mango', 'orange']\n\n/**\n * Filter array items based on search criteria (query)\n */\nconst filterItems = (arr, query) => {\n  return arr.filter(el => el.toLowerCase().indexOf(query.toLowerCase()) !== -1)\n}\n\nconsole.log(filterItems(fruits, 'ap'))  // ['apple', 'grapes']\nconsole.log(filterItems(fruits, 'an'))  // ['banana', 'mango', 'orange']\n")),(0,r.kt)("h2",{id:"lists-and-keys"},"Lists and Keys"),(0,r.kt)("p",null,"First, let's review how you transform lists in JavaScript."),(0,r.kt)("p",null,"Given the code below, we use the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"},(0,r.kt)("inlineCode",{parentName:"a"},"map()"))," function to take an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"numbers")," and double their values. We assign the new array returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"map()")," to the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"doubled")," and log it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map((number) => number * 2);\nconsole.log(doubled);\n")),(0,r.kt)("p",null,"This code logs ",(0,r.kt)("inlineCode",{parentName:"p"},"[2, 4, 6, 8, 10]")," to the console."),(0,r.kt)("p",null,"In React, transforming arrays into lists of ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/rendering-elements.html"},"elements")," is nearly identical."),(0,r.kt)("h3",{id:"rendering-multiple-components"},"Rendering Multiple Components"),(0,r.kt)("p",null,"You can build collections of elements and ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org//docs/introducing-jsx.html#embedding-expressions-in-jsx"},"include them in JSX")," using curly braces ",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),"."),(0,r.kt)("p",null,"Below, we loop through the ",(0,r.kt)("inlineCode",{parentName:"p"},"numbers")," array using the JavaScript ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"},(0,r.kt)("inlineCode",{parentName:"a"},"map()"))," function. We return a ",(0,r.kt)("inlineCode",{parentName:"p"},"<li>")," element for each item. Finally, we assign the resulting array of elements to ",(0,r.kt)("inlineCode",{parentName:"p"},"listItems"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\n\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li>{number}</li>\n);\n\nReactDOM.render(\n  <ul>{listItems}</ul>,\n  document.getElementById('root')\n);\n")),(0,r.kt)("p",null,"We include the entire ",(0,r.kt)("inlineCode",{parentName:"p"},"listItems")," array inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"<ul>")," element, and ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/rendering-elements.html#rendering-an-element-into-the-dom"},"render it to the DOM"),":"),(0,r.kt)("p",null,"This code displays a bullet list of numbers between 1 and 5."),(0,r.kt)("h3",{id:"basic-list-component"},"Basic List Component"),(0,r.kt)("p",null,"Usually you would render lists inside a ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/components-and-props.html"},"component"),"."),(0,r.kt)("p",null,"We can refactor the previous example into a component that accepts an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"numbers")," and outputs a list of elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li>{number}</li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n")),(0,r.kt)("p",null,"When you run this code, you'll be given a warning that a key should be provided for list items. A \"key\" is a special string attribute you need to include when creating lists of elements. We'll discuss why it's important in the next section."),(0,r.kt)("p",null,"Let's assign a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," to our list items inside ",(0,r.kt)("inlineCode",{parentName:"p"},"numbers.map()")," and fix the missing key issue."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>\n      {number}\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n")),(0,r.kt)("h2",{id:"keys"},"Keys"),(0,r.kt)("p",null,"Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li key={number.toString()}>\n    {number}\n  </li>\n);\n")),(0,r.kt)("p",null,"The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n);\n")),(0,r.kt)("p",null,"When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs\n  <li key={index}>\n    {todo.text}\n  </li>\n);\n")),(0,r.kt)("p",null,"We don't recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state. Check out Robin Pokorny's article for an ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318"},"in-depth explanation on the negative impacts of using an index as a key"),". If you choose not to assign an explicit key to list items then React will default to using indexes as keys."),(0,r.kt)("p",null,"Here is an ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/reconciliation.html#recursing-on-children"},"in-depth explanation about why keys are necessary")," if you're interested in learning more."),(0,r.kt)("h3",{id:"extracting-components-with-keys"},"Extracting Components with Keys"),(0,r.kt)("p",null,"Keys only make sense in the context of the surrounding array."),(0,r.kt)("p",null,"For example, if you ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/components-and-props.html#extracting-components"},"extract")," a ",(0,r.kt)("inlineCode",{parentName:"p"},"ListItem")," component, you should keep the key on the ",(0,r.kt)("inlineCode",{parentName:"p"},"<ListItem />")," elements in the array rather than on the ",(0,r.kt)("inlineCode",{parentName:"p"},"<li>")," element in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ListItem")," itself."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Incorrect Key Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\n\nfunction ListItem(props) {\n  const value = props.value;\n  return (\n    // Wrong! There is no need to specify the key here:\n    <li key={value.toString()}>\n      {value}\n    </li>\n  );\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Wrong! The key should have been specified here:\n    <ListItem value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Correct Key Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\n\nfunction ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.\n    <ListItem key={number.toString()} value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n")),(0,r.kt)("p",null,"A good rule of thumb is that elements inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"map()")," call need keys."),(0,r.kt)("h3",{id:"keys-must-only-be-unique-among-siblings"},"Keys Must Only Be Unique Among Siblings"),(0,r.kt)("p",null,"Keys used within arrays should be unique among their siblings. However, they don't need to be globally unique. We can use the same keys when we produce two different arrays:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\n\nfunction Blog(props) {\n  const sidebar = (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n  const content = props.posts.map((post) =>\n    <div key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n    </div>\n  );\n  return (\n    <div>\n      {sidebar}\n      <hr />\n      {content}\n    </div>\n  );\n}\n\nconst posts = [\n  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n  {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n];\nReactDOM.render(\n  <Blog posts={posts} />,\n  document.getElementById('root')\n);\n")),(0,r.kt)("p",null,"Keys serve as a hint to React but they don't get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\n\nconst content = posts.map((post) =>\n  <Post\n    key={post.id}\n    id={post.id}\n    title={post.title} />\n);\n")),(0,r.kt)("p",null,"With the example above, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," component can read ",(0,r.kt)("inlineCode",{parentName:"p"},"props.id"),", but not ",(0,r.kt)("inlineCode",{parentName:"p"},"props.key"),"."),(0,r.kt)("h3",{id:"embedding-map-in-jsx"},"Embedding map() in JSX"),(0,r.kt)("p",null,"In the examples above we declared a separate ",(0,r.kt)("inlineCode",{parentName:"p"},"listItems")," variable and included it in JSX:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\n\nfunction ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.\n    <ListItem key={number.toString()} value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n")),(0,r.kt)("p",null,"JSX allows ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx"},"embedding any expression")," in curly braces so we could inline the ",(0,r.kt)("inlineCode",{parentName:"p"},"map()")," result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\n\nfunction ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  return (\n    <ul>\n      {numbers.map((number) =>\n        <ListItem key={number.toString()}\n                  value={number} />\n      )}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n")),(0,r.kt)("p",null,"Sometimes this results in clearer code, but this style can also be abused. Like in JavaScript, it is up to you to decide whether it is worth extracting a variable for readability. Keep in mind that if the ",(0,r.kt)("inlineCode",{parentName:"p"},"map()")," body is too nested, it might be a good time to ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/components-and-props.html#extracting-components"},"extract a component"),"."),(0,r.kt)("h2",{id:"css"},"CSS"),(0,r.kt)("p",null,"className\nSince class is a reserved word in JavaScript, className is used to define the class attribute instead. The opening h1 tag below has a className attribute. This is the same as the class attribute in HTML, but because JSX is JavaScript, we can't use the word class \u2014 it's reserved, meaning JavaScript already uses it for a specific purpose and it would cause problems here in our code. A few other HTML attributes are written differently in JSX than they are in HTML too, for the same kind of reason. We'll cover them as we encounter them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<h1 className="fancy">Baked Salmon</h1>\n')),(0,r.kt)("p",null,"More on this topic ",(0,r.kt)("a",{parentName:"p",href:"post-lecture#css"},"here")," "),(0,r.kt)("h2",{id:"forms"},"Forms"),(0,r.kt)("p",null,"HTML form elements work a bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n  <label>\n    Name:\n    <input type="text" name="name" />\n  </label>\n  <input type="submit" value="Submit" />\n</form>\n')),(0,r.kt)("p",null,'This form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it\'s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called "controlled components".'),(0,r.kt)("h3",{id:"controlled-components"},"Controlled Components"),(0,r.kt)("p",null,"Here's an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\nimport { useState } from 'react'\n\nconst Note = ({ note }) => {\n  return (\n    <li>{note.content}</li>\n  )\n}\n\nconst App = (props) => {\n  const [notes, setNotes] = useState(props.notes)\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    console.log(noteObject.date);\n    setNotes(notes.concat(noteObject))\n    setNewNote('')\n  }\n\n  const handleNoteChange = (event) => {\n    //there is no defualt behavior for input\n    //we don't call preventDefault()\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map(note => \n            <Note key={note.id} note={note} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n    </div>\n  )\n}\n\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2022-03-28T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2022-03-28T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2022-03-28T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n)\n")),(0,r.kt)("h3",{id:"alternatives-to-controlled-components"},"Alternatives to Controlled Components"),(0,r.kt)("p",null,"It can sometimes be tedious to use controlled components, because you need to write an event handler for every way your data can change and pipe all of the input state through a React component. This can become particularly annoying when you are converting a preexisting codebase to React, or integrating a React application with a non-React library. In these situations, you might want to check out ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/uncontrolled-components.html"},"uncontrolled components"),", an alternative technique for implementing input forms."),(0,r.kt)("h3",{id:"fully-fledged-solutions"},"Fully-Fledged Solutions"),(0,r.kt)("p",null,"If you're looking for a complete solution including validation, keeping track of the visited fields, and handling form submission, ",(0,r.kt)("a",{parentName:"p",href:"https://jaredpalmer.com/formik"},"Formik")," is one of the popular choices. However, it is built on the same principles of controlled components and managing state \u2014 so don't neglect to learn them."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Modularity?"),(0,r.kt)("li",{parentName:"ul"},"Anything else wrong with the code?")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import ReactDOM from \'react-dom\'\n\nconst data = [\n  {\n    name: "Baked Salmon",\n    ingredients: [\n      { name: "Salmon", amount: 1, measurement: "l lb" },\n      { name: "Pine Nuts", amount: 1, measurement: "cup" },\n      { name: "Butter Lettuce", amount: 2, measurement: "cups" },\n      { name: "Yellow Squash", amount: 1, measurement: "med" },\n      { name: "Olive Oil", amount: 0.5, measurement: "cup" },\n      { name: "Garlic", amount: 3, measurement: "cloves" },\n    ],\n    steps: [\n      "Preheat the oven to 350 degrees.",\n      "Spread the olive oil around a glass baking dish.",\n      "Add the salmon, garlic, and pine nuts to the dish.",\n      "Bake for 15 minutes.",\n      "Add the yellow squash and put back in the oven for 30 mins.",\n      "Remove from oven and let cool for 15 minutes. Add the lettuce and serve.",\n    ],\n  },\n  {\n    name: "Fish Tacos",\n    ingredients: [\n      { name: "Whitefish", amount: 1, measurement: "l lb" },\n      { name: "Cheese", amount: 1, measurement: "cup" },\n      { name: "Iceberg Lettuce", amount: 2, measurement: "cups" },\n      { name: "Tomatoes", amount: 2, measurement: "large" },\n      { name: "Tortillas", amount: 3, measurement: "med" },\n    ],\n    steps: [\n      "Cook the fish on the grill until hot.",\n      "Place the fish on the 3 tortillas.",\n      "Top them with lettuce, tomatoes, and cheese",\n    ],\n  },\n];\n\nconst Ingredients = ({ data = [] }) => (\n  <ul className="ingredients">\n    {data.map((ingredient, i) => (\n      <li key={i}>{ingredient.name}</li>\n    ))}\n  </ul>\n);\n\nconst Instructions = ({ data = [] }) => (\n  <section className="instructions">\n    <h2>Cooking Instructions</h2>\n    {data.map((step, i) => (\n      <p key={i}>{step}</p>\n    ))}\n  </section>\n);\n\nconst Recipe = ({ name, ingredients, steps }) => (\n  <section id={name.toLowerCase().replace(/ /g, "-")}>\n    <h1>{name}</h1>\n    <Ingredients data={ingredients} />\n    <Instructions data={steps} />\n  </section>\n);\n\nconst App = ({ title, recipes }) => (\n  <article>\n    <header>\n      <h1>{title}</h1>\n    </header>\n    <div className="recipes">\n      {recipes.map((recipe, i) => (\n        <Recipe key={i} {...recipe} />\n      ))}\n    </div>\n  </article>\n);\n\nReactDOM.render(\n  <App recipes={data} title="Delicious Recipes" />,\n  document.getElementById("root")\n);\n\n')),(0,r.kt)("h2",{id:"ref"},"Ref"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function"},"First class Functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"},"Map()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"},"Reduce")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"},"Conditional_Operator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness"},"Equality_comparisons")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"},"Reduce")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/lists-and-keys.html"},"Lists and Keys")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/forms.html"},"Forms"))))}d.isMDXComponent=!0}}]);