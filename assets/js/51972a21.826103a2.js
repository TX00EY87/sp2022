"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1777],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return d}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var r=o.createContext({}),p=function(e){var t=o.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},h=function(e){var t=p(e.components);return o.createElement(r.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,m=c["".concat(r,".").concat(d)]||c[d]||u[d]||i;return n?o.createElement(m,s(s({ref:t},h),{},{components:n})):o.createElement(m,s({ref:t},h))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=c;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3041:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return r},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var o=n(7462),a=n(3366),i=(n(7294),n(3905)),s=["components"],l={title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},r="After Lecture",p={unversionedId:"lecture-15/post-lecture",id:"lecture-15/post-lecture",title:"Post Lecture Reading",description:"Credits: The post lecture material has been written by Matti Luukkainen from University of Helsinki. The material is licensed under the Creative Commons BY-NC-SA 3.0 License.",source:"@site/docs/lecture-15/post-lecture.md",sourceDirName:"lecture-15",slug:"/lecture-15/post-lecture",permalink:"/sp2022/lecture-15/post-lecture",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},sidebar:"docs"},h={},u=[{value:"Login in frontend",id:"login-in-frontend",level:2},{value:"Handling login",id:"handling-login",level:3},{value:"Creating new notes",id:"creating-new-notes",level:3},{value:"Saving the token to the browser&#39;s local storage",id:"saving-the-token-to-the-browsers-local-storage",level:3},{value:"A note on using local storage",id:"a-note-on-using-local-storage",level:3},{value:"props.children",id:"propschildren",level:2},{value:"Display the login form only when appropriate",id:"display-the-login-form-only-when-appropriate",level:3},{value:"The components children",id:"the-components-children",level:3},{value:"State of the forms",id:"state-of-the-forms",level:3},{value:"PropTypes",id:"proptypes",level:2},{value:"React router",id:"react-router",level:2},{value:"Application navigation structure",id:"application-navigation-structure",level:3},{value:"React Router",id:"react-router-1",level:3},{value:"Parameterized route",id:"parameterized-route",level:3},{value:"useNavigate",id:"usenavigate",level:3},{value:"redirect",id:"redirect",level:3},{value:"Parameterized route revisited",id:"parameterized-route-revisited",level:3},{value:"Hooks",id:"hooks",level:2},{value:"Custom hooks",id:"custom-hooks",level:3},{value:"Spread attributes",id:"spread-attributes",level:3},{value:"More about hooks",id:"more-about-hooks",level:3},{value:"More about styles",id:"more-about-styles",level:2},{value:"Ready-made UI libraries",id:"ready-made-ui-libraries",level:3},{value:"Material UI",id:"material-ui",level:3},{value:"Form",id:"form",level:4},{value:"Notification",id:"notification",level:4},{value:"Navigation structure",id:"navigation-structure",level:4},{value:"Closing thoughts",id:"closing-thoughts",level:3},{value:"Styled components",id:"styled-components",level:3},{value:"Reference",id:"reference",level:2}],c={toc:u};function d(e){var t=e.components,l=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"after-lecture"},"After Lecture"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"}," ",(0,i.kt)("strong",{parentName:"p"},"Credits"),": The post lecture material has been written by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mluukkai"},"Matti Luukkainen")," from ",(0,i.kt)("a",{parentName:"p",href:"https://fullstackopen.com/en/"},"University of Helsinki"),". The material is licensed under the Creative Commons BY-NC-SA 3.0 License."))),(0,i.kt)("h2",{id:"login-in-frontend"},"Login in frontend"),(0,i.kt)("p",null,"In the last four lectures, we have mainly concentrated on the backend. We will  return to the frontend and  implement token based authentication to enable users log in to our application."),(0,i.kt)("p",null,"At the moment the frontend shows existing notes, and lets users change the state of a note from important to not important and vice versa. New notes cannot be added anymore because of the changes made to the backend: the backend now expects that a token verifying a user's identity is sent with the new note. "),(0,i.kt)("p",null,"We'll now implement a part of the required user management functionality in the frontend. Let's begin with user login. Throughout this part we will assume that new users will not be added from the frontend."),(0,i.kt)("h3",{id:"handling-login"},"Handling login"),(0,i.kt)("p",null,"A login form has now been added to the top of the page. The form for adding new notes has also been moved to the bottom of the list of notes. "),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(6486).Z,width:"1450",height:"814"})),(0,i.kt)("p",null,"The code of the ",(0,i.kt)("i",null,"App")," component now looks as follows: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState(\'\')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  // highlight-start\n  const [username, setUsername] = useState(\'\') \n  const [password, setPassword] = useState(\'\') \n// highlight-end\n\n  useEffect(() => {\n    noteService\n      .getAll().then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  // ...\n\n// highlight-start\n  const handleLogin = (event) => {\n    event.preventDefault()\n    console.log(\'logging in with\', username, password)\n  }\n  // highlight-end\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      // highlight-start\n      <form onSubmit={handleLogin}>\n        <div>\n          username\n            <input\n            type="text"\n            value={username}\n            name="Username"\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password\n            <input\n            type="password"\n            value={password}\n            name="Password"\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type="submit">login</button>\n      </form>\n    // highlight-end\n\n      // ...\n    </div>\n  )\n}\n\nexport default App\n')),(0,i.kt)("p",null,"Current application code can be found on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy/part2-notes/tree/part5-1"},"Github"),", branch ",(0,i.kt)("i",null,"part5-1"),". If you clone the repo, don't forget to run ",(0,i.kt)("em",{parentName:"p"},"npm install")," before attempting to run the frontend."),(0,i.kt)("p",null,"The frontend will not display any notes if it's not connected to the backend. You can start the backend with ",(0,i.kt)("em",{parentName:"p"},"npm run dev")," . This will run the backend on port 3001. While that is active, in a separate terminal window you can start the frontend with ",(0,i.kt)("em",{parentName:"p"},"npm start"),", and now you can see the notes that are saved in your MongoDB database."),(0,i.kt)("p",null,"Keep this in mind from now on."),(0,i.kt)("p",null,"The login form is handled the same way. The app state has fields for  ",(0,i.kt)("i",null,"username")," and ",(0,i.kt)("i",null,"password")," to store the data from the form. The form fields have event handlers, which synchronize changes in the field to the state of the ",(0,i.kt)("i",null,"App")," component. The event handlers are simple: An object is given to them as a parameter, and they destructure the field ",(0,i.kt)("i",null,"target")," from the object and save its value to the state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"({ target }) => setUsername(target.value)\n")),(0,i.kt)("p",null,"The method ",(0,i.kt)("em",{parentName:"p"},"handleLogin"),", which is  responsible for handling the data in the form, is yet to be implemented. "),(0,i.kt)("p",null,"Logging in is done by sending an HTTP POST request to server address ",(0,i.kt)("i",null,"api/login"),". Let's separate the code responsible for this request to its own module, to file ",(0,i.kt)("i",null,"services/login.js"),"."),(0,i.kt)("p",null,"We'll use ",(0,i.kt)("i",null,"async/await")," syntax instead of promises for the HTTP request: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }\n")),(0,i.kt)("p",null,"The method for handling the login can be implemented as follows: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import loginService from './services/login' // highlight-line\n\nconst App = () => {\n  // ...\n  const [username, setUsername] = useState('') \n  const [password, setPassword] = useState('') \n// highlight-start\n  const [user, setUser] = useState(null)\n// highlight-end\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    \n    // highlight-start\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n    // highlight-end\n  }\n\n  // ...\n}\n")),(0,i.kt)("p",null,"If the login is successful, the form fields are emptied ",(0,i.kt)("i",null,"and")," the server response (including a ",(0,i.kt)("i",null,"token")," and the user details) is saved to the ",(0,i.kt)("i",null,"user")," field of the application's state."),(0,i.kt)("p",null,"If the login fails, or running the function ",(0,i.kt)("em",{parentName:"p"},"loginService.login")," results in an error, the user is notified. "),(0,i.kt)("p",null,"The user is not notified about a successful login in any way. Let's modify the application to show the login form only ",(0,i.kt)("i",null,"if the user is not logged-in")," so when ",(0,i.kt)("em",{parentName:"p"},"user === null"),". The form for adding new notes is shown only if the ",(0,i.kt)("i",null,"user is logged-in"),", so ",(0,i.kt)("i",null,"user")," contains the user details. "),(0,i.kt)("p",null,"Let's add two helper functions to the ",(0,i.kt)("i",null,"App")," component for generating the forms: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const App = () => {\n  // ...\n\n  const loginForm = () => (\n    <form onSubmit={handleLogin}>\n      <div>\n        username\n          <input\n          type="text"\n          value={username}\n          name="Username"\n          onChange={({ target }) => setUsername(target.value)}\n        />\n      </div>\n      <div>\n        password\n          <input\n          type="password"\n          value={password}\n          name="Password"\n          onChange={({ target }) => setPassword(target.value)}\n        />\n      </div>\n      <button type="submit">login</button>\n    </form>      \n  )\n\n  const noteForm = () => (\n    <form onSubmit={addNote}>\n      <input\n        value={newNote}\n        onChange={handleNoteChange}\n      />\n      <button type="submit">save</button>\n    </form>  \n  )\n\n  return (\n    // ...\n  )\n}\n')),(0,i.kt)("p",null,"and conditionally render them:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  // ...\n\n  const loginForm = () => (\n    // ...\n  )\n\n  const noteForm = () => (\n    // ...\n  )\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      {user === null && loginForm()} // highlight-line\n      {user !== null && noteForm()} // highlight-line\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => \n          <Note\n            key={i}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n\n      <Footer />\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"A slightly odd looking, but commonly used ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/conditional-rendering.html#inline-if-with-logical--operator"},"React trick")," is used to render the forms conditionally: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  user === null && loginForm()\n}\n")),(0,i.kt)("p",null,"If the first statement evaluates to false, or is ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy"},"falsy"),", the second statement (generating the form) is not executed at all. "),(0,i.kt)("p",null,"We can make this even more straightforward by using the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"},"conditional operator"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"return (\n  <div>\n    <h1>Notes</h1>\n\n    <Notification message={errorMessage}/>\n\n    {user === null ?\n      loginForm() :\n      noteForm()\n    }\n\n    <h2>Notes</h2>\n\n    // ...\n\n  </div>\n)\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("em",{parentName:"p"},"user === null")," is ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Truthy"},"truthy"),", ",(0,i.kt)("em",{parentName:"p"},"loginForm()")," is executed. If not, ",(0,i.kt)("em",{parentName:"p"},"noteForm()")," is."),(0,i.kt)("p",null,"Let's do one more modification. If the user is logged-in, their name is shown on the screen: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"return (\n  <div>\n    <h1>Notes</h1>\n\n    <Notification message={errorMessage} />\n\n    {user === null ?\n      loginForm() :\n      <div>\n        <p>{user.name} logged-in</p>\n        {noteForm()}\n      </div>\n    }\n\n    <h2>Notes</h2>\n\n    // ...\n\n  </div>\n)\n")),(0,i.kt)("p",null,"The solution isn't perfect, but we'll leave it for now. "),(0,i.kt)("p",null,"Our main component ",(0,i.kt)("i",null,"App")," is at the moment way too large. The changes we did now are a clear sign that the forms should be refactored into their own components. However, we will leave that for an optional exercise. "),(0,i.kt)("p",null,"Current application code can be found on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy/part2-notes/tree/part5-2"},"Github"),", branch ",(0,i.kt)("i",null,"part5-2"),"."),(0,i.kt)("h3",{id:"creating-new-notes"},"Creating new notes"),(0,i.kt)("p",null,"The token returned with a successful login is saved to the application's state - the ",(0,i.kt)("i",null,"user"),"'s field ",(0,i.kt)("i",null,"token"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const handleLogin = async (event) => {\n  event.preventDefault()\n  try {\n    const user = await loginService.login({\n      username, password,\n    })\n\n    setUser(user) // highlight-line\n    setUsername('')\n    setPassword('')\n  } catch (exception) {\n    // ...\n  }\n}\n")),(0,i.kt)("p",null,"Let's fix creating new notes so it works with the backend. This means adding the token of the logged-in user to the Authorization header of the HTTP request. "),(0,i.kt)("p",null,"The ",(0,i.kt)("i",null,"noteService")," module changes like so: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null // highlight-line\n\n// highlight-start\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n// highlight-end\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  // highlight-start\n  const config = {\n    headers: { Authorization: token },\n  }\n// highlight-end\n\n  const response = await axios.post(baseUrl, newObject, config) // highlight-line\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${ baseUrl }/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken } // highlight-line\n")),(0,i.kt)("p",null,"The noteService module contains a private variable ",(0,i.kt)("em",{parentName:"p"},"token"),". Its value can be changed with a function ",(0,i.kt)("em",{parentName:"p"},"setToken"),", which is exported by the module. ",(0,i.kt)("em",{parentName:"p"},"create"),", now with async/await syntax, sets the token to the ",(0,i.kt)("i",null,"Authorization")," header. The header is given to axios as the third parameter of the ",(0,i.kt)("i",null,"post")," method. "),(0,i.kt)("p",null,"The event handler responsible for login must be changed to call the method ",(0,i.kt)("code",null,"noteService.setToken(user.token)")," with a successful login: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const handleLogin = async (event) => {\n  event.preventDefault()\n  try {\n    const user = await loginService.login({\n      username, password,\n    })\n\n    noteService.setToken(user.token) // highlight-line\n    setUser(user)\n    setUsername('')\n    setPassword('')\n  } catch (exception) {\n    // ...\n  }\n}\n")),(0,i.kt)("p",null,"And now adding new notes works again!"),(0,i.kt)("h3",{id:"saving-the-token-to-the-browsers-local-storage"},"Saving the token to the browser's local storage"),(0,i.kt)("p",null,"Our application has a flaw: when the page is rerendered, information of the user's login disappears. This also slows down development. For example when we test creating new notes, we have to login again every single time. "),(0,i.kt)("p",null,"This problem is easily solved by saving the login details to ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage"},"local storage"),". Local Storage is a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Key-value_database"},"key-value")," database in the browser. "),(0,i.kt)("p",null,"It is very easy to use. A ",(0,i.kt)("i",null,"value")," corresponding to a certain ",(0,i.kt)("i",null,"key")," is saved to the database with method ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem"},"setItem"),". For example: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"window.localStorage.setItem('name', 'juha tauriainen')\n")),(0,i.kt)("p",null,"saves the string given as the second parameter as the value of key ",(0,i.kt)("i",null,"name"),". "),(0,i.kt)("p",null,"The value of a key can be found with method ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem"},"getItem"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"window.localStorage.getItem('name')\n")),(0,i.kt)("p",null,"and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem"},"removeItem")," removes a key. "),(0,i.kt)("p",null,"Values in the local storage are persisted even when the page is rerendered. The storage is ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Origin"},"origin"),"-specific so each web application has its own storage. "),(0,i.kt)("p",null,"Let's extend our application so that it saves the details of a logged-in user to the local storage. "),(0,i.kt)("p",null,"Values saved to the storage are ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/DOMString"},"DOMstrings"),", so we cannot save a JavaScript object as is. The object has to be parsed to JSON first, with the method ",(0,i.kt)("em",{parentName:"p"},"JSON.stringify"),". Correspondingly, when a JSON object is read from the local storage, it has to be parsed back to JavaScript with ",(0,i.kt)("em",{parentName:"p"},"JSON.parse"),"."),(0,i.kt)("p",null,"Changes to the login method are as follows: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      // highlight-start\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      ) \n      // highlight-end\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      // ...\n    }\n  }\n")),(0,i.kt)("p",null,"The details of a logged-in user are now saved to the local storage, and they can be viewed on the console (by typing ",(0,i.kt)("em",{parentName:"p"},"window.localStorage")," to the console): "),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(3792).Z,width:"1740",height:"818"})),(0,i.kt)("p",null,"You can also inspect the local storage using the developer tools. On Chrome, go to the ",(0,i.kt)("i",null,"Application")," tab and select ",(0,i.kt)("i",null,"Local Storage")," (more details ",(0,i.kt)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools/storage/localstorage"},"here"),"). On Firefox go to the ",(0,i.kt)("i",null,"Storage")," tab and select ",(0,i.kt)("i",null,"Local Storage")," (details ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Tools/Storage_Inspector"},"here"),")."),(0,i.kt)("p",null,"We still have to modify our application so that when we enter the page, the application checks if user details of a logged-in user can already be found on the local storage. If they can, the details are saved to the state of the application and to ",(0,i.kt)("i",null,"noteService"),"."),(0,i.kt)("p",null,"The right way to do this is with an ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-effect.html"},"effect hook"),": a mechanism we used to fetch notes from the server. "),(0,i.kt)("p",null,"We can have multiple effect hooks, so let's create a second one to handle the first loading of the page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('') \n  const [password, setPassword] = useState('') \n  const [user, setUser] = useState(null) \n\n  useEffect(() => {\n    noteService\n      .getAll().then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  // highlight-start\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n  // highlight-end\n\n  // ...\n}\n")),(0,i.kt)("p",null,"The empty array as the parameter of the effect ensures that the effect is executed only when the component is rendered ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect"},"for the first time"),"."),(0,i.kt)("p",null,"Now a user stays logged-in in the application forever. We should probably add a ",(0,i.kt)("i",null,"logout")," functionality which removes the login details from the local storage. We will however leave it for an exercise. "),(0,i.kt)("p",null,"It's possible to log out a user using the console, and that is enough for now.\nYou can log out with the command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"window.localStorage.removeItem('loggedNoteappUser')\n")),(0,i.kt)("p",null,"or with the command which empties ",(0,i.kt)("i",null,"localstorage")," completely: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"window.localStorage.clear()\n")),(0,i.kt)("p",null,"Current application code can be found on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy/part2-notes/tree/part5-3"},"Github"),", branch ",(0,i.kt)("i",null,"part5-3"),"."),(0,i.kt)("h3",{id:"a-note-on-using-local-storage"},"A note on using local storage"),(0,i.kt)("p",null,"We mentioned that the challenge of the token based authentication is how to cope with the situation when the API access of the token holder to the API needs to be revoked."),(0,i.kt)("p",null,"There are two solutions to the problem. The first one is to limit the validity period of a token. This forces the user to relogin to the app once the token has expired. The other approach is to save the validity information of each token to the backend database. This solution is often called a ",(0,i.kt)("i",null,"server side session"),"."),(0,i.kt)("p",null,"No matter how the validity of tokens is checked and ensured, saving a token in the local storage might contain a security risk if the application has a security vulnerability that allows ",(0,i.kt)("a",{parentName:"p",href:"https://owasp.org/www-community/attacks/xss/"},"Cross Site Scripting (XSS)")," attacks. A XSS attack is possible if the application would allow a user to inject arbitrary JavaScript code (e.g. using a form) that the app would then execute. When using React in a sensible manner it should not be possible since ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/introducing-jsx.html#jsx-prevents-injection-attacks"},"React sanitizes")," all text that it renders, meaning that it is not executing the rendered content as JavaScript."),(0,i.kt)("p",null,"If one wants to play safe, the best option is to not store a token to the local storage. This might be an option in situations where leaking a token might have tragic consequences."),(0,i.kt)("p",null,"It has been suggested that  the identity of a signed in user should be saved as ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies"},"httpOnly cookies"),", so that JavaScript code could not have any access to the token. The drawback of this solution is that it would make implementing SPA-applications a bit more complex. One would need at least to implement a separate page for logging in."),(0,i.kt)("p",null,"However it is good to notice that even the use of a httpOnly cookies does not guarantee anything. It has even been suggested that httpOnly cookies are ",(0,i.kt)("a",{parentName:"p",href:"https://academind.com/tutorials/localstorage-vs-cookies-xss/"},"not any safer than")," the use of local storage. "),(0,i.kt)("p",null,"So no matter the used solution the most important thing is to ",(0,i.kt)("a",{parentName:"p",href:"https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html"},"minimize the risk")," of XSS attacks altogether."),(0,i.kt)("h2",{id:"propschildren"},"props.children"),(0,i.kt)("h3",{id:"display-the-login-form-only-when-appropriate"},"Display the login form only when appropriate"),(0,i.kt)("p",null,"Let's modify the application so that the login form is not displayed by default:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(3433).Z,width:"1456",height:"520"})),(0,i.kt)("p",null,"The login form appears when the user presses the ",(0,i.kt)("i",null,"login")," button:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(1272).Z,width:"1368",height:"492"})),(0,i.kt)("p",null,"The user can close the login form by clicking the ",(0,i.kt)("i",null,"cancel")," button."),(0,i.kt)("p",null,"Let's start by extracting the login form into its own component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const LoginForm = ({\n   handleSubmit,\n   handleUsernameChange,\n   handlePasswordChange,\n   username,\n   password\n  }) => {\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type="password"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n      </div>\n        <button type="submit">login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm\n')),(0,i.kt)("p",null,"The state and all the functions related to it are defined outside of the component and are passed to the component as props."),(0,i.kt)("p",null,"Notice that the props are assigned to variables through ",(0,i.kt)("i",null,"destructuring"),", which means that instead of writing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const LoginForm = (props) => {\n  return (\n    <div>\n      <h2>Login</h2>\n      <form onSubmit={props.handleSubmit}>\n        <div>\n          username\n          <input\n            value={props.username}\n            onChange={props.handleChange}\n            name="username"\n          />\n        </div>\n        // ...\n        <button type="submit">login</button>\n      </form>\n    </div>\n  )\n}\n')),(0,i.kt)("p",null,"where the properties of the ",(0,i.kt)("em",{parentName:"p"},"props")," object are accessed through e.g. ",(0,i.kt)("em",{parentName:"p"},"props.handleSubmit"),", the properties are assigned directly to their own variables."),(0,i.kt)("p",null,"One fast way of implementing the functionality is to change the ",(0,i.kt)("em",{parentName:"p"},"loginForm")," function of the ",(0,i.kt)("i",null,"App")," component like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const [loginVisible, setLoginVisible] = useState(false) // highlight-line\n\n  // ...\n\n  const loginForm = () => {\n    const hideWhenVisible = { display: loginVisible ? 'none' : '' }\n    const showWhenVisible = { display: loginVisible ? '' : 'none' }\n\n    return (\n      <div>\n        <div style={hideWhenVisible}>\n          <button onClick={() => setLoginVisible(true)}>log in</button>\n        </div>\n        <div style={showWhenVisible}>\n          <LoginForm\n            username={username}\n            password={password}\n            handleUsernameChange={({ target }) => setUsername(target.value)}\n            handlePasswordChange={({ target }) => setPassword(target.value)}\n            handleSubmit={handleLogin}\n          />\n          <button onClick={() => setLoginVisible(false)}>cancel</button>\n        </div>\n      </div>\n    )\n  }\n\n  // ...\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("i",null,"App")," components state now contains the boolean ",(0,i.kt)("i",null,"loginVisible"),", that defines if the login form should be shown to the user or not."),(0,i.kt)("p",null,"The value of loginVisible is toggled with two buttons. Both buttons have their event handlers defined directly in the component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<button onClick={() => setLoginVisible(true)}>log in</button>\n\n<button onClick={() => setLoginVisible(false)}>cancel</button>\n")),(0,i.kt)("p",null,"The visibility of the component is defined by giving the component an inline style rule, where the value of the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/display"},"display")," property is ",(0,i.kt)("i",null,"none")," if we do not want the component to be displayed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const hideWhenVisible = { display: loginVisible ? 'none' : '' }\nconst showWhenVisible = { display: loginVisible ? '' : 'none' }\n\n<div style={hideWhenVisible}>\n  // button\n</div>\n\n<div style={showWhenVisible}>\n  // button\n</div>\n")),(0,i.kt)("p",null,'We are once again using the "question mark" ternary operator. If ',(0,i.kt)("em",{parentName:"p"},"loginVisible")," is ",(0,i.kt)("i",null,"true"),", then the CSS rule of the component will be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},"display: 'none';\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("em",{parentName:"p"},"loginVisible")," is ",(0,i.kt)("i",null,"false"),", then ",(0,i.kt)("i",null,"display"),"  will not receive any value related to the visibility of the component."),(0,i.kt)("h3",{id:"the-components-children"},"The components children"),(0,i.kt)("p",null,"The code related to managing the visibility of the login form could be considered to be its own logical entity, and for this reason it would be good to extract it from the ",(0,i.kt)("i",null,"App")," component into its own separate component."),(0,i.kt)("p",null,"Our goal is to implement a new ",(0,i.kt)("i",null,"Togglable")," component that can be used in the following way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Togglable buttonLabel='login'>\n  <LoginForm\n    username={username}\n    password={password}\n    handleUsernameChange={({ target }) => setUsername(target.value)}\n    handlePasswordChange={({ target }) => setPassword(target.value)}\n    handleSubmit={handleLogin}\n  />\n</Togglable>\n")),(0,i.kt)("p",null,"The way that the component is used is slightly different from our previous components. The component has both opening and closing tags which surround a ",(0,i.kt)("i",null,"LoginForm")," component. In React terminology ",(0,i.kt)("i",null,"LoginForm")," is a child component of ",(0,i.kt)("i",null,"Togglable"),"."),(0,i.kt)("p",null,"We can add any React elements we want between the opening and closing tags of ",(0,i.kt)("i",null,"Togglable"),", like this for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Togglable buttonLabel="reveal">\n  <p>this line is at start hidden</p>\n  <p>also this is hidden</p>\n</Togglable>\n')),(0,i.kt)("p",null,"The code for the ",(0,i.kt)("i",null,"Togglable")," component is shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nconst Togglable = (props) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Togglable\n")),(0,i.kt)("p",null,"The new and interesting part of the code is ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/glossary.html#propschildren"},"props.children"),", that is used for referencing the child components of the component. The child components are the React elements that we define between the opening and closing tags of a component."),(0,i.kt)("p",null,"This time the children are rendered in the code that is used for rendering the component itself:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<div style={showWhenVisible}>\n  {props.children}\n  <button onClick={toggleVisibility}>cancel</button>\n</div>\n")),(0,i.kt)("p",null,'Unlike the "normal" props we\'ve seen before, ',(0,i.kt)("i",null,"children")," is automatically added by React and always exists. If a component is defined with an automatically closing ",(0,i.kt)("em",{parentName:"p"},"/>")," tag, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Note\n  key={note.id}\n  note={note}\n  toggleImportance={() => toggleImportanceOf(note.id)}\n/>\n")),(0,i.kt)("p",null,"Then ",(0,i.kt)("i",null,"props.children")," is an empty array."),(0,i.kt)("p",null,"The ",(0,i.kt)("i",null,"Togglable")," component is reusable and we can use it to add similar visibility toggling functionality to the form that is used for creating new notes."),(0,i.kt)("p",null,"Before we do that, let's extract the form for creating notes into its own component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const NoteForm = ({ onSubmit, handleChange, value}) => {\n  return (\n    <div>\n      <h2>Create a new note</h2>\n\n      <form onSubmit={onSubmit}>\n        <input\n          value={value}\n          onChange={handleChange}\n        />\n        <button type="submit">save</button>\n      </form>\n    </div>\n  )\n}\n')),(0,i.kt)("p",null,"Next let's define the form component inside of a ",(0,i.kt)("i",null,"Togglable")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Togglable buttonLabel="new note">\n  <NoteForm\n    onSubmit={addNote}\n    value={newNote}\n    handleChange={handleNoteChange}\n  />\n</Togglable>\n')),(0,i.kt)("p",null,"You can find the code for our current application in its entirety in the ",(0,i.kt)("i",null,"part5-4")," branch of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy/part2-notes/tree/part5-4"},"this github repository"),"."),(0,i.kt)("h3",{id:"state-of-the-forms"},"State of the forms"),(0,i.kt)("p",null,"The state of the application currently is in the ",(0,i.kt)("em",{parentName:"p"},"App")," component."),(0,i.kt)("p",null,"React documentation says the ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/lifting-state-up.html"},"following")," about where to place the state:"),(0,i.kt)("i",null,"Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor."),(0,i.kt)("p",null,"If we think about the state of the forms, so for example the contents of a new note before it has been created, the ",(0,i.kt)("em",{parentName:"p"},"App")," component does not actually need it for anything.\nWe could just as well move the state of the forms to the corresponding components. "),(0,i.kt)("p",null,"The component for a note changes like so: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react' \n\nconst NoteForm = ({ createNote }) => {\n  const [newNote, setNewNote] = useState('') \n\n  const handleChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    createNote({\n      content: newNote,\n      important: Math.random() > 0.5,\n    })\n\n    setNewNote('')\n  }\n\n  return (\n    <div>\n      <h2>Create a new note</h2>\n\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NoteForm\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("i",null,"newNote")," state attribute and the event handler responsible for changing it have been moved from the ",(0,i.kt)("em",{parentName:"p"},"App")," component to the component responsible for the note form. "),(0,i.kt)("p",null,"There is only one prop left, the ",(0,i.kt)("em",{parentName:"p"},"createNote")," function, which the form calls when a new note is created. "),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"App")," component becomes simpler now that we have got rid of the ",(0,i.kt)("i",null,"newNote")," state and its event handler.\nThe ",(0,i.kt)("em",{parentName:"p"},"addNote")," function for creating new notes receives a new note as a parameter, and the function is the only prop we send to the form: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  // ...\n  const addNote = (noteObject) => {\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n      })\n  }\n  // ...\n  const noteForm = () => (\n    <Togglable buttonLabel='new note'>\n      <NoteForm createNote={addNote} />\n    </Togglable>\n  )\n\n  // ...\n}\n")),(0,i.kt)("p",null,"We could do the same for the log in form, but we'll leave that for an optional exercise. "),(0,i.kt)("p",null,"The application code can be found from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy/part2-notes/tree/part5-5"},"github"),",\nbranch ",(0,i.kt)("i",null,"part5-5"),"."),(0,i.kt)("h2",{id:"proptypes"},"PropTypes"),(0,i.kt)("p",null,"The ",(0,i.kt)("i",null,"Togglable")," component assumes that it is given the text for the button via the ",(0,i.kt)("i",null,"buttonLabel")," prop. If we forget to define it to the component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Togglable> buttonLabel forgotten... </Togglable>\n")),(0,i.kt)("p",null,"The application works, but the browser renders a button that has no label text."),(0,i.kt)("p",null,"We would like to enforce that when the ",(0,i.kt)("i",null,"Togglable")," component is used, the button label text prop must be given a value."),(0,i.kt)("p",null,"The expected and required props of a component can be defined with the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/facebook/prop-types"},"prop-types")," package. Let's install the package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install prop-types\n")),(0,i.kt)("p",null,"We can define the ",(0,i.kt)("i",null,"buttonLabel")," prop as a mandatory or ",(0,i.kt)("i",null,"required")," string-type prop as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  // ..\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n")),(0,i.kt)("p",null,"The console will display the following error message if the prop is left undefined:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(498).Z,width:"1736",height:"312"})),(0,i.kt)("p",null,"The application still works and nothing forces us to define props despite the PropTypes definitions. Mind you, it is extremely unprofessional to leave ",(0,i.kt)("i",null,"any")," red output to the browser console."),(0,i.kt)("p",null,"Let's also define PropTypes to the ",(0,i.kt)("i",null,"LoginForm")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import PropTypes from 'prop-types'\n\nconst LoginForm = ({\n   handleSubmit,\n   handleUsernameChange,\n   handlePasswordChange,\n   username,\n   password\n  }) => {\n    // ...\n  }\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n}\n")),(0,i.kt)("p",null,"If the type of a passed prop is wrong, e.g. if we try to define the ",(0,i.kt)("i",null,"handleSubmit")," prop as a string, then this will result in the following warning:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(3594).Z,width:"1736",height:"252"})),(0,i.kt)("h2",{id:"react-router"},"React router"),(0,i.kt)("h3",{id:"application-navigation-structure"},"Application navigation structure"),(0,i.kt)("p",null,"It is very common for web applications to have a navigation bar, which enables switching the view of the application."),(0,i.kt)("p",null,"Our app could have a main page"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(8784).Z,width:"1702",height:"574"})),(0,i.kt)("p",null,"and separate pages for showing information on notes and users:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(7583).Z,width:"1590",height:"538"})),(0,i.kt)("p",null,"In an old school web app, changing the page shown by the application would be accomplished by the browser making an HTTP GET request to the server and rendering the HTML representing the view that was returned."),(0,i.kt)("p",null,'In single page apps, we are, in reality, always on the same page. The Javascript code run by the browser creates an illusion of different "pages". If HTTP requests are made when switching view, they are only for fetching JSON-formatted data, which the new view might require for it to be shown.'),(0,i.kt)("p",null,"The navigation bar and an application containing multiple views is very easy to implement using React."),(0,i.kt)("p",null,"Here is one way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Home = () => (\n  <div> <h2>TKTL notes app</h2> </div>\n)\n\nconst Notes = () => (\n  <div> <h2>Notes</h2> </div>\n)\n\nconst Users = () => (\n  <div> <h2>Users</h2> </div>\n)\n\nconst App = () => {\n  const [page, setPage] = useState('home')\n\n const toPage = (page) => (event) => {\n    event.preventDefault()\n    setPage(page)\n  }\n\n  const content = () => {\n    if (page === 'home') {\n      return <Home />\n    } else if (page === 'notes') {\n      return <Notes />\n    } else if (page === 'users') {\n      return <Users />\n    }\n  }\n\n  const padding = {\n    padding: 5\n  }\n\n  return (\n    <div>\n      <div>\n        <a href=\"\" onClick={toPage('home')} style={padding}>\n          home\n        </a>\n        <a href=\"\" onClick={toPage('notes')} style={padding}>\n          notes\n        </a>\n        <a href=\"\" onClick={toPage('users')} style={padding}>\n          users\n        </a>\n      </div>\n\n      {content()}\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n")),(0,i.kt)("p",null,"Each view is implemented as its own component. We store the view component information in the application state called ",(0,i.kt)("i",null,"page"),". This information tells us which component, representing a view, should be shown below the menu bar."),(0,i.kt)("p",null,"However, the method is not very optimal. As we can see from the pictures, the address stays the same even though at times we are in different views. Each view should preferably have its own address, e.g. to make bookmarking possible. The ",(0,i.kt)("i",null,"back"),"-button doesn't work as expected for our application either, meaning that ",(0,i.kt)("i",null,"back")," doesn't move you to the previously displayed view of the application, but somewhere completely different. If the application were to grow even bigger and we wanted to, for example, add separate views for each user and note, then this self-made ",(0,i.kt)("i",null,"routing"),", which means the navigation management of the application, would get overly complicated."),(0,i.kt)("h3",{id:"react-router-1"},"React Router"),(0,i.kt)("p",null,"Luckily, React has the ","[React Router]","(",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/"},"https://reactrouter.com/")," library which provides an excellent solution for managing navigation in a React application."),(0,i.kt)("p",null,"Let's change the above application to use React Router. First, we install React Router with the command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install react-router-dom\n")),(0,i.kt)("p",null,"The routing provided by React Router is enabled by changing the application as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  BrowserRouter as Router,\n  Switch, Route, Link\n} from "react-router-dom"\n\nconst App = () => {\n\n  const padding = {\n    padding: 5\n  }\n\n  return (\n    <Router>\n      <div>\n        <Link style={padding} to="/">home</Link>\n        <Link style={padding} to="/notes">notes</Link>\n        <Link style={padding} to="/users">users</Link>\n      </div>\n\n      <Switch>\n        <Route path="/notes">\n          <Notes />\n        </Route>\n        <Route path="/users">\n          <Users />\n        </Route>\n        <Route path="/">\n          <Home />\n        </Route>\n      </Switch>\n\n      <div>\n        <i>Note app, 2022</i>\n      </div>\n    </Router>\n  )\n}\n')),(0,i.kt)("p",null,"Routing, or the conditional rendering of components ",(0,i.kt)("i",null,"based on the url")," in the browser, is used by placing components as children of the ",(0,i.kt)("i",null,"Router")," component, meaning inside ",(0,i.kt)("i",null,"Router")," tags."),(0,i.kt)("p",null,"Notice that, even though the component is referred to by the name ",(0,i.kt)("i",null,"Router"),", we are in fact talking about ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#browserrouter"},"BrowserRouter"),", because here the import happens by renaming the imported object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  BrowserRouter as Router, // highlight-line\n  Switch, Route, Link\n} from "react-router-dom"\n')),(0,i.kt)("p",null,"According to the ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#browserrouter"},"manual"),":"),(0,i.kt)("blockquote",null,(0,i.kt)("i",null,"BrowserRouter")," is a ",(0,i.kt)("i",null,"Router")," that uses the HTML5 history API (pushState, replaceState and the popState event) to keep your UI in sync with the URL."),(0,i.kt)("p",null,"Normally the browser loads a new page when the URL in the address bar changes. However, with the help of the ",(0,i.kt)("a",{parentName:"p",href:"https://css-tricks.com/using-the-html5-history-api/"},"HTML5 history API"),", ",(0,i.kt)("i",null,"BrowserRouter"),' enables us to use the URL in the address bar of the browser for internal "routing" in a React application. So, even if the URL in the address bar changes, the content of the page is only manipulated using Javascript, and the browser will not load new content from the server. Using the back and forward actions, as well as making bookmarks, is still logical like on a traditional web page.'),(0,i.kt)("p",null,"Inside the router, we define ",(0,i.kt)("i",null,"links")," that modify the address bar with the help of the ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#link"},"Link")," component. For example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Link to="/notes">notes</Link>\n')),(0,i.kt)("p",null,"creates a link in the application with the text ",(0,i.kt)("i",null,"notes"),", which when clicked changes the URL in the address bar to ",(0,i.kt)("i",null,"/notes"),"."),(0,i.kt)("p",null,"Components rendered based on the URL of the browser are defined with the help of the component ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#routes-and-route"},"Route"),". For example, "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Route path="/notes" element={<Notes />} />\n')),(0,i.kt)("p",null,"defines that, if the browser address is ",(0,i.kt)("i",null,"/notes"),", we render the ",(0,i.kt)("i",null,"Notes")," component."),(0,i.kt)("p",null,"We wrap the components to be rendered based on the url with a ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#routes-and-route"},"Routes")," component"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Routes>\n  <Route path="/notes" element={<Notes />} />\n  <Route path="/users" element={<Users />} />\n  <Route path="/" element={<Home />} />\n</Routes>\n')),(0,i.kt)("p",null,"The Routes works by rendering the first component whose ",(0,i.kt)("i",null,"path")," matches the url in the browser's address bar."),(0,i.kt)("h3",{id:"parameterized-route"},"Parameterized route"),(0,i.kt)("p",null,"Let's examine the slightly modified version from the previous example. The complete code for the example can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/misc/blob/master/router-app-v1.js"},"here"),"."),(0,i.kt)("p",null,"The application now contains five different views whose display is controlled by the router. In addition to the components from the previous example (",(0,i.kt)("i",null,"Home"),", ",(0,i.kt)("i",null,"Notes")," and ",(0,i.kt)("i",null,"Users"),"), we have ",(0,i.kt)("i",null,"Login")," representing the login view and ",(0,i.kt)("i",null,"Note")," representing the view of a single note."),(0,i.kt)("i",null,"Home")," and ",(0,i.kt)("i",null,"Users")," are unchanged from the previous exercise.  ",(0,i.kt)("i",null,"Notes")," is a bit more complicated. It renders the list of notes passed to it as props in such a way that the name of each note is clickable.",(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(7299).Z,width:"1448",height:"490"})),(0,i.kt)("p",null,"The ability to click a name is implemented with the component ",(0,i.kt)("i",null,"Link"),", and clicking the name of a note whose id is 3 would trigger an event that changes the address of the browser into ",(0,i.kt)("i",null,"notes/3"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Notes = ({notes}) => (\n  <div>\n    <h2>Notes</h2>\n    <ul>\n      {notes.map(note =>\n        <li key={note.id}>\n          <Link to={`/notes/${note.id}`}>{note.content}</Link>\n        </li>\n      )}\n    </ul>\n  </div>\n)\n")),(0,i.kt)("p",null,"We define parameterized urls in the routing in ",(0,i.kt)("i",null,"App")," component as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Router>\n  // ...\n\n  <Routes>\n    <Route path="/notes/:id" element={<Note notes={notes} />} /> // highlight-line\n    <Route path="/notes" element={<Notes notes={notes} />} />   \n    <Route path="/users" element={user ? <Users /> : <Navigate replace to="/login" />} />\n    <Route path="/login" element={<Login onLogin={login} />} />\n    <Route path="/" element={<Home />} />      \n  </Routes>\n</Router>\n')),(0,i.kt)("p",null,'We define the route rendering a specific note "express style" by marking the parameter with a colon ',(0,i.kt)("i",null,":id")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Route path="/notes/:id" element={<Note notes={notes} />} />\n')),(0,i.kt)("p",null,"When a browser navigates to the url for a specific note, for example ",(0,i.kt)("i",null,"/notes/3"),", we render the ",(0,i.kt)("i",null,"Note")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  // ...\n  useParams  // highlight-line\n} from \"react-router-dom\"\n\nconst Note = ({ notes }) => {\n  const id = useParams().id // highlight-line\n  const note = notes.find(n => n.id === Number(id)) \n  return (\n    <div>\n      <h2>{note.content}</h2>\n      <div>{note.user}</div>\n      <div><strong>{note.important ? 'important' : ''}</strong></div>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Note")," component receives all of the notes as props ",(0,i.kt)("i",null,"notes"),", and it can access the url parameter (the id of the note to be displayed) with the ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#useparams"},"useParams")," function of the React Router."),(0,i.kt)("h3",{id:"usenavigate"},"useNavigate"),(0,i.kt)("p",null,"We have also implemented a simple login function in our application. If a user is logged in, information about a logged-in user is saved to the ",(0,i.kt)("i",null,"user")," field of the state of the ",(0,i.kt)("i",null,"App")," component."),(0,i.kt)("p",null,"The option to navigate to the ",(0,i.kt)("i",null,"Login")," view is rendered conditionally in the menu."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Router>\n  <div>\n    <Link style={padding} to="/">home</Link>\n    <Link style={padding} to="/notes">notes</Link>\n    <Link style={padding} to="/users">users</Link>\n    // highlight-start\n    {user\n      ? <em>{user} logged in</em>\n      : <Link style={padding} to="/login">login</Link>\n    }\n    // highlight-end\n  </div>\n\n  // ...\n</Router>\n')),(0,i.kt)("p",null,"So if the user is already logged in, instead of displaying the link ",(0,i.kt)("i",null,"Login"),", we show the username of the user:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(8489).Z,width:"1388",height:"408"})),(0,i.kt)("p",null,"The code of the component handling the login functionality is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  // ...\n  useNavigate // highlight-line\n} from 'react-router-dom'\n\nconst Login = (props) => {\n  const navigate = useNavigate() // highlight-line\n\n  const onSubmit = (event) => {\n    event.preventDefault()\n    props.onLogin('mluukkai')\n    navigate('/') // highlight-line\n  }\n\n  return (\n    <div>\n      <h2>login</h2>\n      <form onSubmit={onSubmit}>\n        <div>\n          username: <input />\n        </div>\n        <div>\n          password: <input type='password' />\n        </div>\n        <button type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"What is interesting about this component is the use of the ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#usenavigate"},"useNavigate")," function of the React Router. With this function the browser's url can be changed programmatically."),(0,i.kt)("p",null,"With user login, we call ",(0,i.kt)("em",{parentName:"p"},"navigate('/')")," that causes the browser's url to change to ",(0,i.kt)("em",{parentName:"p"},"/")," and the application renders the corresponding component ",(0,i.kt)("i",null,"Home"),"."),(0,i.kt)("p",null,"Both ",(0,i.kt)("a",{parentName:"p",href:"https://reacttraining.com/react-router/web/api/Hooks/useparams"},"useParams")," and ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#usenavigate"},"useNavigate"),"  are hook functions, just like useState and useEffect which we have used many times now.  As you may recall, there are some rules to using hook functions. Create-react-app has been configured to warn you if you break these rules, for example, by calling a hook function from a conditional statement."),(0,i.kt)("h3",{id:"redirect"},"redirect"),(0,i.kt)("p",null,"There is one more interesting detail about the ",(0,i.kt)("i",null,"Users")," route: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Route path="/users" element={user ? <Users /> : <Navigate replace to="/login" />} />\n')),(0,i.kt)("p",null,"If a user isn't logged in, the ",(0,i.kt)("i",null,"Users")," component is not rendered. Instead, the user is ",(0,i.kt)("i",null,"redirected")," using the component ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#navigate"},"Navigate")," to the login view:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Navigate replace to="/login" />\n')),(0,i.kt)("p",null,"In reality, it would perhaps be better to not even show links in the navigation bar requiring login if the user is not logged into the application."),(0,i.kt)("p",null,"Here is the ",(0,i.kt)("i",null,"App")," component in its entirety:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const App = () => {\n  const [notes, setNotes] = useState([\n    // ...\n  ])\n\n  const [user, setUser] = useState(null) \n\n  const login = (user) => {\n    setUser(user)\n  }\n\n  const padding = {\n    padding: 5\n  }\n\n  return (\n    <div>\n    <Router>\n      <div>\n        <Link style={padding} to="/">home</Link>\n        <Link style={padding} to="/notes">notes</Link>\n        <Link style={padding} to="/users">users</Link>\n        {user\n          ? <em>{user} logged in</em>\n          : <Link style={padding} to="/login">login</Link>\n        }\n      </div>\n\n      <Routes>\n        <Route path="/notes/:id" element={<Note notes={notes} />} />  \n        <Route path="/notes" element={<Notes notes={notes} />} />   \n        <Route path="/users" element={user ? <Users /> : <Navigate replace to="/login" />} />\n        <Route path="/login" element={<Login onLogin={login} />} />\n        <Route path="/" element={<Home />} />      \n      </Routes>\n    </Router>      \n      <div>\n        <br />\n        <em>Note app, 2022</em>\n      </div>\n    </div>\n  )\n}\n')),(0,i.kt)("p",null,"We define an element common for modern web apps called ",(0,i.kt)("i",null,"footer"),", which defines the part at the bottom of the screen, outside of the ",(0,i.kt)("i",null,"Router"),", so that it is shown regardless of the component shown in the routed part of the application."),(0,i.kt)("h3",{id:"parameterized-route-revisited"},"Parameterized route revisited"),(0,i.kt)("p",null,"Our application has a flaw. The ",(0,i.kt)("em",{parentName:"p"},"Note")," component receives all of the notes, even though it only displays the one whose id matches the url parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Note = ({ notes }) => { \n  const id = useParams().id\n  const note = notes.find(n => n.id === Number(id))\n  // ...\n}\n")),(0,i.kt)("p",null,"Would it be possible to modify the application so that ",(0,i.kt)("em",{parentName:"p"},"Note")," receives only the component it should display?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Note = ({ note }) => {\n  return (\n    <div>\n      <h2>{note.content}</h2>\n      <div>{note.user}</div>\n      <div><strong>{note.important ? 'important' : ''}</strong></div>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"One way to do this would be to use React Router's ",(0,i.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/api#usematch"},"useMatch")," hook to figure out the id of the note to be displayed in the ",(0,i.kt)("em",{parentName:"p"},"App")," component."),(0,i.kt)("p",null,"It is not possible to use the ",(0,i.kt)("i",null,"useMatch")," hook in the component which defines the routed part of the application. Let's move the use of the ",(0,i.kt)("em",{parentName:"p"},"Router")," components from ",(0,i.kt)("em",{parentName:"p"},"App"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"ReactDOM.render(\n  <Router> // highlight-line\n    <App />\n  </Router>, // highlight-line\n  document.getElementById('root')\n)\n")),(0,i.kt)("p",null,"The _App_component becomes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  // ...\n  useMatch  // highlight-line\n} from "react-router-dom"\n\nconst App = () => {\n  // ...\n\n // highlight-start\n  const match = useMatch(\'/notes/:id\')\n\n  const note = match \n    ? notes.find(note => note.id === Number(match.params.id))\n    : null\n  // highlight-end\n\n  return (\n    <div>\n      <div>\n        <Link style={padding} to="/">home</Link>\n        // ...\n      </div>\n\n      <Routes>\n        <Route path="/notes/:id" element={<Note note={note} />} />   // highlight-line\n        <Route path="/notes" element={<Notes notes={notes} />} />   \n        <Route path="/users" element={user ? <Users /> : <Navigate replace to="/login" />} />\n        <Route path="/login" element={<Login onLogin={login} />} />\n        <Route path="/" element={<Home />} />      \n      </Routes>   \n\n      <div>\n        <em>Note app, 2022</em>\n      </div>\n    </div>\n  )\n}  \n')),(0,i.kt)("p",null,"Every time the component is rendered, so practically every time the browser's url changes, the following command is executed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const match = useMatch('/notes/:id')\n")),(0,i.kt)("p",null,"If the url matches ",(0,i.kt)("em",{parentName:"p"},"/notes/:id"),", the match variable will contain an object from which we can access the parameterized part of the path, the id of the note to be displayed, and we can then fetch the correct note to display."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const note = match \n  ? notes.find(note => note.id === Number(match.params.id))\n  : null\n")),(0,i.kt)("p",null,"The completed code can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/misc/blob/main/router-app-v2.js"},"here"),"."),(0,i.kt)("h2",{id:"hooks"},"Hooks"),(0,i.kt)("p",null,"React offers 10 different ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html"},"built-in hooks"),", of which the most popular ones are the ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#usestate"},"useState")," and ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#useeffect"},"useEffect")," hooks that we have already been using extensively."),(0,i.kt)("p",null,"Within the last couple of years many React libraries have begun to offer hook-based apis. The ",(0,i.kt)("a",{parentName:"p",href:"https://reacttraining.com/react-router/web/guides"},"React Router's")," api is also partially ",(0,i.kt)("a",{parentName:"p",href:"https://reacttraining.com/react-router/web/api/Hooks"},"hook"),"-based. Its hooks can be used to access url parameters and the ",(0,i.kt)("em",{parentName:"p"},"navigation")," object, which allows for manipulating the browser url programmatically."),(0,i.kt)("p",null,"Hooks are not normal functions, and when using those we have to adhere to certain ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-rules.html"},"rules or limitations"),". Let's recap the rules of using hooks, copied verbatim from the official React documentation:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don\u2019t call Hooks inside loops, conditions, or nested functions.")," Instead, always use Hooks at the top level of your React function. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don\u2019t call Hooks from regular JavaScript functions.")," Instead, you can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Call Hooks from React function components."),(0,i.kt)("li",{parentName:"ul"},"Call Hooks from custom Hooks")),(0,i.kt)("p",null,"There's an existing ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/eslint-plugin-react-hooks"},"ESlint")," rule that can be used to verify that the application uses hooks correctly. "),(0,i.kt)("p",null,"Create-react-app has the readily-configured rule ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/eslint-plugin-react-hooks"},"eslint-plugin-react-hooks")," that complains if hooks are used in an illegal manner:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(3219).Z,width:"1440",height:"510"})),(0,i.kt)("h3",{id:"custom-hooks"},"Custom hooks"),(0,i.kt)("p",null,"React offers the option to create our own ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-custom.html"},"custom")," hooks. According to React, the primary purpose of custom hooks is to facilitate the reuse of the logic used in components."),(0,i.kt)("blockquote",null,(0,i.kt)("i",null,"Building your own Hooks lets you extract component logic into reusable functions.")),(0,i.kt)("p",null,"Custom hooks are regular JavaScript functions that can use any other hooks, as long as they adhere to the rules of hooks. Additionally, the name of custom hooks must start with the word ",(0,i.kt)("em",{parentName:"p"},"use"),"."),(0,i.kt)("p",null,"In previous lecture, we implemented a counter application  that can have its value incremented, decremented, or reset. The code of the application is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\nconst App = (props) => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <div>{counter}</div>\n      <button onClick={() => setCounter(counter + 1)}>\n        plus\n      </button>\n      <button onClick={() => setCounter(counter - 1)}>\n        minus\n      </button>      \n      <button onClick={() => setCounter(0)}>\n        zero\n      </button>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"Let's extract the counter logic into its own custom hook. The code for the hook is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const useCounter = () => {\n  const [value, setValue] = useState(0)\n\n  const increase = () => {\n    setValue(value + 1)\n  }\n\n  const decrease = () => {\n    setValue(value - 1)\n  }\n\n  const zero = () => {\n    setValue(0)\n  }\n\n  return {\n    value, \n    increase,\n    decrease,\n    zero\n  }\n}\n")),(0,i.kt)("p",null,"Our custom hook uses the ",(0,i.kt)("em",{parentName:"p"},"useState")," hook internally to create its own state. The hook returns an object, the properties of which include the value of the counter as well as functions for manipulating the value."),(0,i.kt)("p",null,"React components can use the hook as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => {\n  const counter = useCounter()\n\n  return (\n    <div>\n      <div>{counter.value}</div>\n      <button onClick={counter.increase}>\n        plus\n      </button>\n      <button onClick={counter.decrease}>\n        minus\n      </button>      \n      <button onClick={counter.zero}>\n        zero\n      </button>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"By doing this we can extract the state of the ",(0,i.kt)("em",{parentName:"p"},"App")," component and its manipulation entirely into the ",(0,i.kt)("em",{parentName:"p"},"useCounter")," hook. Managing the counter state and logic is now the responsibility of the custom hook."),(0,i.kt)("p",null,"The same hook could be ",(0,i.kt)("i",null,"reused")," in the application that was keeping track of the amount of clicks made to the left and right buttons:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"\nconst App = () => {\n  const left = useCounter()\n  const right = useCounter()\n\n  return (\n    <div>\n      {left.value}\n      <button onClick={left.increase}>\n        left\n      </button>\n      <button onClick={right.increase}>\n        right\n      </button>\n      {right.value}\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"The application creates ",(0,i.kt)("i",null,"two")," completely separate counters. The first one is assigned to the variable ",(0,i.kt)("em",{parentName:"p"},"left")," and the other to the variable ",(0,i.kt)("em",{parentName:"p"},"right"),"."),(0,i.kt)("p",null,"Dealing with forms in React is somewhat tricky. The following application presents the user with a form that requests the user to input their name, birthday, and height:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const [name, setName] = useState('')\n  const [born, setBorn] = useState('')\n  const [height, setHeight] = useState('')\n\n  return (\n    <div>\n      <form>\n        name: \n        <input\n          type='text'\n          value={name}\n          onChange={(event) => setName(event.target.value)} \n        /> \n        <br/> \n        birthdate:\n        <input\n          type='date'\n          value={born}\n          onChange={(event) => setBorn(event.target.value)}\n        />\n        <br /> \n        height:\n        <input\n          type='number'\n          value={height}\n          onChange={(event) => setHeight(event.target.value)}\n        />\n      </form>\n      <div>\n        {name} {born} {height} \n      </div>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"Every field of the form has its own state. In order to keep the state of the form synchronized with the data provided by the user, we have to register an appropriate ",(0,i.kt)("i",null,"onChange")," handler for each of the ",(0,i.kt)("i",null,"input")," elements."),(0,i.kt)("p",null,"Let's define our own custom ",(0,i.kt)("em",{parentName:"p"},"useField")," hook that simplifies the state management of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const useField = (type) => {\n  const [value, setValue] = useState('')\n\n  const onChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  return {\n    type,\n    value,\n    onChange\n  }\n}\n")),(0,i.kt)("p",null,"The hook function receives the type of the input field as a parameter. The function returns all of the attributes required by the ",(0,i.kt)("i",null,"input"),": its type, value and the onChange handler."),(0,i.kt)("p",null,"The hook can be used in the following way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const name = useField('text')\n  // ...\n\n  return (\n    <div>\n      <form>\n        <input\n          type={name.type}\n          value={name.value}\n          onChange={name.onChange} \n        /> \n        // ...\n      </form>\n    </div>\n  )\n}\n")),(0,i.kt)("h3",{id:"spread-attributes"},"Spread attributes"),(0,i.kt)("p",null,"We could simplify things a bit further. Since the ",(0,i.kt)("em",{parentName:"p"},"name")," object has exactly all of the attributes that the ",(0,i.kt)("i",null,"input")," element expects to receive as props, we can pass the props to the element using the ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/jsx-in-depth.html#spread-attributes"},"spread syntax")," in the following way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<input {...name} /> \n")),(0,i.kt)("p",null,"As the ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/jsx-in-depth.html#spread-attributes"},"example")," in the React documentation states, the following two ways of passing props to a component achieve the exact same result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Greeting firstName='Arto' lastName='Hellas' />\n\nconst person = {\n  firstName: 'Arto',\n  lastName: 'Hellas'\n}\n\n<Greeting {...person} />\n")),(0,i.kt)("p",null,"The application gets simplified into the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const name = useField('text')\n  const born = useField('date')\n  const height = useField('number')\n\n  return (\n    <div>\n      <form>\n        name: \n        <input  {...name} /> \n        <br/> \n        birthdate:\n        <input {...born} />\n        <br /> \n        height:\n        <input {...height} />\n      </form>\n      <div>\n        {name.value} {born.value} {height.value}\n      </div>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"Dealing with forms is greatly simplified when the unpleasant nitty-gritty details related to synchronizing the state of the form is encapsulated inside of our custom hook."),(0,i.kt)("p",null,"Custom hooks are clearly not only a tool for reuse, they also provide a better way for dividing our code into smaller modular parts."),(0,i.kt)("h3",{id:"more-about-hooks"},"More about hooks"),(0,i.kt)("p",null,"The internet is starting to fill up with more and more helpful material related to hooks. The following sources are worth checking out:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/rehooks/awesome-react-hooks"},"Awesome React Hooks Resources")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://usehooks.com/"},"Easy to understand React Hook recipes by Gabe Ragland")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://overreacted.io/why-do-hooks-rely-on-call-order/"},"Why Do React Hooks Rely on Call Order?"))),(0,i.kt)("h2",{id:"more-about-styles"},"More about styles"),(0,i.kt)("p",null,"We examined two different ways of adding styles to our application: the old-school single CSS file and inline-styles. Now, we will take a look at a few other ways. "),(0,i.kt)("h3",{id:"ready-made-ui-libraries"},"Ready-made UI libraries"),(0,i.kt)("p",null,'One approach to defining styles for an application is to use a ready-made "UI framework".'),(0,i.kt)("p",null,"One of the first widely popular UI frameworks was the ",(0,i.kt)("a",{parentName:"p",href:"https://getbootstrap.com/"},"Bootstrap")," toolkit created by Twitter which may still be the most popular framework. Recently, there has been an explosion in the number of new UI frameworks that have entered the arena. In fact, the selection is so vast that there is little hope of creating an exhaustive list of options."),(0,i.kt)("p",null,'Many UI frameworks provide developers of web applications with ready-made themes and "components" like buttons, menus, and tables. We write components in quotes because, in this context, we are not talking about React components. Usually, UI frameworks are used by including the CSS stylesheets and JavaScript code of the framework in the application.'),(0,i.kt)("p",null,'There are many UI frameworks that have React-friendly versions where the framework\'s "components" have been transformed into React components. There are a few different React versions of Bootstrap like ',(0,i.kt)("a",{parentName:"p",href:"http://reactstrap.github.io/"},"reactstrap")," and ",(0,i.kt)("a",{parentName:"p",href:"https://react-bootstrap.github.io/"},"react-bootstrap"),"."),(0,i.kt)("p",null,"Next, we will take a closer look at ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/"},"MaterialUI")," frameworks,  and . We will use it to add styles."),(0,i.kt)("h3",{id:"material-ui"},"Material UI"),(0,i.kt)("p",null,"We will look into the ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/"},"MaterialUI")," React library, which implements the ",(0,i.kt)("a",{parentName:"p",href:"https://material.io/"},"Material design")," visual language developed by Google."),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The instructions below are for material-ui V4. To use V5 use:"),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mui.com/material-ui/guides/migration-v4/"},"Migration from v4 to v5 - Material UI")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mui.com/material-ui/getting-started/installation/"},"Install MUI"))))),(0,i.kt)("p",null,"Install the library with the command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @material-ui/core\n")),(0,i.kt)("p",null,"Then add the following line to the ",(0,i.kt)("i",null,"head")," tag in the ",(0,i.kt)("i",null,"public/index.html")," file. The line loads Google's font Roboto."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<head>\n  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />\n  // ...\n</head>\n')),(0,i.kt)("p",null,"Now let's use MaterialUI to render the contents of the whole application within a ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/components/container/"},"Container"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import Container from '@material-ui/core/Container'\n\nconst App = () => {\n  // ...\n  return (\n    <Container>\n      // ...\n    </Container>\n  )\n}\n")),(0,i.kt)("p",null,"Let's start with the ",(0,i.kt)("i",null,"Notes")," component. We'll render the list of notes as a ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/components/tables/#simple-table"},"table"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Notes = ({ notes }) => (\n  <div>\n    <h2>Notes</h2>\n\n    <TableContainer component={Paper}>\n      <Table>\n        <TableBody>\n          {notes.map(note => (\n            <TableRow key={note.id}>\n              <TableCell>\n                <Link to={`/notes/${note.id}`}>{note.content}</Link>\n              </TableCell>\n              <TableCell>\n                {note.user}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </div>\n)\n")),(0,i.kt)("p",null,"The table looks like so:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(5644).Z,width:"1500",height:"704"})),(0,i.kt)("p",null,"One less pleasant feature of Material UI is that each component has to be imported separately. The import list for the notes page is quite long:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Container,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  Paper,\n} from '@material-ui/core'\n")),(0,i.kt)("h4",{id:"form"},"Form"),(0,i.kt)("p",null,"Next, let's make the login form in the ",(0,i.kt)("i",null,"Login")," view better using the ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/components/text-fields/"},"TextField")," and ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/api/button/"},"Button")," components:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const Login = (props) => {\n  const navigate = useNavigate()\n\n  const onSubmit = (event) => {\n    event.preventDefault()\n    props.onLogin(\'mluukkai\')\n    navigate(\'/\')\n  }\n\n  return (\n    <div>\n      <h2>login</h2>\n      <form onSubmit={onSubmit}>\n        <div>\n          <TextField label="username" />\n        </div>\n        <div>\n          <TextField label="password" type=\'password\' />\n        </div>\n        <div>\n          <Button variant="contained" color="primary" type="submit">\n            login\n          </Button>\n        </div>\n      </form>\n    </div>\n  )\n}\n')),(0,i.kt)("p",null,"The end result is:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(4550).Z,width:"1466",height:"602"})),(0,i.kt)("p",null,"MaterialUI, unlike Bootstrap, does not provide a component for the form itself. The form here is an ordinary HTML ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"},"form")," element."),(0,i.kt)("p",null,"Remember to import all the components used in the form."),(0,i.kt)("h4",{id:"notification"},"Notification"),(0,i.kt)("p",null,"The notification displayed on login can be done using the ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/components/alert/"},"Alert")," component, which is quite similiar to bootstrap's equivalent component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<div>\n// highlight-start\n  {(message &&\n    <Alert severity="success">\n      {message}\n    </Alert>\n  )}\n// highlight-end\n</div>\n')),(0,i.kt)("p",null,"The Alert component is not yet included in the MaterialUI core package, so we have to install the ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/components/about-the-lab/"},"lab")," package to use it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @material-ui/lab\n")),(0,i.kt)("p",null,"Then we can import the component like so"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { Alert } from '@material-ui/lab'\n")),(0,i.kt)("p",null,"Alert is quite stylish:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(1047).Z,width:"1394",height:"654"})),(0,i.kt)("h4",{id:"navigation-structure"},"Navigation structure"),(0,i.kt)("p",null,"We can implement navigation using the ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/components/app-bar/"},"AppBar")," component."),(0,i.kt)("p",null,"If we use the example code from the documentation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<AppBar position="static">\n  <Toolbar>\n    <IconButton edge="start" color="inherit" aria-label="menu">\n    </IconButton>\n    <Button color="inherit">\n      <Link to="/">home</Link>\n    </Button>\n    <Button color="inherit">\n      <Link to="/notes">notes</Link>\n    </Button>\n    <Button color="inherit">\n      <Link to="/users">users</Link>\n    </Button>  \n    <Button color="inherit">\n      {user\n        ? <em>{user} logged in</em>\n        : <Link to="/login">login</Link>\n      }\n    </Button>                \n  </Toolbar>\n</AppBar>\n')),(0,i.kt)("p",null,"we do get working navigation, but it could look better"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(2005).Z,width:"1416",height:"604"})),(0,i.kt)("p",null,"We can find a better way from the ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/guides/composition/#routing-libraries"},"documentation"),". We can use ",(0,i.kt)("a",{parentName:"p",href:"https://material-ui.com/guides/composition/#component-prop"},"component props")," to define how the root element of a MaterialUI component is rendered."),(0,i.kt)("p",null,"By defining"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Button color="inherit" component={Link} to="/">\n  home\n</Button>\n')),(0,i.kt)("p",null,"the ",(0,i.kt)("em",{parentName:"p"},"Button")," component is rendered so that its root component is react-router-dom's ",(0,i.kt)("em",{parentName:"p"},"Link")," which receives its path as prop field ",(0,i.kt)("em",{parentName:"p"},"to"),"."),(0,i.kt)("p",null,"The code for the navigation bar is the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<AppBar position="static">\n  <Toolbar>\n    <Button color="inherit" component={Link} to="/">\n      home\n    </Button>\n    <Button color="inherit" component={Link} to="/notes">\n      notes\n    </Button>\n    <Button color="inherit" component={Link} to="/users">\n      users\n    </Button>   \n    {user\n      ? <em>{user} logged in</em>\n      : <Button color="inherit" component={Link} to="/login">\n          login\n        </Button>\n    }                              \n  </Toolbar>\n</AppBar>\n')),(0,i.kt)("p",null,"and it looks like we want it to:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(3999).Z,width:"1426",height:"778"})),(0,i.kt)("p",null,"The code of the application can be found from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy/misc/blob/master/notes-materialui.js"},"here"),"."),(0,i.kt)("h3",{id:"closing-thoughts"},"Closing thoughts"),(0,i.kt)("p",null,"The difference between react-bootstrap and MaterialUI is not big. It's up to you which one you find better-looking.\nI myself have not used MaterialUI a lot, but my first impressions are positive. Its documentation is a bit better than react-bootstrap's.\nAccording to ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmtrends.com/"},"https://www.npmtrends.com/")," which tracks the popularity of different npm-libraries, MaterialUI passed react-bootstrap in popularity at the end of 2018:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(7506).Z,width:"2278",height:"1178"})),(0,i.kt)("p",null,"In the  previous example, we used  UI framework with the help of React-integration libraries."),(0,i.kt)("p",null,"In addition to making the frontend code more compact and readable, another benefit of using React UI framework libraries is that they include the JavaScript that is needed to make specific components work. "),(0,i.kt)("p",null,'Some potential downsides to using UI frameworks through integration libraries instead of using them "directly" are that integration libraries may have unstable APIs and poor documentation. The situation with ',(0,i.kt)("a",{parentName:"p",href:"https://react.semantic-ui.com"},"Semantic UI React")," is a lot better than with many other UI frameworks, as it is an official React integration library."),(0,i.kt)("p",null,"There is also the question of whether or not UI framework libraries should be used in the first place. It is up to everyone to form their own opinion, but for people lacking knowledge in CSS and web design, they are very useful tools."),(0,i.kt)("h3",{id:"styled-components"},"Styled components"),(0,i.kt)("p",null,"There are also ",(0,i.kt)("a",{parentName:"p",href:"https://blog.bitsrc.io/5-ways-to-style-react-components-in-2019-30f1ccc2b5b"},"other ways")," of styling React applications that we have not yet taken a look at."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://www.styled-components.com/"},"styled components")," library offers an interesting approach for defining styles through ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates"},"tagged template literals")," that were introduced in ES6."),(0,i.kt)("p",null,"Let's make a few changes to the styles of our application with the help of styled components. First, install the package with the command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install styled-components\n")),(0,i.kt)("p",null,"Then let's define two components with styles:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import styled from 'styled-components'\n\nconst Button = styled.button`\n  background: Bisque;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid Chocolate;\n  border-radius: 3px;\n`\n\nconst Input = styled.input`\n  margin: 0.25em;\n`\n")),(0,i.kt)("p",null,"The code above creates styled versions of the ",(0,i.kt)("i",null,"button")," and ",(0,i.kt)("i",null,"input")," HTML elements and then assigns them to the ",(0,i.kt)("i",null,"Button")," and ",(0,i.kt)("i",null,"Input")," variables."),(0,i.kt)("p",null,"The syntax for defining the styles is quite interesting, as the CSS rules are defined inside of backticks."),(0,i.kt)("p",null,"The styled components that we defined work exactly like regular ",(0,i.kt)("i",null,"button")," and ",(0,i.kt)("i",null,"input")," elements, and they can be used the same way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Login = (props) => {\n  // ...\n  return (\n    <div>\n      <h2>login</h2>\n      <form onSubmit={onSubmit}>\n        <div>\n          username:\n          <Input /> // highlight-line\n        </div>\n        <div>\n          password:\n          <Input type='password' /> // highlight-line\n        </div>\n        <Button type=\"submit\" primary=''>login</Button> // highlight-line\n      </form>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"Let's create a few more components for styling that application which will be styled versions of ",(0,i.kt)("i",null,"div")," elements:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Page = styled.div`\n  padding: 1em;\n  background: papayawhip;\n`\n\nconst Navigation = styled.div`\n  background: BurlyWood;\n  padding: 1em;\n`\n\nconst Footer = styled.div`\n  background: Chocolate;\n  padding: 1em;\n  margin-top: 1em;\n`\n")),(0,i.kt)("p",null,"Let's use the components in our application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const App = () => {\n  // ...\n\n  return (\n    <Page> // highlight-line\n      <Navigation> // highlight-line\n        <Link style={padding} to="/">home</Link>\n        <Link style={padding} to="/notes">notes</Link>\n        <Link style={padding} to="/users">users</Link>\n        {user\n          ? <em>{user} logged in</em>\n          : <Link style={padding} to="/login">login</Link>\n        }\n      </Navigation> // highlight-line\n\n      <Switch>\n        <Route path="/notes/:id">\n          <Note note={note} />\n        </Route>\n        <Route path="/notes">\n          <Notes notes={notes} />\n        </Route>\n        <Route path="/users">\n          {user ? <Users /> : <Redirect to="/login" />}\n        </Route>\n        <Route path="/login">\n          <Login onLogin={login} />\n        </Route>\n        <Route path="/">\n          <Home />\n        </Route>\n      </Switch>\n      \n      <Footer> // highlight-line\n        <em>Note app,  2022</em>\n      </Footer> // highlight-line\n    </Page> // highlight-line\n  )\n}\n')),(0,i.kt)("p",null,"The appearance of the resulting application is shown below:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(7686).Z,width:"1516",height:"742"})),(0,i.kt)("p",null,"Styled components have seen a consistent growth in popularity in recent times, and quite a lot of people consider it to be the best way of defining styles in React applications."),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://fullstackopen.com"},"FullStackOpen: Part 5A, 5B, 7A-7C"))))}d.isMDXComponent=!0},3433:function(e,t,n){t.Z=n.p+"assets/images/10e-80deb910cd3f99327a6b81a88e2c4eee.png"},1272:function(e,t,n){t.Z=n.p+"assets/images/11e-9209deec7b2e58b860a09e75bbaaacba.png"},498:function(e,t,n){t.Z=n.p+"assets/images/15-fc3052cc7481d86a1b0785fb7daf7cf6.png"},3594:function(e,t,n){t.Z=n.p+"assets/images/16-8b2d9d5b1b0c28e7a04cd5f1842c4d1f.png"},6486:function(e,t,n){t.Z=n.p+"assets/images/1e-02425d1388b10f73c7c2001df1084784.png"},3792:function(e,t,n){t.Z=n.p+"assets/images/3e-16623b3c59e99d09acfc792da31319f1.png"},7686:function(e,t,n){t.Z=n.p+"assets/images/18ea-34ddfce25137dfee4d0fd83abf3465d8.png"},8784:function(e,t,n){t.Z=n.p+"assets/images/1ea-797b42e110d3625b9282c8b664f3ad0c.png"},7583:function(e,t,n){t.Z=n.p+"assets/images/2ea-47370bf2281cf0f096097eb08f3314d4.png"},7299:function(e,t,n){t.Z=n.p+"assets/images/3ea-3d58da8c86bf82e09e4cb63ae8ce0e15.png"},8489:function(e,t,n){t.Z=n.p+"assets/images/4a-4347f866465d038efa0dbd13ebb2aaca.png"},3219:function(e,t,n){t.Z=n.p+"assets/images/60ea-ac104c6b8890c704feeee8cb952174e8.png"},5644:function(e,t,n){t.Z=n.p+"assets/images/63eb-909d58e00abc5fcb63a033ef45d90d38.png"},4550:function(e,t,n){t.Z=n.p+"assets/images/64ea-6a93e3f2a3e82b017fc98dbfd2dbb289.png"},1047:function(e,t,n){t.Z=n.p+"assets/images/65ea-f2715149c998f159bbe1a939858f5b81.png"},2005:function(e,t,n){t.Z=n.p+"assets/images/66ea-748ad1454e983485bf95ea6df8f2113d.png"},3999:function(e,t,n){t.Z=n.p+"assets/images/67ea-bf0e783167ec43c7bc3c9167c7bcbaf3.png"},7506:function(e,t,n){t.Z=n.p+"assets/images/68ea-f773dd06d47aba8671b0fb3f9268681d.png"}}]);