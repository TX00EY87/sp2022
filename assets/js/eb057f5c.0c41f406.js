"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9054],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var r=a.createContext({}),d=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(r.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,h=m["".concat(r,".").concat(u)]||m[u]||p[u]||i;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var d=2;d<i;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9404:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return r},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),s=["components"],l={title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},r="Lecture",d={unversionedId:"lecture-12/lecture",id:"lecture-12/lecture",title:"Lecture",description:"Lecture Slides will be in OMA after the session.",source:"@site/docs/lecture-12/lecture.md",sourceDirName:"lecture-12",slug:"/lecture-12/lecture",permalink:"/sp2022/lecture-12/lecture",tags:[],version:"current",frontMatter:{title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},sidebar:"docs"},c={},p=[{value:"Before Lecture",id:"before-lecture",level:2},{value:"Databases",id:"databases",level:2},{value:"Introduction",id:"introduction",level:3},{value:"MongoDB",id:"mongodb",level:3},{value:"How Mongo works",id:"how-mongo-works",level:4},{value:"Setting up Mongo",id:"setting-up-mongo",level:4},{value:"Mongoose",id:"mongoose",level:3},{value:"Adding Mongoose to your application",id:"adding-mongoose-to-your-application",level:4},{value:"Adding a Mongoose connection to your application",id:"adding-a-mongoose-connection-to-your-application",level:4},{value:"Creating the Mongoose connection",id:"creating-the-mongoose-connection",level:4},{value:"Monitoring the connection with Mongoose connection events",id:"monitoring-the-connection-with-mongoose-connection-events",level:4},{value:"Using multiple databases",id:"using-multiple-databases",level:4},{value:"Why model the data?",id:"why-model-the-data",level:4},{value:"How does Mongoose work?",id:"how-does-mongoose-work",level:4},{value:"How does Mongoose model data?",id:"how-does-mongoose-model-data",level:4},{value:"The basics of setting up a schema",id:"the-basics-of-setting-up-a-schema",level:4},{value:"Compiling Mongoose schemas into models",id:"compiling-mongoose-schemas-into-models",level:4},{value:"Compiling a model from a schema",id:"compiling-a-model-from-a-schema",level:4},{value:"Using the  model",id:"using-the--model",level:4},{value:"Methods",id:"methods",level:3},{value:"connect()",id:"connect",level:4},{value:"save()",id:"save",level:4},{value:"Node.js",id:"nodejs",level:2},{value:"process.argv()",id:"processargv",level:3},{value:"Custom module",id:"custom-module",level:3},{value:"Misc",id:"misc",level:2},{value:"Percent-encoding",id:"percent-encoding",level:3},{value:"Ref",id:"ref",level:2}],m={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lecture"},"Lecture"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Lecture Slides will be in OMA after the session."))),(0,i.kt)("h2",{id:"before-lecture"},"Before Lecture"),(0,i.kt)("p",null,"Create an account at MongoDB ",(0,i.kt)("a",{parentName:"p",href:"https://www.mongodb.com/atlas/database"},"Atlas website"),"."),(0,i.kt)("h2",{id:"databases"},"Databases"),(0,i.kt)("h3",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Nearly every application has some kind of data, be it blog posts or user accounts or cat pictures. Express doesn\u2019t dictate how you store your data. You could store your application\u2019s data in memory, for example in an array. Although this is useful in simple cases, it has a number of disadvantages. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For one, if your server stops your data is gone. And "),(0,i.kt)("li",{parentName:"ul"},"if you grow to hundreds of millions of data points, you\u2019ll run out of memory. ")),(0,i.kt)("p",null,"You could try to store your application\u2019s data in files, by writing to a file or multiple files. This is how many databases work internally, after all. But that leaves you to figure out how to structure and query that data. How do you save your data? How do you efficiently get data out of those files when you need it? You might wind up building a database of your own. That\u2019s why we choose databases, a software designed for this purpose."),(0,i.kt)("h3",{id:"mongodb"},"MongoDB"),(0,i.kt)("p",null,"In general, web applications store their data in one of two kinds of databases: relational and non-relational."),(0,i.kt)("p",null,"Relational databases are a lot like spreadsheets. Their data is structured, and each entry is generally a row in a table. Each entry must fit into rigid requirements (called a schema). Most relational databases can be controlled with some derivative of SQL, the Structured Query Language like MySQL or  PostgreSQL. The terms relational databases and SQL databases are often used interchangeably."),(0,i.kt)("p",null,"Non-relational databases are often called NoSQL databases which are different from relational databases in that they\u2019re generally not structured like a spreadsheet. They\u2019re generally a bit less rigid than SQL databases. "),(0,i.kt)("p",null,"The NoSQL database we\u2019ll use is MongoDB (often shortened to Mongo), a mature project that has been around since 2007. Mongo is a popular in part because it\u2019s mature, feature filled, and reliable. It\u2019s written in C++ and is trusted by myriad users. "),(0,i.kt)("p",null,"Although Mongo isn\u2019t written in JavaScript, its native shell uses JavaScript. That means that when you open Mongo to play around in the command line, you send it commands with JavaScript.  Mongo fits well with the Express ecosystem and is relatively easy to learn compared to SQL. "),(0,i.kt)("h4",{id:"how-mongo-works"},"How Mongo works"),(0,i.kt)("p",null,"Most applications have one database, like Mongo. These databases are hosted by servers. A Mongo server can have many databases on it, but there is generally one database per application.  "),(0,i.kt)("p",null,"To access these databases, you\u2019ll run a Mongo server. Clients will talk to these servers, viewing and manipulating the database. There are client libraries for most programming languages; these libraries are called drivers and let you talk to the database in your favorite programming language. We\u2019ll be using the Node driver for Mongo."),(0,i.kt)("p",null,'Every database will have one or more collections. A blog application might have a collection for blog posts, or a social network might have a collection for user profiles. They\u2019re like arrays in that they\u2019re giant lists, but you can also query them much more easily than arrays (for example, "Get  all users in this collection older than age 18" ).'),(0,i.kt)("p",null,"One important point is that Mongo adds a unique _id property to every document. Because these IDs are unique, two documents are the same if they have the same _id property, and you can\u2019t store two documents with the same ID in the same collection. "),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"For SQL users:")," "),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Documents in Mongo correspond with rows or records in SQL. In an application with users, each user would correspond to one document in Mongo or one row in SQL. "),(0,i.kt)("li",{parentName:"ul"},"Collections in Mongo correspond to SQL\u2019s tables. Mongo\u2019s collections contain many documents, whereas SQL\u2019s tables contain many rows."),(0,i.kt)("li",{parentName:"ul"},"Databases in Mongo are very similar to databases in SQL. Generally, there\u2019s one database per application. Mongo databases can contain many collections, whereas SQL databases can contain many tables. "),(0,i.kt)("li",{parentName:"ul"},"In contrast to SQL, Mongo doesn\u2019t enforce any schema at the database layer, so it\u2019s not invalid in Mongo to have a user without a last name or an email address that\u2019s a number.")),(0,i.kt)("p",{parentName:"div"},"For a full list of translations from SQL terminology to Mongo terminology, check out the official SQL to ",(0,i.kt)("a",{parentName:"p",href:"http://docs.mongodb.org/manual/reference/sql-comparison/index.html"},"MongoDB Mapping Chart"),"."))),(0,i.kt)("h4",{id:"setting-up-mongo"},"Setting up Mongo"),(0,i.kt)("p",null,"You can install Mongo locally on your own computer. However,  we will use an online Mongo database services, namely ",(0,i.kt)("a",{parentName:"p",href:"https://www.mongodb.com/atlas/database"},"MongoDB Atlas"),"."),(0,i.kt)("h3",{id:"mongoose"},"Mongoose"),(0,i.kt)("p",null,"You could connect your application directly to MongoDB and interact using the native driver. Although the native MongoDB driver is powerful, it isn\u2019t particularly easy to work with. It also doesn\u2019t offer a built-in way of defining and maintaining data structures. "),(0,i.kt)("p",null,"The other way to talk to Mongo from Node (Express), is by using a library. We\nwill use ",(0,i.kt)("a",{parentName:"p",href:"http://mongoosejs.com/"},"Mongoose"),", an officially supported library for talking to Mongo from Node. "),(0,i.kt)("p",null,"Mongoose exposes most of the functionality of the native driver, but in a more convenient way, designed to fit into the flow of application development."),(0,i.kt)("p",null,"Where Mongoose really excels is in the way it enables you to define data structures and models, maintain them, and use them to interact with your database, all from the comfort of your application code. "),(0,i.kt)("p",null,"As part of this approach, Mongoose includes the ability to add validation to your data definitions, meaning that you don\u2019t have to write validation code in every place in your application where you send data back to the database."),(0,i.kt)("p",null,"Mongoose fits into the stack inside the Express application by being the liaison between the application and the database i.e. MongoDB talks to Mongoose; Mongoose in turn talks to Node and Express. Your app talks only to the Express application not  directly to MongoDB or Mongoose."),(0,i.kt)("h4",{id:"adding-mongoose-to-your-application"},"Adding Mongoose to your application"),(0,i.kt)("p",null,"Mongoose is available as an npm module. You can install Mongoose and add it to your list of dependencies in package.json with one command"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"npm i mongoose")),(0,i.kt)("p",null,"Here, we\u2019re using an alternative version; this version saves typing: i vs install. When that command has finished running, you\u2019ll see a new mongoose folder inside node_modules, and the dependencies section of the package.json file will be updated."),(0,i.kt)("p",null,"Now that Mongoose is installed, you\u2019re ready to get it connected."),(0,i.kt)("h4",{id:"adding-a-mongoose-connection-to-your-application"},"Adding a Mongoose connection to your application"),(0,i.kt)("p",null,"At this stage, you\u2019ll connect your application to a database. You haven\u2019t created a database yet, but that doesn\u2019t matter, because MongoDB creates a database when you first try to use it. "),(0,i.kt)("p",null,"The first step is to require Mongoose with the following command:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"const mongoose = require('mongoose');")),(0,i.kt)("h4",{id:"creating-the-mongoose-connection"},"Creating the Mongoose connection"),(0,i.kt)("p",null,"Creating a Mongoose connection can be as simple as declaring the URI for your database and passing it to Mongoose\u2019s connect method. A database URI is a string following this construct:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mongodb://username:password@database:port/databaseName")),(0,i.kt)("p",null,"The username, password, and port are optional. All you need to create a connection to MongoDB ",(0,i.kt)("a",{parentName:"p",href:"https://www.mongodb.com/atlas/database"},"Atlas website"),"  is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const url =\n  `mongodb+srv://fullstack:${password}@cluster0.1x4ks.mongodb.net/myFirstDatabase?retryWrites=true&w=majority`\nmongoose.connect(url)\n")),(0,i.kt)("h4",{id:"monitoring-the-connection-with-mongoose-connection-events"},"Monitoring the connection with Mongoose connection events"),(0,i.kt)("p",null,"Mongoose publishes events based on the status of the connection, and these events are easy to hook into so that you can see what\u2019s going on. You\u2019ll use events to see when the connection is made, when there\u2019s an error, and when the connection is disconnected. When any one of these events occurs, you\u2019ll log a message to the console. The following code snippet shows the required code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"//Monitors for a successful connection through Mongoose\nmongoose.connection.on('connected', () => {            \n  console.log(`Mongoose connected to ${dbURI}`);       \n});\n\n//Checks for a connection error                           \nmongoose.connection.on('error', err => {               \n  console.log('Mongoose connection error:', err);      \n});\n\n//Checks for a disconnection event                                       \nmongoose.connection.on('disconnected', () => {         \n  console.log('Mongoose disconnected');                \n});\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"It is possible that you don\u2019t get any disconnection messages, because the Mongoose connection doesn\u2019t automatically close when the application stops or restarts. You need to listen for changes in the Node process to deal with this situation."))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Opening and closing connections to databases can take a little bit of time, especially if your database is on a separate server or service. The best practice is to open the connection when your application starts and to leave it open until your application restarts or shuts down. "),(0,i.kt)("p",{parentName:"div"},"Closing the Mongoose connection when the application stops is as much a part of best practices as opening the connection when it starts. The connection has two ends: one in your application and one in MongoDB. MongoDB needs to know when you want to close the connection so that it doesn\u2019t keep redundant connections open."))),(0,i.kt)("h4",{id:"using-multiple-databases"},"Using multiple databases"),(0,i.kt)("p",null,"What you\u2019ve seen so far is known as the default connection and is well suited to keeping a single connection open throughout the uptime of an application. But if you want to connect to a second database, perhaps for logging or managing user sessions, you can use a named connection. In place of the mongoose.connect method, you\u2019d use a method called mongoose.createConnection and assign it to a variable. You can see this in the following code snippet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const dbURI = 'mongodb://localhost/fullStack';\nconst myDB = mongoose.createConnection(dbURI);\n")),(0,i.kt)("p",null,"This snippet creates a new Mongoose connection object called myDB. You can interact with it in the same way as you would with mongoose.connection for the default connection. Here is an examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"myDB.on('connected', () => {                           1\n  console.log(`Mongoose connected to ${dbURI}`);     1\n});\n")),(0,i.kt)("h4",{id:"why-model-the-data"},"Why model the data?"),(0,i.kt)("p",null,"MongoDB is a document store rather than a traditional table-based database using rows and columns. This fact gives MongoDB great freedom and flexibility, but sometimes you want\u2014or need\u2014structure to your data."),(0,i.kt)("p",null,"The page needs these data items for all notes, and the data record for each note must have a consistent naming structure. Without this structure, the application wouldn\u2019t be able to find the data and use it."),(0,i.kt)("p",null,"When you talk about modeling data, you\u2019re describing how you want the data to be structured. In your application, you could create and manage the definitions manually and do the heavy lifting yourself, or you could use Mongoose and let it do the hard work."),(0,i.kt)("h4",{id:"how-does-mongoose-work"},"How does Mongoose work?"),(0,i.kt)("p",null,"Mongoose was built specifically as a MongoDB Object Document Modeler (ODM) for Node applications. One key principle is that you can manage your data model from within your application. You don\u2019t have to mess around directly with databases or external frameworks or relational mappers; you can define your data model in the comfort of your application."),(0,i.kt)("p",null,"First, we\u2019ll get some naming conventions out of the way:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In MongoDB, each entry in a database is called a document."),(0,i.kt)("li",{parentName:"ul"},"In MongoDB, a group of documents is called a collection. (Think table if you\u2019re used to relational databases.)"),(0,i.kt)("li",{parentName:"ul"},"In Mongoose, the definition of a document is called a schema."),(0,i.kt)("li",{parentName:"ul"},"Each individual data entity defined in a schema is called a path."),(0,i.kt)("li",{parentName:"ul"},"One final definition is for models. A model is the compiled version of a schema. All data interactions using Mongoose go through the model.")),(0,i.kt)("h4",{id:"how-does-mongoose-model-data"},"How does Mongoose model data?"),(0,i.kt)("p",null,"If you\u2019re defining your data in the application, how are you going to do it? In JavaScript, of course\u2014JavaScript objects, to be precise. Let's take a look at a simple MongoDB document to see what the Mongoose schema for it might look like. The following code snippet shows a MongoDB document, followed by the Mongoose schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'//Example MongoDB document\n{                                                \n  "firstname" : "Pekka",                         \n  "surname" : "Hakkinen",                          \n  _id : ObjectId("52279effc62ca8b1d1000007")     \n}\n\n//Corresponding Mongoose schema                                           \n{                                                \n  firstname : String,                            \n  surname : String                               \n} \n')),(0,i.kt)("p",null,"As you can see, the schema has a strong resemblance to the data itself. The schema defines the name for each data path and the data type it will contain. In this example, you\u2019ve simply declared the paths firstname and surname as strings."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"About the _id path"),"\nYou may have noticed that you haven\u2019t declared the id path in the schema. _id is the unique identifier\u2014the primary key, if you like\u2014for each document. MongoDB automatically creates this path when each document is created and assigns it a unique ObjectId value. The value is designed to always be unique by combining the time since the UNIX epoch with machine and process identifiers and a counter."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Breaking down a schema path"),"\nThe basic construct for an individual path definition is the pathname followed by a properties object. In the previous example, you looked at a Mongoose schema, which demonstrates a kind of shorthand for defining a data path and its data type. A schema path is constructed of the pathname and the properties object, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"//schema path: shorthand\nfirstname : String\n\n//schema path                                          \nfirstname : {type: String}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Allowed schema types"),"\nThe schema type is the property that defines the data type for a given path. It\u2019s required for all paths. If the only property of a path is the type, you can use the shorthand definition. There are eight schema types that you can use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"String\u2014Any string, UTF-8 encoded."),(0,i.kt)("li",{parentName:"ul"},"Number\u2014Mongoose doesn\u2019t support long or double numbers, but it can be extended using Mongoose plugins; the default support is enough in most cases."),(0,i.kt)("li",{parentName:"ul"},"Date\u2014Typically returned from MongoDB as an ISODate object."),(0,i.kt)("li",{parentName:"ul"},"Boolean\u2014True or false."),(0,i.kt)("li",{parentName:"ul"},"Buffer\u2014For binary information such as images."),(0,i.kt)("li",{parentName:"ul"},"Mixed\u2014Any data type."),(0,i.kt)("li",{parentName:"ul"},"Array\u2014Can be an array of the same data type or an array of nested subdocuments."),(0,i.kt)("li",{parentName:"ul"},"ObjectId\u2014For a unique ID in a path other than _id; typically used to reference _id paths in other documents.")),(0,i.kt)("p",null,"If you need to use a different schema type, it\u2019s possible to write your own custom schema types or to use an existing ",(0,i.kt)("a",{parentName:"p",href:"http://plugins.mongoosejs.io"},"Mongoose plugin"),"."),(0,i.kt)("p",null,"The pathname follows JavaScript object definition conventions and requirements. There are no spaces or special characters, and you should try to avoid reserved words. Our convention is to use camelCase for pathnames. If you\u2019re using an existing database, use the names of the paths already in the documents. If you\u2019re creating a new database, the pathnames in the schema will be used in the documents, so think carefully."),(0,i.kt)("p",null,"The properties object is essentially another JavaScript object. This one defines the characteristics of the data held in the path. At a minimum, this object contains the data type, but it can include validation characteristics, boundaries, default values, and more. "),(0,i.kt)("p",null,"We\u2019ve discussed the fact that a Mongoose schema is essentially a JavaScript object, which you define from within the application. "),(0,i.kt)("h4",{id:"the-basics-of-setting-up-a-schema"},"The basics of setting up a schema"),(0,i.kt)("p",null,"Mongoose gives you a constructor function for defining new schemas, which you typically assign to a variable so that you can access it later. This function looks like the following line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const noteSchema = new mongoose.Schema({ });\n")),(0,i.kt)("p",null,"In fact, that\u2019s exactly the construct you\u2019re going to use. The empty object inside the mongoose-Schema({ }) brackets is where you\u2019ll define the schema."),(0,i.kt)("p",null,"The following code snippet shows the data for one note:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n    content: "HTML is easy",\n    date: "2022-05-30T17:30:31.098Z",\n    important: true\n},\n')),(0,i.kt)("p",null,"You can use this information to define a basic schema."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const noteSchema = new mongoose.Schema({\n  content: String,\n  date: Date,\n  important: Boolean,       \n});\n")),(0,i.kt)("h4",{id:"compiling-mongoose-schemas-into-models"},"Compiling Mongoose schemas into models"),(0,i.kt)("p",null,"An application doesn't interact with the schema directly when working with data; data interaction is done through models."),(0,i.kt)("p",null,"In Mongoose, a model is a compiled version of the schema. When it\u2019s compiled, a single instance of the model maps directly to a single document in your database. It\u2019s through this direct one-to-one relationship that the model can create, read, save, and delete data."),(0,i.kt)("h4",{id:"compiling-a-model-from-a-schema"},"Compiling a model from a schema"),(0,i.kt)("p",null,"Anything with the word compiling in it tends to sound a bit complicated. In reality, compiling a Mongoose model from a schema is a simple one-line task. You need to ensure that the schema is complete before you invoke the model command. The model command follows this construct:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"//mongoose.model(name, schema, collection)\nmongoose.model('Note', noteSchema,notes)\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The MongoDB collection name is optional. If you exclude it, Mongoose uses a lowercase pluralized version of the model name. A model name of Note, for example, would look for a collection name of notes unless you specify something different."))),(0,i.kt)("p",null,"As you\u2019re creating a database and not hooking into an existing data source, you can use a default collection name, so you don\u2019t need to include that parameter in the model command. "),(0,i.kt)("p",null,"To build a model of your note schema, you can add the following line to the code below the locationSchema definition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"mongoose.model('Note', noteSchema)\n")),(0,i.kt)("p",null,"That\u2019s all there is to it. You\u2019ve defined a data schema for the notes and compiled the schema into a model that you can use in the application. The compiled Model object provides the functionality to access, update, and remove objects in the model and subsequently in the MongoDB collection."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"What you need now is some data. You can use the MongoDB shell to create a MongoDB database and add data")),(0,i.kt)("h4",{id:"using-the--model"},"Using the  model"),(0,i.kt)("p",null,"Now that you\u2019ve defined your model, you\u2019ll want to use it! You\u2019ll want to do things like create, list and add notes. "),(0,i.kt)("p",null,"We can create a new note object with the help of the ",(0,i.kt)("strong",{parentName:"p"},"Note")," ",(0,i.kt)("a",{parentName:"p",href:"http://mongoosejs.com/docs/models.html"},"model"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const note = new Note({\n  content: 'HTML is Easy',\n  date: new Date(),\n  important: false,\n})\n")),(0,i.kt)("p",null,"This creates a new JavaScript object based on the provided parameters. Since the object is created with the model's constructor function, it has all the properties of the model, which include methods for saving the object to the database."),(0,i.kt)("p",null,"To save the object to the database, we use the appropriately named ",(0,i.kt)("em",{parentName:"p"},"save")," method, that can be provided with an event handler with the ",(0,i.kt)("em",{parentName:"p"},"then")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"note.save().then(result => {\n  console.log('note saved!')\n  mongoose.connection.close()\n})\n")),(0,i.kt)("p",null,"When the object is saved to the database, the event handler provided to ",(0,i.kt)("em",{parentName:"p"},"then"),"  gets called. The event handler closes the database connection with the command ",(0,i.kt)("inlineCode",{parentName:"p"},"mongoose.connection.close()"),". If the connection is not closed, the program will never finish its execution."),(0,i.kt)("h3",{id:"methods"},"Methods"),(0,i.kt)("h4",{id:"connect"},"connect()"),(0,i.kt)("p",null,"You can connect to MongoDB with the mongoose.connect() method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"mongoose.connect('mongodb://localhost:27017/myapp');\n\n")),(0,i.kt)("p",null,"This is the minimum needed to connect the myapp database running locally on the default port (27017). If connecting fails on your machine, try using 127.0.0.1 instead of localhost."),(0,i.kt)("h4",{id:"save"},"save()"),(0,i.kt)("p",null,"save() is a method on a ",(0,i.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/documents.html"},"Mongoose document"),". The save() method is asynchronous, and returns a promise that you can await on."),(0,i.kt)("p",null,"When you create an instance of a ",(0,i.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/models.html"},"Mongoose model")," using new, calling save() makes Mongoose insert a new document. If you load an existing document from the database and modify it, save() updates the existing document instead."),(0,i.kt)("p",null,"You can set ",(0,i.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/mongoose.html#mongoose_Mongoose-set"},"Mongoose's debug mode")," to see the operations Mongoose sends to MongoDB."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"mongoose.set('debug', true);\n")),(0,i.kt)("h2",{id:"nodejs"},"Node.js"),(0,i.kt)("h3",{id:"processargv"},"process.argv()"),(0,i.kt)("p",null,"Create a file ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js"),".. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'console.log("Arg length: ", process.argv.length)\nconsole.log("First arg: ", process.argv[0])\nconsole.log("Second arg: ", process.argv[1])\n//console.log(process.argv)\n')),(0,i.kt)("h3",{id:"custom-module"},"Custom module"),(0,i.kt)("p",null,"Let\u2019s say you want a function that returns a random integer between 0 and 100. Without any module magic, that function might look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const MAX = 100;\n\nfunction randomInteger() {\n  return Math.floor(Math.random() * MAX);\n}\n")),(0,i.kt)("p",null,"This might be how you\u2019d write that function in a browser context. But in Node, you can\u2019t save this into a file and call it a day; you need to choose a variable to export, so that when other files require this one, they know what to grab. In this case, you\u2019ll be exporting randomInteger. Try saving this into a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"random-integer.js"),", as shown:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const MAX = 100;\n\nfunction randomInteger() {\n  return Math.floor(Math.random() * MAX);\n}\n\nmodule.exports = randomInteger;\n")),(0,i.kt)("p",null,"In this case, the variable you\u2019re exporting is a function. In this module, MAX is not exported, so that variable won\u2019t be available to anyone who requires this file. Nobody will be able to require it\u2014it\u2019ll stay private to the module."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"module.exports can be anything you want. Anything to which you can assign a variable can be assigned to module.exports. It\u2019s a function in this example, but it\u2019s often an object. It could even be a string or a number or an array if you\u2019d like."))),(0,i.kt)("p",null,"Now, let\u2019s say you want to use your new module. In the same directory as random-integer.js, save a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js"),", as shown"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const randomInteger= require("./random-integers")\n\nconsole.log(randomInteger())\nconsole.log(randomInteger())\nconsole.log(randomInteger())\n')),(0,i.kt)("p",null,"require is similar to keywords like import or include in other languages. require takes the name of a package as a string argument and returns a package. There\u2019s nothing special about the object that\u2019s returned\u2014it\u2019s often an object, but it could be a function or a string or a number. "),(0,i.kt)("h2",{id:"misc"},"Misc"),(0,i.kt)("h3",{id:"percent-encoding"},"Percent-encoding"),(0,i.kt)("p",null,"Percent-encoding is a mechanism to encode 8-bit characters that have specific meaning in the context of URLs. It is sometimes called URL encoding. The encoding consists of substitution a '%' followed by the hexadecimal representation of the ASCII value of the replace character."),(0,i.kt)("p",null,"Special characters needing encoding are: ",(0,i.kt)("inlineCode",{parentName:"p"},"':'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'/'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'?'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'#'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'['"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"']'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'@'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'!'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'$'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'&'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"\'"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'('"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"')'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'*'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'+'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"','"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"';'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'='"),", as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"'%'")," itself. Other characters don't need to be encoded, though they could."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Character"),(0,i.kt)("th",{parentName:"tr",align:null},"Encoding"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"':'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%3A"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'/'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%2F"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'?'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%3F"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'#'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%23"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'['")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%5B"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"']'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%5D"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'@'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%40"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'!'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%21"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'$'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%24"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'&'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%26"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"\'"')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%27"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'('")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%28"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"')'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%29"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'*'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%2A"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'+'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%2B"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"','")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%2C"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"';'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%3B"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'='")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%3D"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"'%'")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%25"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"' '")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"%20")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"+"))))),(0,i.kt)("p",null,"Depending on the context, the character ",(0,i.kt)("inlineCode",{parentName:"p"},"' '")," is translated to a ",(0,i.kt)("inlineCode",{parentName:"p"},"'+'")," (like in the percent-encoding version used in an ",(0,i.kt)("inlineCode",{parentName:"p"},"application/x-www-form-urlencoded")," message), or in ",(0,i.kt)("inlineCode",{parentName:"p"},"'%20'")," like on URLs."),(0,i.kt)("h2",{id:"ref"},"Ref"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Express in Action Evan Hahn, Evan M. Hahn"),(0,i.kt)("li",{parentName:"ul"},"Getting MEAN with Mongo, Express, Node"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.freecodecamp.org/learn/back-end-development-and-apis/#basic-node-and-express"},"freecodecamp.org")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding"},"developer.mozilla.org")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"},"JSON.stringify")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mongoosejs.com/docs/connections.html"},"mongoose.connect()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mongoosejs.com/docs/promises.html"},"Built-in Promises")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mongoosejs.com/docs/api/model.html#model_Model-save"},"Model")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://masteringjs.io/tutorials/mongoose/save"},"Mongoose's save()"))))}u.isMDXComponent=!0}}]);