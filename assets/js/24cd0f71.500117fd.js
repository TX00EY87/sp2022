"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6736],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7526:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},s="Lecture",u={unversionedId:"lecture-07/lecture",id:"lecture-07/lecture",title:"Lecture",description:"Lecture Slides will be in OMA after the session.",source:"@site/docs/lecture-07/lecture.md",sourceDirName:"lecture-07",slug:"/lecture-07/lecture",permalink:"/sp2022/lecture-07/lecture",tags:[],version:"current",frontMatter:{title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},sidebar:"docs"},p={},c=[{value:"JavaScript",id:"javascript",level:2},{value:"Array Destructuring",id:"array-destructuring",level:3},{value:"Object Destructuring",id:"object-destructuring",level:3},{value:"Spread in array literals",id:"spread-in-array-literals",level:3},{value:"Spread in object literals",id:"spread-in-object-literals",level:3},{value:"React",id:"react",level:2},{value:"What&#39;s a Hook?",id:"whats-a-hook",level:3},{value:"When would I use a Hook?",id:"when-would-i-use-a-hook",level:3},{value:"Example",id:"example",level:3},{value:"Array destructuring",id:"array-destructuring-1",level:3},{value:"Using Multiple State Variables",id:"using-multiple-state-variables",level:3},{value:"Handling Events",id:"handling-events",level:3},{value:"Ref",id:"ref",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"lecture"},"Lecture"),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Lecture Slides will be in OMA after the session."))),(0,l.kt)("h2",{id:"javascript"},"JavaScript"),(0,l.kt)("h3",{id:"array-destructuring"},"Array Destructuring"),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"destructuring assignment")," syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 1: Basic variable assignment")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const foo = ['one', 'two', 'three'];\n\nconst [red, yellow, green] = foo;\nconsole.log(red); // \"one\"\nconsole.log(yellow); // \"two\"\nconsole.log(green); // \"three\"\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 2")),(0,l.kt)("p",null,"In an array destructuring from an array of length ",(0,l.kt)("em",{parentName:"p"},"N")," specified on the right-hand side of the assignment, if the number of variables specified on the left-hand side of the assignment is greater than ",(0,l.kt)("em",{parentName:"p"},"N"),", only the first ",(0,l.kt)("em",{parentName:"p"},"N")," variables are assigned values. The values of the remaining variables will be undefined."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const foo = ['one', 'two'];\n\nconst [red, yellow, green, blue] = foo;\nconsole.log(red); // \"one\"\nconsole.log(yellow); // \"two\"\nconsole.log(green); // undefined\nconsole.log(blue);  //undefined\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 3: Default values")),(0,l.kt)("p",null,"A variable can be assigned a default, in the case that the value unpacked from the array is ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let a, b;\n\n[a=5, b=7] = [1];\nconsole.log(a); // 1\nconsole.log(b); // 7\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 4:")),(0,l.kt)("p",null,"Swapping variables"),(0,l.kt)("p",null,"Two variables values can be swapped in one destructuring expression."),(0,l.kt)("p",null,"Without destructuring assignment, swapping two values requires a temporary variable (or, in some low-level languages, the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/XOR_swap_algorithm"},"XOR-swap trick"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let a = 1;\nlet b = 3;\n\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n\nconst arr = [1,2,3];\n[arr[2], arr[1]] = [arr[1], arr[2]];\nconsole.log(arr); // [1,3,2]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 5: Parsing an array returned from a function")),(0,l.kt)("p",null,"It's always been possible to return an array from a function. Destructuring can make working with an array return value more concise."),(0,l.kt)("p",null,"In this example, ",(0,l.kt)("inlineCode",{parentName:"p"},"f()")," returns the values ",(0,l.kt)("inlineCode",{parentName:"p"},"[1, 2]")," as its output, which can be parsed in a single line with destructuring."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function f() {\n  return [1, 2];\n}\n\nlet a, b;\n[a, b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 2\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 6: Ignoring some returned values")),(0,l.kt)("p",null,"You can ignore return values that you're not interested in:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function f() {\n  return [1, 2, 3];\n}\n\nconst [a, , b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 3\n\nconst [c] = f();\nconsole.log(c); // 1\n")),(0,l.kt)("h3",{id:"object-destructuring"},"Object Destructuring"),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"destructuring assignment")," syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 1: Basic assignment")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const user = {\n    id: 42,\n    isVerified: true\n};\n\nconst {id, isVerified} = user;\n\nconsole.log(id); // 42\nconsole.log(isVerified); // true\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 2: Assigning to new variable names")),(0,l.kt)("p",null,"A property can be unpacked from an object and assigned to a variable with a different name than the object property."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const o = {p: 42, q: true};\nconst {p: foo, q: bar} = o;\n\nconsole.log(foo); // 42\nconsole.log(bar); // true\n")),(0,l.kt)("p",null,"Here, for example, ",(0,l.kt)("inlineCode",{parentName:"p"},"const {p: foo} = o")," takes from the object ",(0,l.kt)("inlineCode",{parentName:"p"},"o")," the property named ",(0,l.kt)("inlineCode",{parentName:"p"},"p")," and assigns it to a local variable named ",(0,l.kt)("inlineCode",{parentName:"p"},"foo"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 3: Default values")),(0,l.kt)("p",null,"A variable can be assigned a default, in the case that the value unpacked from the object is ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const {a = 10, b = 5} = {a: 3};\n\nconsole.log(a); // 3\nconsole.log(b); // 5\n")),(0,l.kt)("h3",{id:"spread-in-array-literals"},"Spread in array literals"),(0,l.kt)("p",null,"Spread syntax can be used when all elements from an object or array need to be included in a list of some kind. "),(0,l.kt)("p",null,"It is commonly used when you want to add a new item to a local data store, or display\nall stored items plus a new addition. A very simple version of this kind of action\ncould look like so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let numberStore = [0, 1, 2];\nlet newNumber = 12;\nnumberStore = [...numberStore, newNumber];\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 1: in function calls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function myFunction(x, y, z) { }\nlet args = [0, 1, 2];\nmyFunction(...args);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 2: create a new array using an existing array as one part of it")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let parts = ['shoulders', 'knees'];\nlet lyrics = ['head', ...parts, 'and', 'toes'];\n//  [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 3: Copy an array")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let arr = [1, 2, 3];\nconsole.log(arr)\nconsole.log(...arr)\n\nlet arr2 = [...arr]; // like arr.slice()\narr2.push(4);\nconsole.log(arr)\nconsole.log(arr2)\n//  arr2 becomes [1, 2, 3, 4]\n//  arr remains unaffected\n")),(0,l.kt)("h3",{id:"spread-in-object-literals"},"Spread in object literals"),(0,l.kt)("p",null,"The copies own enumerable properties from a provided object onto a new object."),(0,l.kt)("p",null,"Shallow-cloning or merging of objects is now possible using a shorter syntax than ",(0,l.kt)("inlineCode",{parentName:"p"},"Object.assign()"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let obj1 = { foo: 'bar', x: 42 };\nlet obj2 = { foo: 'baz', y: 13 };\n\nlet clonedObj = { ...obj1 };\n// Object { foo: \"bar\", x: 42 }\n\nlet mergedObj = { ...obj1, ...obj2 };\n// Object { foo: \"baz\", x: 42, y: 13 }\n\n//console.log(...obj1)//Uncaught TypeError: obj1 is not iterable\n")),(0,l.kt)("h2",{id:"react"},"React"),(0,l.kt)("h3",{id:"whats-a-hook"},"What's a Hook?"),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},'A Hook is a special function that lets you "hook into" React features. For example, ',(0,l.kt)("inlineCode",{parentName:"p"},"useState")," is a Hook that lets you add React state to function components. We'll learn other Hooks later."))),(0,l.kt)("h3",{id:"when-would-i-use-a-hook"},"When would I use a Hook?"),(0,l.kt)("p",null,"If you write a function component and realize you need to add some state to it, previously you had to convert it to a class. Now you can use a Hook inside the existing function component. "),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("blockquote",{parentName:"div"},(0,l.kt)("p",{parentName:"blockquote"},"There are some special rules about where you can and can't use Hooks within a component. you can learn more about them in ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-rules.html"},"Rules of Hooks"),".")))),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"We\u2019ll start with the code below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js{4,5}"},"import React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"What does calling ",(0,l.kt)("inlineCode",{parentName:"strong"},"useState")," do?"),' It declares a "state variable". Our variable is called ',(0,l.kt)("inlineCode",{parentName:"p"},"count")," but we could call it anything else, like ",(0,l.kt)("inlineCode",{parentName:"p"},"banana"),'. This is a way to "preserve" some values between the function calls \u2014 ',(0,l.kt)("inlineCode",{parentName:"p"},"useState")," is a new way to use the exact same capabilities that ",(0,l.kt)("inlineCode",{parentName:"p"},"this.state"),' provides in a class. Normally, variables "disappear" when the function exits but state variables are preserved by React.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"What do we pass to ",(0,l.kt)("inlineCode",{parentName:"strong"},"useState")," as an argument?")," The only argument to the ",(0,l.kt)("inlineCode",{parentName:"p"},"useState()")," Hook is the initial state. Unlike with classes, the state doesn't have to be an object. We can keep a number or a string if that's all we need. In our example, we just want a number for how many times the user clicked, so pass ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," as initial state for our variable. (If we wanted to store two different values in state, we would call ",(0,l.kt)("inlineCode",{parentName:"p"},"useState()")," twice.)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"What does ",(0,l.kt)("inlineCode",{parentName:"strong"},"useState")," return?")," It returns a pair of values: the current state and a function that updates it. This is why we write ",(0,l.kt)("inlineCode",{parentName:"p"},"const [count, setCount] = useState()"),". "),(0,l.kt)("p",null,"Now that we know what the ",(0,l.kt)("inlineCode",{parentName:"p"},"useState")," Hook does, our example should make more sense:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js{4,5}"},"import React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n")),(0,l.kt)("p",null,"We declare a state variable called ",(0,l.kt)("inlineCode",{parentName:"p"},"count"),", and set it to ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),". React will remember its current value between re-renders, and provide the most recent one to our function. If we want to update the current ",(0,l.kt)("inlineCode",{parentName:"p"},"count"),", we can call ",(0,l.kt)("inlineCode",{parentName:"p"},"setCount"),"."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("blockquote",{parentName:"div"},(0,l.kt)("p",{parentName:"blockquote"},"You might be wondering: why is ",(0,l.kt)("inlineCode",{parentName:"p"},"useState")," not named ",(0,l.kt)("inlineCode",{parentName:"p"},"createState")," instead?"),(0,l.kt)("p",{parentName:"blockquote"},'"Create" wouldn\'t be quite accurate because the state is only created the first time our component renders. During the next renders, ',(0,l.kt)("inlineCode",{parentName:"p"},"useState")," gives us the current state. Otherwise it wouldn't be \"state\" at all! There's also a reason why Hook names ",(0,l.kt)("em",{parentName:"p"},"always")," start with ",(0,l.kt)("inlineCode",{parentName:"p"},"use"),". ")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Reading State"),": To display the current count, we can use ",(0,l.kt)("inlineCode",{parentName:"p"},"count")," directly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  <p>You clicked {count} times</p>\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Updating State"),": To update the ",(0,l.kt)("inlineCode",{parentName:"p"},"count")," state, we  have ",(0,l.kt)("inlineCode",{parentName:"p"},"setCount")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"count")," as variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js{1}"},"  <button onClick={() => setCount(count + 1)}>\n    Click me\n  </button>\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Recap"),": Let's check our understanding."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js{1,4,9}"}," 1:  import React, { useState } from 'react';\n 2:\n 3:  function Example() {\n 4:    const [count, setCount] = useState(0);\n 5:\n 6:    return (\n 7:      <div>\n 8:        <p>You clicked {count} times</p>\n 9:        <button onClick={() => setCount(count + 1)}>\n10:         Click me\n11:        </button>\n12:      </div>\n13:    );\n14:  }\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Line 1:")," We import the ",(0,l.kt)("inlineCode",{parentName:"li"},"useState")," Hook from React. It lets us keep local state in a function component."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Line 4:")," Inside the ",(0,l.kt)("inlineCode",{parentName:"li"},"Example")," component, we declare a new state variable by calling the ",(0,l.kt)("inlineCode",{parentName:"li"},"useState")," Hook. It returns a pair of values, to which we give names. We're calling our variable ",(0,l.kt)("inlineCode",{parentName:"li"},"count")," because it holds the number of button clicks. We initialize it to zero by passing ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," as the only ",(0,l.kt)("inlineCode",{parentName:"li"},"useState")," argument. The second returned item is itself a function. It lets us update the ",(0,l.kt)("inlineCode",{parentName:"li"},"count")," so we'll name it ",(0,l.kt)("inlineCode",{parentName:"li"},"setCount"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Line 9:")," When the user clicks, we call ",(0,l.kt)("inlineCode",{parentName:"li"},"setCount")," with a new value. React will then re-render the ",(0,l.kt)("inlineCode",{parentName:"li"},"Example")," component, passing the new ",(0,l.kt)("inlineCode",{parentName:"li"},"count")," value to it.")),(0,l.kt)("p",null,"This might seem like a lot to take in at first. Don't rush it! If you're lost in the explanation, look at the code above again and try to read it from top to bottom. We promise that once you try to \"forget\" how state works in classes, and look at this code with fresh eyes, it will make sense."),(0,l.kt)("h3",{id:"array-destructuring-1"},"Array destructuring"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"What Do Square Brackets Mean?")," You might have noticed the square brackets when we declare a state variable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  const [count, setCount] = useState(0);\n")),(0,l.kt)("p",null,"The names on the left aren't a part of the React API. You can name your own state variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  const [fruit, setFruit] = useState('banana');\n")),(0,l.kt)("p",null,"This JavaScript syntax is called ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring"},'"array destructuring"'),". It means that we're making two new variables ",(0,l.kt)("inlineCode",{parentName:"p"},"fruit")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"setFruit"),", where ",(0,l.kt)("inlineCode",{parentName:"p"},"fruit")," is set to the first value returned by ",(0,l.kt)("inlineCode",{parentName:"p"},"useState"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"setFruit")," is the second. It is equivalent to this code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  var fruitStateVariable = useState('banana'); // Returns a pair\n  var fruit = fruitStateVariable[0]; // First item in a pair\n  var setFruit = fruitStateVariable[1]; // Second item in a pair\n")),(0,l.kt)("p",null,"When we declare a state variable with ",(0,l.kt)("inlineCode",{parentName:"p"},"useState"),", it returns a pair \u2014 an array with two items. The first item is the current value, and the second is a function that lets us update it. Using ",(0,l.kt)("inlineCode",{parentName:"p"},"[0]")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"[1]")," to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead."),(0,l.kt)("h3",{id:"using-multiple-state-variables"},"Using Multiple State Variables"),(0,l.kt)("p",null,"Declaring state variables as a pair of ",(0,l.kt)("inlineCode",{parentName:"p"},"[something, setSomething]")," is also handy because it lets us give ",(0,l.kt)("em",{parentName:"p"},"different")," names to different state variables if we want to use more than one:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function ExampleWithManyStates() {\n  // Declare multiple state variables!\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n")),(0,l.kt)("p",null,"In the above component, we have ",(0,l.kt)("inlineCode",{parentName:"p"},"age"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fruit"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"todos")," as local variables, and we can update them individually:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  function handleOrangeClick() {\n    setFruit('orange');\n  }\n")),(0,l.kt)("p",null,"You ",(0,l.kt)("strong",{parentName:"p"},"don't have to")," use many state variables. State variables can hold objects and arrays just fine, so you can still group related data together. However, updating a state variable always ",(0,l.kt)("em",{parentName:"p"},"replaces")," it instead of merging it."),(0,l.kt)("h3",{id:"handling-events"},"Handling Events"),(0,l.kt)("p",null,"Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"React events are named using camelCase, rather than lowercase."),(0,l.kt)("li",{parentName:"ul"},"With JSX you pass a function as the event handler, rather than a string.")),(0,l.kt)("p",null,"For example, the HTML:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<button onclick="activateLasers()">\n  Activate Lasers\n</button>\n')),(0,l.kt)("p",null,"is slightly different in React:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js{1}"},"<button onClick={activateLasers}>\n  Activate Lasers\n</button>\n")),(0,l.kt)("p",null,"Another difference is that you cannot return ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," to prevent default behavior in React. You must call ",(0,l.kt)("inlineCode",{parentName:"p"},"preventDefault")," explicitly. For example, with plain HTML, to prevent the default form behavior of submitting, you can write:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<form onsubmit="console.log(\'You clicked submit.\'); return false">\n  <button type="submit">Submit</button>\n</form>\n')),(0,l.kt)("p",null,"In React, this could instead be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js{3}"},"function Form() {\n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log('You clicked submit.');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n")),(0,l.kt)("p",null,"Here, ",(0,l.kt)("inlineCode",{parentName:"p"},"e")," is a synthetic event. React defines these synthetic events according to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/DOM-Level-3-Events/"},"W3C spec"),", so you don't need to worry about cross-browser compatibility. React events do not work exactly the same as native events. "),(0,l.kt)("p",null,"When using React, you generally don't need to call ",(0,l.kt)("inlineCode",{parentName:"p"},"addEventListener")," to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered."),(0,l.kt)("h2",{id:"ref"},"Ref"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},"Destructuring_assignment")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"},"Spread_syntax")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"},"concat")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push"},"push"))))}m.isMDXComponent=!0}}]);