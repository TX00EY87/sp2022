"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4509],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),h=p(n),d=a,m=h["".concat(i,".").concat(d)]||h[d]||u[d]||l;return n?o.createElement(m,s(s({ref:t},c),{},{components:n})):o.createElement(m,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=h;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:a,s[1]=r;for(var p=2;p<l;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5442:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return u}});var o=n(7462),a=n(3366),l=(n(7294),n(3905)),s=["components"],r={title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},i="After Lecture",p={unversionedId:"lecture-08/post-lecture",id:"lecture-08/post-lecture",title:"Post Lecture Reading",description:"Recommended videos",source:"@site/docs/lecture-08/post-lecture.md",sourceDirName:"lecture-08",slug:"/lecture-08/post-lecture",permalink:"/sp2022/lecture-08/post-lecture",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},sidebar:"docs"},c={},u=[{value:"Recommended videos",id:"recommended-videos",level:2},{value:"Rendering a collection, modules",id:"rendering-a-collection-modules",level:2},{value:"console.log",id:"consolelog",level:3},{value:"Protip: Visual Studio Code snippets",id:"protip-visual-studio-code-snippets",level:3},{value:"JavaScript Arrays",id:"javascript-arrays",level:3},{value:"Event Handlers Revisited",id:"event-handlers-revisited",level:3},{value:"Rendering Collections",id:"rendering-collections",level:3},{value:"Key-attribute",id:"key-attribute",level:3},{value:"Map",id:"map",level:3},{value:"Anti-pattern: Array Indexes as Keys",id:"anti-pattern-array-indexes-as-keys",level:3},{value:"Refactoring Modules",id:"refactoring-modules",level:3},{value:"When the Application Breaks",id:"when-the-application-breaks",level:3},{value:"Forms",id:"forms",level:2},{value:"Controlled component",id:"controlled-component",level:3},{value:"Filtering Displayed Elements",id:"filtering-displayed-elements",level:3},{value:"Adding styles to React app",id:"css",level:2},{value:"Improved error message",id:"improved-error-message",level:3},{value:"Inline styles",id:"inline-styles",level:3},{value:"Reference",id:"reference",level:2}],h={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,o.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"after-lecture"},"After Lecture"),(0,l.kt)("h2",{id:"recommended-videos"},"Recommended videos"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.youtube.com/playlist?list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG"},"React Tutorial - Videos 10 to 13 (~55min)")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"}," ",(0,l.kt)("strong",{parentName:"p"},"Credits"),": The post lecture material has been written by ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mluukkai"},"Matti Luukkainen")," from ",(0,l.kt)("a",{parentName:"p",href:"https://fullstackopen.com/en/"},"University of Helsinki"),". The material is licensed under the Creative Commons BY-NC-SA 3.0 License."))),(0,l.kt)("h2",{id:"rendering-a-collection-modules"},"Rendering a collection, modules"),(0,l.kt)("p",null,"Let's continue our introduction to React. First, we will take a look at how to render a data collection, like a list of names, to the screen. After this, we will inspect how a user can submit data to a React application using HTML forms. "),(0,l.kt)("h3",{id:"consolelog"},"console.log"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"What's the difference between an experienced JavaScript programmer and a rookie? The experienced one uses console.log 10-100 times more."))),(0,l.kt)("p",null,"Paradoxically, this seems to be true even though a rookie programmer would need ",(0,l.kt)("i",null,"console.log")," (or any debugging method) more than an experienced one."),(0,l.kt)("p",null,"When something does not work, don't just guess what's wrong. Instead, log or use some other way of debugging. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NB")," As explained in part 1, when you use the command ",(0,l.kt)("em",{parentName:"p"},"console.log")," for debugging, don't concatenate things 'the Java way' with a plus. Instead of writing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log('props value is' + props)\n")),(0,l.kt)("p",null,"separate the things to be printed with a comma:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log('props value is', props)\n")),(0,l.kt)("p",null,"If you concatenate an object with a string and log it to the console (like in our first example), the result will be pretty useless: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"props value is [Object object]\n")),(0,l.kt)("p",null,"On the contrary, when you pass objects as distinct arguments separated by commas to ",(0,l.kt)("em",{parentName:"p"},"console.log"),", like in our second example above, the content of the object is printed to the developer console as strings that are insightful."),(0,l.kt)("h3",{id:"protip-visual-studio-code-snippets"},"Protip: Visual Studio Code snippets"),(0,l.kt)("p",null,"With Visual Studio Code it's easy to create 'snippets', i.e. shortcuts for quickly generating commonly re-used portions of code, much like how 'sout' works in Netbeans."),(0,l.kt)("p",null,"Instructions for creating snippets can be found ",(0,l.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/userdefinedsnippets#_creating-your-own-snippets"},"here"),"."),(0,l.kt)("p",null,"Useful, ready-made snippets can also be found as VS Code plugins, in the ",(0,l.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=xabikos.ReactSnippets"},"marketplace"),"."),(0,l.kt)("p",null,"The most important snippet is the one for the ",(0,l.kt)("em",null,"console.log()")," command, for example ",(0,l.kt)("em",null,"clog"),". This can be created like so: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "console.log": {\n    "prefix": "clog",\n    "body": [\n      "console.log(\'$1\')",\n    ],\n    "description": "Log output to console"\n  }\n}\n')),(0,l.kt)("p",null,"Debugging your code using ",(0,l.kt)("em",{parentName:"p"},"console.log()")," is so common that Visual Studio Code has that snippet built in. To use it, type ",(0,l.kt)("em",{parentName:"p"},"log")," and hit tab to autocomplete. More fully featured ",(0,l.kt)("em",{parentName:"p"},"console.log()")," snippet extensions can be found in the ",(0,l.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/search?term=console.log&target=VSCode&category=All%20categories&sortBy=Relevance"},"marketplace"),"."),(0,l.kt)("h3",{id:"javascript-arrays"},"JavaScript Arrays"),(0,l.kt)("p",null,"From here on out, we will be using the functional programming methods of the JavaScript ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"},"array"),", such as  ",(0,l.kt)("em",{parentName:"p"},"find"),", ",(0,l.kt)("em",{parentName:"p"},"filter"),", and ",(0,l.kt)("em",{parentName:"p"},"map")," - all of the time. They operate on the same general principles as streams do in Java 8, which have been used during the last few years in both the 'Ohjelmoinnin perusteet' and 'Ohjelmoinnin jatkokurssi' courses at the university's department of Computer Science, and also in the programming MOOC. "),(0,l.kt)("p",null,"If functional programming with arrays feels foreign to you, it is worth watching at least the first three parts of the YouTube video series ",(0,l.kt)("a",{parentName:"p",href:"https://www.youtube.com/playlist?list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84"},"Functional Programming in JavaScript"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=BMUiFMZr7vk&list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84"},"Higher-order functions")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=bCqtb-Z5YGQ&list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&index=2"},"Map")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=Wl98eZpkp-c&t=31s"},"Reduce basics"))),(0,l.kt)("h3",{id:"event-handlers-revisited"},"Event Handlers Revisited"),(0,l.kt)("p",null,"Passing event handlers to the child components of the ",(0,l.kt)("i",null,"App")," component has raised some questions. "),(0,l.kt)("h3",{id:"rendering-collections"},"Rendering Collections"),(0,l.kt)("p",null,"We will now do the 'frontend', or the browser-side application logic, in React."),(0,l.kt)("p",null,"Let's start with the following (the file ",(0,l.kt)("i",null,"App.js"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => {\n  const { notes } = props\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        <li>{notes[0].content}</li>\n        <li>{notes[1].content}</li>\n        <li>{notes[2].content}</li>\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n")),(0,l.kt)("p",null,"The file ",(0,l.kt)("i",null,"index.js")," looks like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\nimport App from './App'\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n)\n")),(0,l.kt)("p",null,"Every note contains its textual content and a timestamp as well as a ",(0,l.kt)("em",{parentName:"p"},"boolean")," value for marking whether the note has been categorized as important or not, and also a unique ",(0,l.kt)("i",null,"id"),"."),(0,l.kt)("p",null,"The example above works due to the fact that there are exactly three notes in the array. "),(0,l.kt)("p",null,"A single note is rendered by accessing the objects in the array by referring to a hard-coded index number:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"<li>{notes[1].content}</li>\n")),(0,l.kt)("p",null,"This is, of course, not practical. We can improve on this by generating React elements from the array objects using the ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"},"map")," function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"notes.map(note => <li>{note.content}</li>)\n")),(0,l.kt)("p",null,"The result is an array of ",(0,l.kt)("i",null,"li")," elements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"[\n  <li>HTML is easy</li>,\n  <li>Browser can execute only JavaScript</li>,\n  <li>GET and POST are the most important methods of HTTP protocol</li>,\n]\n")),(0,l.kt)("p",null,"Which can then be placed inside ",(0,l.kt)("i",null,"ul")," tags:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => {\n  const { notes } = props\n\n  return (\n    <div>\n      <h1>Notes</h1>\n// highlight-start\n      <ul>\n        {notes.map(note => <li>{note.content}</li>)}\n      </ul>\n// highlight-end      \n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"Because the code generating the ",(0,l.kt)("i",null,"li")," tags is JavaScript, it must be wrapped in curly braces in a JSX template just like all other JavaScript code. "),(0,l.kt)("p",null,"We will also make the code more readable by separating the arrow function's declaration across multiple lines:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => {\n  const { notes } = props\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map(note => \n        // highlight-start\n          <li>\n            {note.content}\n          </li>\n        // highlight-end   \n        )}\n      </ul>\n    </div>\n  )\n}\n")),(0,l.kt)("h3",{id:"key-attribute"},"Key-attribute"),(0,l.kt)("p",null,"Even though the application seems to be working, there is a nasty warning in the console: "),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",src:n(5578).Z,width:"1810",height:"252"})),(0,l.kt)("p",null,"As the linked ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/lists-and-keys.html#keys"},"React page")," in the error message suggests; the list items, i.e. the elements generated by the ",(0,l.kt)("em",{parentName:"p"},"map")," method, must each have a unique key value:  an attribute called ",(0,l.kt)("i",null,"key"),"."),(0,l.kt)("p",null,"Let's add the keys:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => {\n  const { notes } = props\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map(note => \n          <li key={note.id}> // highlight-line\n            {note.content}\n          </li>\n        )}\n      </ul>\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"And the error message disappears. "),(0,l.kt)("p",null,"React uses the key attributes of objects in an array to determine how to update the view generated by a component when the component is re-rendered. More about this in the ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/reconciliation.html#recursing-on-children"},"React documentation"),"."),(0,l.kt)("h3",{id:"map"},"Map"),(0,l.kt)("p",null,"Understanding how the array method, ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"},"map")," works is crucial for the rest of the course. "),(0,l.kt)("p",null,"The application contains an array called ",(0,l.kt)("em",{parentName:"p"},"notes"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n")),(0,l.kt)("p",null,"Let's pause for a moment and examine how ",(0,l.kt)("em",{parentName:"p"},"map")," works."),(0,l.kt)("p",null,"If the following code is added to, let's say, the end of the file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const result = notes.map(note => note.id)\nconsole.log(result)\n")),(0,l.kt)("i",null,"[1, 2, 3]"),"  will be printed to the console. _map_ always creates a new array, the elements of which have been created from the elements of the original array by ",(0,l.kt)("i",null,"mapping"),": using the function given as a parameter to the _map_ method.",(0,l.kt)("p",null,"The function is"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"note => note.id\n")),(0,l.kt)("p",null,"Which is an arrow function written in compact form. The full form would be: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"(note) => {\n  return note.id\n}\n")),(0,l.kt)("p",null,"The function gets a note object as a parameter, and ",(0,l.kt)("i",null,"returns")," the value of its ",(0,l.kt)("i",null,"id")," field."),(0,l.kt)("p",null,"Changing the command to:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const result = notes.map(note => note.content)\n")),(0,l.kt)("p",null,"results in an array containing the contents of the notes."),(0,l.kt)("p",null,"This is already pretty close to the React code we used:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"notes.map(note =>\n  <li key={note.id}>{note.content}</li>\n)\n")),(0,l.kt)("p",null,"which generates an ",(0,l.kt)("i",null,"li")," tag containing the contents of the note from each note object. "),(0,l.kt)("p",null,"Because the function parameter passed to the ",(0,l.kt)("em",{parentName:"p"},"map")," method - "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"note => <li key={note.id}>{note.content}</li>\n")),(0,l.kt)("p",null,"\xa0","- is used to create view elements, the value of the variable must be rendered inside of curly braces. Try to see what happens if the braces are removed. "),(0,l.kt)("p",null,"The use of curly braces will cause some pain in the beginning, but you will get used to them soon enough. The visual feedback from React is immediate."),(0,l.kt)("h3",{id:"anti-pattern-array-indexes-as-keys"},"Anti-pattern: Array Indexes as Keys"),(0,l.kt)("p",null,"We could have made the error message on our console disappear by using the array indexes as keys. The indexes can be retrieved by passing a second parameter to the callback function of the ",(0,l.kt)("em",{parentName:"p"},"map")," method: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"notes.map((note, i) => ...)\n")),(0,l.kt)("p",null,"When called like this, ",(0,l.kt)("em",{parentName:"p"},"i")," is assigned the value of the index of the position in the array where the note resides."),(0,l.kt)("p",null,"As such, one way to define the row generation without getting errors is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"<ul>\n  {notes.map((note, i) => \n    <li key={i}>\n      {note.content}\n    </li>\n  )}\n</ul>\n")),(0,l.kt)("p",null,"This is; however, ",(0,l.kt)("strong",{parentName:"p"},"not recommended")," and can create undesired problems even if it seems to be working just fine."),(0,l.kt)("p",null,"Read more about this in ",(0,l.kt)("a",{parentName:"p",href:"https://robinpokorny.medium.com/index-as-a-key-is-an-anti-pattern-e0349aece318"},"this article"),"."),(0,l.kt)("h3",{id:"refactoring-modules"},"Refactoring Modules"),(0,l.kt)("p",null,"Let's tidy the code up a bit. We are only interested in the field ",(0,l.kt)("em",{parentName:"p"},"notes")," of the props, so let's retrieve that directly using ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},"destructuring"),": "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = ({ notes }) => { //highlight-line\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map(note => \n          <li key={note.id}>\n            {note.content}\n          </li>\n        )}\n      </ul>\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"We'll separate displaying a single note into its own component ",(0,l.kt)("i",null,"Note"),": "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// highlight-start\nconst Note = ({ note }) => {\n  return (\n    <li>{note.content}</li>\n  )\n}\n// highlight-end\n\nconst App = ({ notes }) => {\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        // highlight-start\n        {notes.map(note => \n          <Note key={note.id} note={note} />\n        )}\n         // highlight-end\n      </ul>\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("i",null,"key")," attribute must now be defined for the ",(0,l.kt)("i",null,"Note")," components, and not for the ",(0,l.kt)("i",null,"li")," tags like before. "),(0,l.kt)("p",null,"A whole React application can be written in a single file. Although that is, of course, not very practical. Common practice is to declare each component in their own file as an ",(0,l.kt)("i",null,"ES6-module"),"."),(0,l.kt)("p",null,"We have been using modules the whole time. The first few lines of the file ",(0,l.kt)("i",null,"index.js"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\nimport App from './App'\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"},"import")," two modules, enabling them to be used in that file. The module ",(0,l.kt)("i",null,"react-dom")," is placed into the variable ",(0,l.kt)("em",{parentName:"p"},"ReactDOM"),", and the module that defines the main component of the app is placed into the variable ",(0,l.kt)("em",{parentName:"p"},"App")),(0,l.kt)("p",null,"Let's move our ",(0,l.kt)("i",null,"Note")," component into its own module. "),(0,l.kt)("p",null,"In smaller applications, components are usually placed in a directory called ",(0,l.kt)("i",null,"components"),", which is in turn placed within the ",(0,l.kt)("i",null,"src")," directory. The convention is to name the file after the component. "),(0,l.kt)("p",null,"Now, we'll create a directory called ",(0,l.kt)("i",null,"components")," for our application and place a file named ",(0,l.kt)("i",null,"Note.js")," inside.\nThe contents of the Note.js file are as follows: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\n\nconst Note = ({ note }) => {\n  return (\n    <li>{note.content}</li>\n  )\n}\n\nexport default Note\n")),(0,l.kt)("p",null,"The last line of the module ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"},"exports")," the declared module, the variable ",(0,l.kt)("i",null,"Note"),"."),(0,l.kt)("p",null,"Now the file that is using the component - ",(0,l.kt)("i",null,"App.js")," - can ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"},"import")," the module: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import Note from './components/Note' // highlight-line\n\nconst App = ({ notes }) => {\n  // ...\n}\n")),(0,l.kt)("p",null,"The component exported by the module is now available for use in the variable ",(0,l.kt)("i",null,"Note"),", just as it was earlier. "),(0,l.kt)("p",null,"Note that when importing our own components, their location must be given ",(0,l.kt)("i",null,"in relation to the importing file"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"'./components/Note'\n")),(0,l.kt)("p",null,"The period - ",(0,l.kt)("i",null,".")," - in the beginning refers to the current directory, so the module's location is a file called ",(0,l.kt)("i",null,"Note.js")," in the ",(0,l.kt)("i",null,"components")," sub-directory of the current directory. The filename extension ",(0,l.kt)("em",{parentName:"p"},".js")," can be omitted."),(0,l.kt)("p",null,"Modules have plenty of other uses other than enabling component declarations to be separated into their own files. We will get back to them later in this course. "),(0,l.kt)("p",null,"The current code of the application can be found on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-1"},"GitHub"),"."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("i",null,"main")," branch of the repository contains the code for a later version of the application. The current code is in the branch ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-1"},"part2-1"),":"),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",src:n(6478).Z,width:"1830",height:"914"})),(0,l.kt)("p",null,"If you clone the project, run the command ",(0,l.kt)("em",{parentName:"p"},"npm install")," before starting the application with ",(0,l.kt)("em",{parentName:"p"},"npm start"),"."),(0,l.kt)("h3",{id:"when-the-application-breaks"},"When the Application Breaks"),(0,l.kt)("p",null,"Early in your programming career (and even after 30 years of coding like yours truly), what often happens is that the application just completely breaks down. This is even more the case with dynamically typed languages, such as JavaScript, where the compiler does not check the data type. For instance, function variables or return values. "),(0,l.kt)("p",null,'A "React explosion" can for example look like this:'),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",src:n(1499).Z,width:"1518",height:"856"})),(0,l.kt)("p",null,"In these situations your best way out is the ",(0,l.kt)("em",null,"console.log")," method."),(0,l.kt)("p",null,"The piece of code causing the explosion is this: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const Course = ({ course }) => (\n  <div>\n    <Header course={course} />\n  </div>\n)\n\nconst App = () => {\n  const course = {\n    // ...\n  }\n\n  return (\n    <div>\n      <Course course={course} />\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"We'll hone in on the reason for the breakdown by adding ",(0,l.kt)("em",null,"console.log")," commands to the code. Because the first thing to be rendered is the ",(0,l.kt)("i",null,"App")," component, it's worth putting the first ",(0,l.kt)("em",null,"console.log")," there: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const course = {\n    // ...\n  }\n\n  console.log('App works...') // highlight-line\n\n  return (\n    // ..\n  )\n}\n")),(0,l.kt)("p",null,"To see the printing in the console, we must scroll up over the long red wall of errors."),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",src:n(1823).Z,width:"1682",height:"508"})),(0,l.kt)("p",null,"When one thing is found to be working, it's time to log deeper. If the component has been declared as a single statement, or a function without a return, it makes printing to the console harder."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const Course = ({ course }) => (\n  <div>\n    <Header course={course} />\n  </div>\n)\n")),(0,l.kt)("p",null,"The component should be changed to its longer form in order for us to add the printing: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const Course = ({ course }) => { \n  console.log(course) // highlight-line\n  return (\n    <div>\n      <Header course={course} />\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"Quite often the root of the problem is that the props are expected to be of a different type, or called with a different name than they actually are, and destructuring fails as a result. The problem often begins to solve itself when destructuring is removed and we see what the ",(0,l.kt)("em",null,"props")," actually contains. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const Course = (props) => { // highlight-line\n  console.log(props)  // highlight-line\n  const { course } = props\n  return (\n    <div>\n      <Header course={course} />\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"If the problem has still not been resolved, there really isn't much to do apart from continuing to bug-hunt by sprinkling more ",(0,l.kt)("em",{parentName:"p"},"console.log")," statements around your code. "),(0,l.kt)("p",null,"I added this chapter to the material after the model answer for the next question exploded completely (due to props being of the wrong type), and I had to debug it using ",(0,l.kt)("em",null,"console.log"),"."),(0,l.kt)("h2",{id:"forms"},"Forms"),(0,l.kt)("p",null,"Let's continue expanding our application by allowing users to add new notes. You can find the code for our current application ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-1"},"here"),". "),(0,l.kt)("p",null,"In order to get our page to update when new notes are added it's best to store the notes in the ",(0,l.kt)("i",null,"App")," component's state. Let's import the ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-state.html"},"useState")," function and use it to define a piece of state that gets initialized with the initial notes array passed in the props. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react' // highlight-line\nimport Note from './components/Note'\n\nconst App = (props) => { // highlight-line\n  const [notes, setNotes] = useState(props.notes) // highlight-line\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map(note => \n          <Note key={note.id} note={note} />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App \n")),(0,l.kt)("p",null,"The component uses the ",(0,l.kt)("em",null,"useState")," function to initialize the piece of state stored in ",(0,l.kt)("em",null,"notes")," with the array of notes passed in the props:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => { \n  const [notes, setNotes] = useState(props.notes) \n\n  // ...\n}\n")),(0,l.kt)("p",null,"If we wanted to start with an empty list of notes we would set the initial value as an empty array, and since the props would not be used, we could omit the ",(0,l.kt)("em",null,"props")," parameter from the function definition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => { \n  const [notes, setNotes] = useState([]) \n\n  // ...\n}  \n")),(0,l.kt)("p",null,"Let's stick with the initial value passed in the props for the time being."),(0,l.kt)("p",null,"Next, let's add an HTML ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms"},"form")," to the component that will be used for adding new notes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => {\n  const [notes, setNotes] = useState(props.notes)\n\n// highlight-start \n  const addNote = (event) => {\n    event.preventDefault()\n    console.log('button clicked', event.target)\n  }\n  // highlight-end   \n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map(note => \n          <Note key={note.id} note={note} />\n        )}\n      </ul>\n      // highlight-start \n      <form onSubmit={addNote}>\n        <input />\n        <button type=\"submit\">save</button>\n      </form>   \n      // highlight-end   \n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"We have added the ",(0,l.kt)("em",{parentName:"p"},"addNote")," function as an event handler to the form element that will be called when the form is submitted, by clicking the submit button."),(0,l.kt)("p",null,"We use the method for defining our event handler:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const addNote = (event) => {\n  event.preventDefault()\n  console.log('button clicked', event.target)\n}\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",null,"event")," parameter is the ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/handling-events.html"},"event")," that triggers the call to the event handler function: "),(0,l.kt)("p",null,"The event handler immediately calls the ",(0,l.kt)("em",null,"event.preventDefault()")," method, which prevents the default action of submitting a form. The default action would, ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event"},"among other things"),", cause the page to reload."),(0,l.kt)("p",null,"The target of the event stored in ",(0,l.kt)("em",{parentName:"p"},"event.target")," is logged to the console:"),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",src:n(876).Z,width:"1596",height:"540"})),(0,l.kt)("p",null,"The target in this case is the form that we have defined in our component."),(0,l.kt)("p",null,"How do we access the data contained in the form's ",(0,l.kt)("i",null,"input")," element?"),(0,l.kt)("h3",{id:"controlled-component"},"Controlled component"),(0,l.kt)("p",null,"There are many ways to accomplish this; the first method we will take a look at is through the use of so-called ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/forms.html#controlled-components"},"controlled components"),"."),(0,l.kt)("p",null,"Let's add a new piece of state called ",(0,l.kt)("em",null,"newNote")," for storing the user-submitted input ",(0,l.kt)("strong",{parentName:"p"},"and")," let's set it as the ",(0,l.kt)("i",null,"input")," element's ",(0,l.kt)("i",null,"value")," attribute:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => {\n  const [notes, setNotes] = useState(props.notes)\n  // highlight-start\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  ) \n  // highlight-end\n\n  const addNote = (event) => {\n    event.preventDefault()\n    console.log('button clicked', event.target)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map(note => \n          <Note key={note.id} note={note} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} /> //highlight-line\n        <button type=\"submit\">save</button>\n      </form>   \n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"The placeholder text stored as the initial value of the ",(0,l.kt)("em",null,"newNote")," state appears in the ",(0,l.kt)("i",null,"input")," element, but the input text can't be edited. The console displays a warning that gives us a clue as to what might be wrong:"),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",src:n(1081).Z,width:"1752",height:"424"})),(0,l.kt)("p",null,"Since we assigned a piece of the ",(0,l.kt)("i",null,"App")," component's state as the ",(0,l.kt)("i",null,"value")," attribute of the input element, the ",(0,l.kt)("i",null,"App")," component now ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/forms.html#controlled-components"},"controls")," the behavior of the input element."),(0,l.kt)("p",null,"In order to enable editing of the input element, we have to register an ",(0,l.kt)("i",null,"event handler")," that synchronizes the changes made to the input with the component's state:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => {\n  const [notes, setNotes] = useState(props.notes)\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  ) \n\n  // ...\n\n// highlight-start\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n// highlight-end\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map(note => \n          <Note key={note.id} note={note} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange} // highlight-line\n        />\n        <button type=\"submit\">save</button>\n      </form>   \n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"We have now registered an event handler to the ",(0,l.kt)("i",null,"onChange")," attribute of the form's ",(0,l.kt)("i",null,"input")," element:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"<input\n  value={newNote}\n  onChange={handleNoteChange}\n/>\n")),(0,l.kt)("p",null,"The event handler is called every time ",(0,l.kt)("i",null,"a change occurs in the input element"),". The event handler function receives the event object as its ",(0,l.kt)("em",null,"event")," parameter:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const handleNoteChange = (event) => {\n  console.log(event.target.value)\n  setNewNote(event.target.value)\n}\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",null,"target")," property of the event object now corresponds to the controlled ",(0,l.kt)("i",null,"input")," element and ",(0,l.kt)("em",null,"event.target.value")," refers to the input value of that element."),(0,l.kt)("p",null,"Note that we did not need to call the ",(0,l.kt)("em",{parentName:"p"},"event.preventDefault()")," method like we did in the ",(0,l.kt)("i",null,"onSubmit")," event handler. This is because there is no default action that occurs on an input change, unlike on a form submission."),(0,l.kt)("p",null,"You can follow along in the console to see how the event handler is called:"),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",src:n(4670).Z,width:"1570",height:"916"})),(0,l.kt)("p",null,"You did remember to install ",(0,l.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"},"React devtools"),", right? Good. You can directly view how the state changes from the React Devtools tab:"),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",src:n(8921).Z,width:"1730",height:"658"})),(0,l.kt)("p",null,"Now the ",(0,l.kt)("i",null,"App")," component's ",(0,l.kt)("em",null,"newNote")," state reflects the current value of the input, which means that we can complete the ",(0,l.kt)("em",null,"addNote")," function for creating new notes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const addNote = (event) => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date().toISOString(),\n    important: Math.random() < 0.5,\n    id: notes.length + 1,\n  }\n\n  setNotes(notes.concat(noteObject))\n  setNewNote('')\n}\n")),(0,l.kt)("p",null,"First we create a new object for the note called ",(0,l.kt)("em",null,"noteObject")," that will receive its content from the component's ",(0,l.kt)("em",null,"newNote")," state. The unique identifier ",(0,l.kt)("i",null,"id")," is generated based on the total number of notes. This method works for our application since notes are never deleted. With the help of the ",(0,l.kt)("em",null,"Math.random()")," function, our note has a 50% chance of being marked as important."),(0,l.kt)("p",null,"The new note is added to the list of notes using the ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"},"concat")," array method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"setNotes(notes.concat(noteObject))\n")),(0,l.kt)("p",null,"The method does not mutate the original ",(0,l.kt)("em",null,"notes")," array, but rather creates ",(0,l.kt)("i",null,"a new copy of the array with the new item added to the end"),". This is important since we must ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/state-and-lifecycle.html#using-state-correctly"},"never mutate state directly")," in React!"),(0,l.kt)("p",null,"The event handler also resets the value of the controlled input element by calling the ",(0,l.kt)("em",null,"setNewNote")," function of the ",(0,l.kt)("em",null,"newNote")," state:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"setNewNote('')\n")),(0,l.kt)("p",null,"You can find the code for our current application in its entirety in the ",(0,l.kt)("i",null,"part2-2")," branch of ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-2"},"this GitHub repository"),"."),(0,l.kt)("h3",{id:"filtering-displayed-elements"},"Filtering Displayed Elements"),(0,l.kt)("p",null,"Let's add some new functionality to our application that allows us to only view the important notes."),(0,l.kt)("p",null,"Let's add a piece of state to the ",(0,l.kt)("i",null,"App")," component that keeps track of which notes should be displayed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = (props) => {\n  const [notes, setNotes] = useState(props.notes) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true) // highlight-line\n  \n  // ...\n}\n")),(0,l.kt)("p",null,"Let's change the component so that it stores a list of all the notes to be displayed in the ",(0,l.kt)("em",null,"notesToShow")," variable. The items of the list depend on the state of the component:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\nimport Note from './components/Note'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState(props.notes)\n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n\n  // ...\n\n// highlight-start\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n// highlight-end\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notesToShow.map(note => // highlight-line\n          <Note key={note.id} note={note} />\n        )}\n      </ul>\n      // ...\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"The definition of the ",(0,l.kt)("em",null,"notesToShow")," variable is rather compact:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important === true)\n")),(0,l.kt)("p",null,"The definition uses the ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"},"conditional")," operator also found in many other programming languages."),(0,l.kt)("p",null,"The operator functions as follows. If we have:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const result = condition ? val1 : val2\n")),(0,l.kt)("p",null,"the ",(0,l.kt)("em",null,"result")," variable will be set to the value of ",(0,l.kt)("em",null,"val1")," if ",(0,l.kt)("em",null,"condition")," is true. If ",(0,l.kt)("em",null,"condition")," is false, the ",(0,l.kt)("em",null,"result")," variable will be set to the value of",(0,l.kt)("em",null,"val2"),"."),(0,l.kt)("p",null,"If the value of ",(0,l.kt)("em",null,"showAll")," is false, the ",(0,l.kt)("em",null,"notesToShow")," variable will be assigned to a list that only contains notes that have the ",(0,l.kt)("em",null,"important")," property set to true. Filtering is done with the help of the array ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"},"filter")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"notes.filter(note => note.important === true)\n")),(0,l.kt)("p",null,"The comparison operator is in fact redundant, since the value of ",(0,l.kt)("em",null,"note.important")," is either ",(0,l.kt)("i",null,"true")," or ",(0,l.kt)("i",null,"false")," which means that we can simply write:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"notes.filter(note => note.important)\n")),(0,l.kt)("p",null,"The reason we showed the comparison operator first was to emphasize an important detail: in JavaScript ",(0,l.kt)("em",null,"val1 == val2")," does not work as expected in all situations and it's safer to use ",(0,l.kt)("em",null,"val1 === val2")," exclusively in comparisons. You can read more about the topic ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness"},"here"),"."),(0,l.kt)("p",null,"You can test out the filtering functionality by changing the initial value of the ",(0,l.kt)("em",null,"showAll")," state."),(0,l.kt)("p",null,"Next let's add functionality that enables users to toggle the ",(0,l.kt)("em",null,"showAll")," state of the application from the user interface."),(0,l.kt)("p",null,"The relevant changes are shown below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react' \nimport Note from './components/Note'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState(props.notes) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  // ...\n\n  return (\n    <div>\n      <h1>Notes</h1>\n// highlight-start      \n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n// highlight-end            \n      <ul>\n        {notesToShow.map(note =>\n          <Note key={note.id} note={note} />\n        )}\n      </ul>\n      // ...    \n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"The displayed notes (all versus important) are controlled with a button. The event handler for the button is so simple that it has been defined directly in the attribute of the button element. The event handler switches the value of ",(0,l.kt)("em",{parentName:"p"},"showAll")," from true to false and vice versa:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"() => setShowAll(!showAll)\n")),(0,l.kt)("p",null,"The text of the button depends on the value of the ",(0,l.kt)("em",null,"showAll")," state:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"show {showAll ? 'important' : 'all'}\n")),(0,l.kt)("p",null,"You can find the code for our current application in its entirety in the ",(0,l.kt)("i",null,"part2-3")," branch of ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-3"},"this GitHub repository"),"."),(0,l.kt)("h2",{id:"css"},"Adding styles to React app"),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"This part will be revisited in lecture 9"))),(0,l.kt)("p",null,"The appearance of our current application is quite modest. Before we move onto the next part, let's take a look at how we can add styles to a React application. There are several different ways of doing this and we will take a look at the other methods later on. At first, we will add CSS to our application the old-school way; in a single file without using a ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor"},"CSS preprocessor")," (although this is not entirely true as we will learn later on). "),(0,l.kt)("p",null,"Let's add a new ",(0,l.kt)("i",null,"index.css")," file under the ",(0,l.kt)("i",null,"src")," directory and then add it to the application by importing it in the ",(0,l.kt)("i",null,"index.js")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import './index.css'\n")),(0,l.kt)("p",null,"Let's add the following CSS rule to the ",(0,l.kt)("i",null,"index.css")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"h1 {\n  color: green;\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note:")," when the content of the file ",(0,l.kt)("i",null,"index.css")," changes, React might not notice that automatically so you may need to refresh the browser to see your changes!"),(0,l.kt)("p",null,"CSS rules comprise of ",(0,l.kt)("i",null,"selectors")," and ",(0,l.kt)("i",null,"declarations"),". The selector defines which elements the rule should be applied to. The selector above is ",(0,l.kt)("i",null,"h1"),", which will match all of the ",(0,l.kt)("i",null,"h1")," header tags in our application."),(0,l.kt)("p",null,"The declaration sets the ",(0,l.kt)("em",{parentName:"p"},"color")," property to the value ",(0,l.kt)("i",null,"green"),"."),(0,l.kt)("p",null,"One CSS rule can contain an arbitrary number of properties. Let's modify the previous rule to make the text cursive, by defining the font style as ",(0,l.kt)("i",null,"italic"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"h1 {\n  color: green;\n  font-style: italic;  // highlight-line\n}\n")),(0,l.kt)("p",null,"There are many ways of matching elements by using ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"},"different types of CSS selectors"),"."),(0,l.kt)("p",null,"If we wanted to target, let's say, each one of the notes with our styles, we could use the selector ",(0,l.kt)("i",null,"li"),", as all of the notes are wrapped inside ",(0,l.kt)("i",null,"li")," tags:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const Note = ({ note, toggleImportance }) => {\n  const label = note.important \n    ? 'make not important' \n    : 'make important';\n\n  return (\n    <li>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n")),(0,l.kt)("p",null,"Let's add the following rule to our style sheet (since my knowledge of elegant web design is close to zero, the styles don't make much sense):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"li {\n  color: grey;\n  padding-top: 3px;\n  font-size: 15px;\n}\n")),(0,l.kt)("p",null,"Using element types for defining CSS rules is slightly problematic. If our application contained other ",(0,l.kt)("i",null,"li")," tags, the same style rule would also be applied to them."),(0,l.kt)("p",null,"If we want to apply our style specifically to notes, then it is better to use ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors"},"class selectors"),"."),(0,l.kt)("p",null,"In regular HTML, classes are defined as the value of the ",(0,l.kt)("i",null,"class")," attribute:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<li class="note">some text...</li>\n')),(0,l.kt)("p",null,"In React we have to use the ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/dom-elements.html#classname"},"className")," attribute instead of the class attribute. With this in mind, let's make the following changes to our ",(0,l.kt)("i",null,"Note")," component:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const Note = ({ note, toggleImportance }) => {\n  const label = note.important \n    ? 'make not important' \n    : 'make important';\n\n  return (\n    <li className='note'> // highlight-line\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n")),(0,l.kt)("p",null,"Class selectors are defined with the ",(0,l.kt)("em",{parentName:"p"},".classname")," syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},".note {\n  color: grey;\n  padding-top: 5px;\n  font-size: 15px;\n}\n")),(0,l.kt)("p",null,"If you now add other ",(0,l.kt)("i",null,"li")," elements to the application, they will not be affected by the style rule above."),(0,l.kt)("h3",{id:"improved-error-message"},"Improved error message"),(0,l.kt)("p",null,"We previously implemented the error message that was displayed when the user tried to toggle the importance of a deleted note with the ",(0,l.kt)("em",null,"alert")," method. Let's implement the error message as its own React component."),(0,l.kt)("p",null,"The component is quite simple:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"If the value of the ",(0,l.kt)("em",null,"message")," prop is ",(0,l.kt)("em",null,"null"),", then nothing is rendered to the screen, and in other cases the message gets rendered inside of a div element."),(0,l.kt)("p",null,"Let's add a new piece of state called ",(0,l.kt)("i",null,"errorMessage")," to the ",(0,l.kt)("i",null,"App")," component. Let's initialize it with some error message so that we can immediately test our component:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...') // highlight-line\n\n  // ...\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} /> // highlight-line\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      // ...\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"Then let's add a style rule that suits an error message:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},".error {\n  color: red;\n  background: lightgrey;\n  font-size: 20px;\n  border-style: solid;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 10px;\n}\n")),(0,l.kt)("p",null,"Now we are ready to add the logic for displaying the error message. Let's change the ",(0,l.kt)("em",null,"toggleImportanceOf")," function in the following way:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        // highlight-start\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        // highlight-end\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n")),(0,l.kt)("p",null,"When the error occurs we add a descriptive error message to the ",(0,l.kt)("em",null,"errorMessage")," state. At the same time we start a timer, that will set the ",(0,l.kt)("em",null,"errorMessage")," state to ",(0,l.kt)("em",null,"null")," after five seconds."),(0,l.kt)("p",null,"The result looks like this:"),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",src:n(1138).Z,width:"1478",height:"700"})),(0,l.kt)("p",null,"The code for the current state of our application can be found in the  ",(0,l.kt)("i",null,"part2-7")," branch on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-7"},"GitHub"),"."),(0,l.kt)("h3",{id:"inline-styles"},"Inline styles"),(0,l.kt)("p",null,"React also makes it possible to write styles directly in the code as so-called ",(0,l.kt)("a",{parentName:"p",href:"https://react-cn.github.io/react/tips/inline-styles.html"},"inline styles"),"."),(0,l.kt)("p",null,"The idea behind defining inline styles is extremely simple. Any React component or element can be provided with a set of CSS properties as a JavaScript object through the ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/dom-elements.html#style"},"style")," attribute."),(0,l.kt)("p",null,"CSS rules are defined slightly differently in JavaScript than in normal CSS files. Let's say that we wanted to give some element the color green and italic font that's 16 pixels in size. In CSS, it would look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"{\n  color: green;\n  font-style: italic;\n  font-size: 16px;\n}\n")),(0,l.kt)("p",null,"But as a React inline style object it would look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  color: 'green',\n  fontStyle: 'italic',\n  fontSize: 16\n}\n")),(0,l.kt)("p",null,"Every CSS property is defined as a separate property of the JavaScript object. Numeric values for pixels can be simply defined as integers. One of the major differences compared to regular CSS, is that hyphenated (kebab case) CSS properties are written in camelCase."),(0,l.kt)("p",null,'Next, we could add a "bottom block" to our application by creating a ',(0,l.kt)("i",null,"Footer")," component and define the following inline styles for it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// highlight-start\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2022</em>\n    </div>\n  )\n}\n// highlight-end\n\nconst App = () => {\n  // ...\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      // ...  \n\n      <Footer /> // highlight-line\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"Inline styles come with certain limitations. For instance, so-called ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"},"pseudo-classes")," can't be used straightforwardly."),(0,l.kt)("p",null,"Inline styles and some of the other ways of adding styles to React components go completely against the grain of old conventions. Traditionally, it has been considered best practice to entirely separate CSS from the content (HTML) and functionality (JavaScript). According to this older school of thought, the goal was to write CSS, HTML, and JavaScript into their separate files."),(0,l.kt)("p",null,"The philosophy of React is, in fact, the polar opposite of this. Since the separation of CSS, HTML, and JavaScript into separate files did not seem to scale well in larger applications, React bases the division of the application along the lines of its logical functional entities."),(0,l.kt)("p",null,"The structural units that make up the application's functional entities are React components. A React component defines the HTML for structuring the content, the JavaScript functions for determining functionality, and also the component's styling; all in one place. This is to create individual components that are as independent and reusable as possible."),(0,l.kt)("p",null,"The code of the final version of our application can be found in the  ",(0,l.kt)("i",null,"part2-8")," branch on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-8"},"GitHub"),"."),(0,l.kt)("h2",{id:"reference"},"Reference"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://fullstackopen.com"},"FullStackOpen: Part 2A, 2B"))))}d.isMDXComponent=!0},5578:function(e,t,n){t.Z=n.p+"assets/images/1a-805ae8c8c464e8e518f586760eb19f9c.png"},1138:function(e,t,n){t.Z=n.p+"assets/images/26e-34730eb5ace1308744ef977b63f727ea.png"},6478:function(e,t,n){t.Z=n.p+"assets/images/2e-7b7ff941503de7eb7623fdff9a9d7f58.png"},1499:function(e,t,n){t.Z=n.p+"assets/images/3b-b13653086bf4a4bc02f6e454f8bc8811.png"},1823:function(e,t,n){t.Z=n.p+"assets/images/4b-215c68697acc7b13162e0a2c91184c58.png"},876:function(e,t,n){t.Z=n.p+"assets/images/6e-898436095c7f6c9a4ce71d62392d5cd2.png"},1081:function(e,t,n){t.Z=n.p+"assets/images/7e-c437988a69e3f4d3df6ad62f81a0d5c0.png"},4670:function(e,t,n){t.Z=n.p+"assets/images/8e-f32fc9ea3e0acdbafb8781d95d9b4051.png"},8921:function(e,t,n){t.Z=n.p+"assets/images/9ea-98e734bc33c63c88cc41e0a8516ab5e2.png"}}]);