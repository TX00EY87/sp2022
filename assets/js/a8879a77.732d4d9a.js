"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3096],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,m=p["".concat(i,".").concat(u)]||p[u]||h[u]||s;return n?o.createElement(m,r(r({ref:t},d),{},{components:n})):o.createElement(m,r({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<s;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8920:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return h}});var o=n(7462),a=n(3366),s=(n(7294),n(3905)),r=["components"],l={title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},i="After Lecture",c={unversionedId:"lecture-12/post-lecture",id:"lecture-12/post-lecture",title:"Post Lecture Reading",description:"Recommended videos",source:"@site/docs/lecture-12/post-lecture.md",sourceDirName:"lecture-12",slug:"/lecture-12/post-lecture",permalink:"/sp2022/lecture-12/post-lecture",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},sidebar:"docs"},d={},h=[{value:"Recommended videos",id:"recommended-videos",level:2},{value:"MongoDB",id:"mongodb",level:2},{value:"Mongoose",id:"mongoose",level:2},{value:"Schema",id:"schema",level:3},{value:"Creating and saving objects",id:"creating-and-saving-objects",level:3},{value:"Fetching objects from the database",id:"fetching-objects-from-the-database",level:3},{value:"Backend connected to a database",id:"backend-connected-to-a-database",level:3},{value:"Reference",id:"reference",level:2}],p={toc:h};function u(e){var t=e.components,l=(0,a.Z)(e,r);return(0,s.kt)("wrapper",(0,o.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"after-lecture"},"After Lecture"),(0,s.kt)("h2",{id:"recommended-videos"},"Recommended videos"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://youtu.be/-PdjUx9JZ2E"},"Intro to MongoDB and Mongoose"))),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"}," ",(0,s.kt)("strong",{parentName:"p"},"Credits"),": The post lecture material has been written by ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/mluukkai"},"Matti Luukkainen")," from ",(0,s.kt)("a",{parentName:"p",href:"https://fullstackopen.com/en/"},"University of Helsinki"),". The material is licensed under the Creative Commons BY-NC-SA 3.0 License."))),(0,s.kt)("p",null,"First we will cover persisting data in a database, then We will take a look at a few different ways of debugging Node applications."),(0,s.kt)("h2",{id:"mongodb"},"MongoDB"),(0,s.kt)("p",null,"In order to store our saved notes indefinitely, we need a database. In most parts of this course we will use ",(0,s.kt)("a",{parentName:"p",href:"https://www.mongodb.com/"},"MongoDB")," which is a so-called ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Document-oriented_database"},"document database"),"."),(0,s.kt)("p",null,"The reason for using using Mongo as the database is it's lower complexity with respect to a relational database. "),(0,s.kt)("p",null,"Document databases differ from relational databases in how they organize data as well as the query languages they support. Document databases are usually categorized under the ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/NoSQL"},"NoSQL")," umbrella term."),(0,s.kt)("p",null,"You can read more about document databases and NoSQL from the course material for ",(0,s.kt)("a",{parentName:"p",href:"https://tikape-s18.mooc.fi/part7/"},"week 7")," of the Introduction to Databases course. Unfortunately the material is currently only available in Finnish. "),(0,s.kt)("p",null,"Read now the chapters on ",(0,s.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/core/databases-and-collections/"},"collections")," and ",(0,s.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/core/document/"},"documents")," from the MongoDB manual to get a basic idea on how a document database stores data."),(0,s.kt)("p",null,"Naturally, you can install and run MongoDB on your own computer. However, the internet is also full of Mongo database services that you can use. Our preferred MongoDB provider in this course will be ",(0,s.kt)("a",{parentName:"p",href:"https://www.mongodb.com/atlas/database"},"MongoDB Atlas"),"."),(0,s.kt)("p",null,"Once you've created and logged into your account, let us start by selecting the free option:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(9513).Z,width:"1964",height:"1598"})),(0,s.kt)("p",null,"Pick the cloud provider and location and create the cluster:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(7320).Z,width:"1970",height:"1568"})),(0,s.kt)("p",null,"Let's wait for the cluster to be ready for use. This can takes some minutes."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NB")," do not continue before the cluster is ready."),(0,s.kt)("p",null,"Let's use the ",(0,s.kt)("i",null,"security")," tab for creating user credentials for the database. Please note that these are not the same credentials you use for logging into MongoDB Atlas. These will be used for your application to connect to the database."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(2599).Z,width:"1776",height:"1070"})),(0,s.kt)("p",null,"Next we have to define the IP addresses that are allowed access to the database. For the sake of simplicity we will allow access from all IP addresses:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(8326).Z,width:"2136",height:"988"})),(0,s.kt)("p",null,"Finally we are ready to connect to our database. Start by clicking ",(0,s.kt)("i",null,"connect"),":"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(3946).Z,width:"2096",height:"1034"})),(0,s.kt)("p",null,"and choose ",(0,s.kt)("i",null,"Connect your application"),":"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(7665).Z,width:"1552",height:"938"})),(0,s.kt)("p",null,"The view displays the ",(0,s.kt)("i",null,"MongoDB URI"),", which is the address of the database that we will supply to the MongoDB client library we will add to our application."),(0,s.kt)("p",null,"The address looks like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mongodb+srv://fullstack:$<password>@cluster0.o1opl.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\n")),(0,s.kt)("p",null,"We are now ready to use the database."),(0,s.kt)("h2",{id:"mongoose"},"Mongoose"),(0,s.kt)("p",null,"We could use the database directly from our JavaScript code with the ",(0,s.kt)("a",{parentName:"p",href:"https://mongodb.github.io/node-mongodb-native/"},"official MongoDb Node.js driver")," library, but it is quite cumbersome to use. We will instead use the ",(0,s.kt)("a",{parentName:"p",href:"http://mongoosejs.com/index.html"},"Mongoose")," library that offers a higher level API."),(0,s.kt)("p",null,"Mongoose could be described as an ",(0,s.kt)("i",null,"object document mapper")," (ODM), and saving JavaScript objects as Mongo documents is straightforward with this library."),(0,s.kt)("p",null,"Let's install Mongoose:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install mongoose\n")),(0,s.kt)("p",null,"Let's not add any code dealing with Mongo to our backend just yet. Instead, let's make a practice application by creating a new file, ",(0,s.kt)("i",null,"mongo.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const mongoose = require('mongoose')\n\nif (process.argv.length < 3) {\n  console.log('Please provide the password as an argument: node mongo.js <password>')\n  process.exit(1)\n}\n\nconst password = process.argv[2]\n\nconst url =\n  `mongodb+srv://fullstack:${password}@cluster0.o1opl.mongodb.net/myFirstDatabase?retryWrites=true&w=majority`\n\nmongoose.connect(url)\n\nconst noteSchema = new mongoose.Schema({\n  content: String,\n  date: Date,\n  important: Boolean,\n})\n\nconst Note = mongoose.model('Note', noteSchema)\n\nconst note = new Note({\n  content: 'HTML is Easy',\n  date: new Date(),\n  important: true,\n})\n\nnote.save().then(result => {\n  console.log('note saved!')\n  mongoose.connection.close()\n})\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NB:")," Depending on which region you selected when building your cluster, the ",(0,s.kt)("i",null,"MongoDB URI")," may be different from the example provided above. You should verify and use the correct URI that was generated from MongoDB Atlas."),(0,s.kt)("p",null,"The code also assumes that it will be passed the password from the credentials we created in MongoDB Atlas, as a command line parameter. We can access the command line parameter like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const password = process.argv[2]\n")),(0,s.kt)("p",null,"When the code is run with the command ",(0,s.kt)("i",null,"node mongo.js password"),", Mongo will add a new document to the database."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NB:")," Please note the password is the password created for the database user, not your MongoDB Atlas password.  Also, if you created password with special characters, then you'll need to ",(0,s.kt)("a",{parentName:"p",href:"https://docs.atlas.mongodb.com/troubleshoot-connection/#special-characters-in-connection-string-password"},"URL encode that password"),"."),(0,s.kt)("p",null,"We can view the current state of the database from the MongoDB Atlas from ",(0,s.kt)("i",null,"Browse collections"),", in the Database tab."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(9922).Z,width:"1806",height:"852"})),(0,s.kt)("p",null,"As the view states, the ",(0,s.kt)("i",null,"document")," matching the note has been added to the ",(0,s.kt)("i",null,"notes")," collection in the ",(0,s.kt)("i",null,"myFirstDatabase")," database."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(6609).Z,width:"1814",height:"1142"})),(0,s.kt)("p",null,"Let's destroy the default database ",(0,s.kt)("i",null,"myFirstDatabase")," and change the name of database referenced in our connection string to ",(0,s.kt)("i",null,"noteApp")," instead, by modifying the URI:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mongodb+srv://fullstack:$<password>@cluster0.o1opl.mongodb.net/noteApp?retryWrites=true&w=majority\n")),(0,s.kt)("p",null,"Let's run our code again:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(7675).Z,width:"1844",height:"1142"})),(0,s.kt)("p",null,"The data is now stored in the right database. The view also offers the ",(0,s.kt)("i",null,"create database")," functionality, that can be used to create new databases from the website. Creating the database like this is not necessary, since MongoDB Atlas automatically creates a new database when an application tries to connect to a database that does not exist yet."),(0,s.kt)("h3",{id:"schema"},"Schema"),(0,s.kt)("p",null,"After establishing the connection to the database, we define the ",(0,s.kt)("a",{parentName:"p",href:"http://mongoosejs.com/docs/guide.html"},"schema")," for a note and the matching ",(0,s.kt)("a",{parentName:"p",href:"http://mongoosejs.com/docs/models.html"},"model"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const noteSchema = new mongoose.Schema({\n  content: String,\n  date: Date,\n  important: Boolean,\n})\n\nconst Note = mongoose.model('Note', noteSchema)\n")),(0,s.kt)("p",null,"First we define the ",(0,s.kt)("a",{parentName:"p",href:"http://mongoosejs.com/docs/guide.html"},"schema")," of a note that is stored in the ",(0,s.kt)("em",{parentName:"p"},"noteSchema")," variable. The schema tells Mongoose how the note objects are to be stored in the database."),(0,s.kt)("p",null,"In the ",(0,s.kt)("em",{parentName:"p"},"Note")," model definition, the first ",(0,s.kt)("i",null,'"Note"')," parameter is the singular name of the model. The name of the collection will be the lowercased plural ",(0,s.kt)("i",null,"notes"),", because the ",(0,s.kt)("a",{parentName:"p",href:"http://mongoosejs.com/docs/models.html"},"Mongoose convention")," is to automatically name collections as the plural (e.g. ",(0,s.kt)("i",null,"notes"),") when the schema refers to them in the singular (e.g. ",(0,s.kt)("i",null,"Note"),")."),(0,s.kt)("p",null,"Document databases like Mongo are ",(0,s.kt)("i",null,"schemaless"),", meaning that the database itself does not care about the structure of the data that is stored in the database. It is possible to store documents with completely different fields in the same collection."),(0,s.kt)("p",null,"The idea behind Mongoose is that the data stored in the database is given a ",(0,s.kt)("i",null,"schema at the level of the application")," that defines the shape of the documents stored in any given collection."),(0,s.kt)("h3",{id:"creating-and-saving-objects"},"Creating and saving objects"),(0,s.kt)("p",null,"Next, the application creates a new note object with the help of the ",(0,s.kt)("i",null,"Note")," ",(0,s.kt)("a",{parentName:"p",href:"http://mongoosejs.com/docs/models.html"},"model"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const note = new Note({\n  content: 'HTML is Easy',\n  date: new Date(),\n  important: false,\n})\n")),(0,s.kt)("p",null,"Models are so-called ",(0,s.kt)("i",null,"constructor functions")," that create new JavaScript objects based on the provided parameters. Since the objects are created with the model's constructor function, they have all the properties of the model, which include methods for saving the object to the database."),(0,s.kt)("p",null,"Saving the object to the database happens with the appropriately named ",(0,s.kt)("em",{parentName:"p"},"save")," method, that can be provided with an event handler with the ",(0,s.kt)("em",{parentName:"p"},"then")," method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"note.save().then(result => {\n  console.log('note saved!')\n  mongoose.connection.close()\n})\n")),(0,s.kt)("p",null,"When the object is saved to the database, the event handler provided to ",(0,s.kt)("em",{parentName:"p"},"then"),"  gets called. The event handler closes the database connection with the command ",(0,s.kt)("code",null,"mongoose.connection.close()"),". If the connection is not closed, the program will never finish its execution."),(0,s.kt)("p",null,"The result of the save operation is in the ",(0,s.kt)("em",{parentName:"p"},"result")," parameter of the event handler. The result is not that interesting when we're storing one object to the database. You can print the object to the console if you want to take a closer look at it while implementing your application or during debugging."),(0,s.kt)("p",null,"Let's also save a few more notes by modifying the data in the code and by executing the program again."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NB:")," Unfortunately the Mongoose documentation is not very consistent, with parts of it using callbacks in its examples and other parts, other styles, so it is not recommended to copy paste code directly from there. Mixing promises with old-school callbacks in the same code is not recommended. "),(0,s.kt)("h3",{id:"fetching-objects-from-the-database"},"Fetching objects from the database"),(0,s.kt)("p",null,"Let's comment out the code for generating new notes and replace it with the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"Note.find({}).then(result => {\n  result.forEach(note => {\n    console.log(note)\n  })\n  mongoose.connection.close()\n})\n")),(0,s.kt)("p",null,"When the code is executed, the program prints all the notes stored in the database:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(5165).Z,width:"1072",height:"546"})),(0,s.kt)("p",null,"The objects are retrieved from the database with the ",(0,s.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api.html#model_Model.find"},"find")," method of the ",(0,s.kt)("em",{parentName:"p"},"Note")," model. The parameter of the method is an object expressing search conditions. Since the parameter is an empty object",(0,s.kt)("code",null,"{}"),", we get all of the notes stored in the  ",(0,s.kt)("em",{parentName:"p"},"notes")," collection."),(0,s.kt)("p",null,"The search conditions adhere to the Mongo search query ",(0,s.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/"},"syntax"),"."),(0,s.kt)("p",null,"We could restrict our search to only include important notes like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"Note.find({ important: true }).then(result => {\n  // ...\n})\n")),(0,s.kt)("h3",{id:"backend-connected-to-a-database"},"Backend connected to a database"),(0,s.kt)("p",null,"Now we have enough knowledge to start using Mongo in our application."),(0,s.kt)("p",null,"Let's get a quick start by copy pasting the Mongoose definitions to the ",(0,s.kt)("i",null,"index.js")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const mongoose = require('mongoose')\n\n// DO NOT SAVE YOUR PASSWORD TO GITHUB!!\nconst url =\n  `mongodb+srv://fullstack:<password>@cluster0.o1opl.mongodb.net/noteApp?retryWrites=true&w=majority`\n\nmongoose.connect(url)\n\nconst noteSchema = new mongoose.Schema({\n  content: String,\n  date: Date,\n  important: Boolean,\n})\n\nconst Note = mongoose.model('Note', noteSchema)\n")),(0,s.kt)("p",null,"Let's change the handler for fetching all notes to the following form:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/api/notes', (request, response) => {\n  Note.find({}).then(notes => {\n    response.json(notes)\n  })\n})\n")),(0,s.kt)("p",null,"We can verify in the browser that the backend works for displaying all of the documents:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(9260).Z,width:"1612",height:"910"})),(0,s.kt)("p",null,"The application works almost perfectly. The frontend assumes that every object has a unique id in the ",(0,s.kt)("i",null,"id")," field. We also don't want to return the mongo versioning field ",(0,s.kt)("i",null,"_","_","v")," to the frontend."),(0,s.kt)("p",null,"One way to format the objects returned by Mongoose is to ",(0,s.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/7034848/mongodb-output-id-instead-of-id"},"modify")," the ",(0,s.kt)("em",{parentName:"p"},"toJSON")," method of the schema, which is used on all instances of the models produced with that schema. Modifying the method works like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"noteSchema.set('toJSON', {\n  transform: (document, returnedObject) => {\n    returnedObject.id = returnedObject._id.toString()\n    delete returnedObject._id\n    delete returnedObject.__v\n  }\n})\n")),(0,s.kt)("p",null,"Even though the ",(0,s.kt)("i",null,"_","id")," property of Mongoose objects looks like a string, it is in fact an object. The ",(0,s.kt)("em",{parentName:"p"},"toJSON")," method we defined transforms it into a string just to be safe. If we didn't make this change, it would cause more harm for us in the future once we start writing tests."),(0,s.kt)("p",null,"Let's respond to the HTTP request with a list of objects formatted with the ",(0,s.kt)("em",{parentName:"p"},"toJSON")," method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/api/notes', (request, response) => {\n  Note.find({}).then(notes => {\n    response.json(notes)\n  })\n})\n")),(0,s.kt)("p",null,"Now the ",(0,s.kt)("em",{parentName:"p"},"notes")," variable is assigned to an array of objects returned by Mongo. When the response is sent in the JSON format, the ",(0,s.kt)("em",{parentName:"p"},"toJSON")," method of each object in the array is called automatically by the ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"},"JSON.stringify")," method."),(0,s.kt)("h2",{id:"reference"},"Reference"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://fullstackopen.com"},"FullStackOpen: Part 3C"))))}u.isMDXComponent=!0},9260:function(e,t,n){t.Z=n.p+"assets/images/44ea-24c7c17fd925ae5e64ad6cc58d285cb3.png"},5165:function(e,t,n){t.Z=n.p+"assets/images/70ea-531fdef7421be0955303cfc286fa280b.png"},9513:function(e,t,n){t.Z=n.p+"assets/images/mongo1-92c5e153ff0b8700765e719404fba65c.png"},7320:function(e,t,n){t.Z=n.p+"assets/images/mongo2-78f130e4392080887f7e30b2fab2ab05.png"},2599:function(e,t,n){t.Z=n.p+"assets/images/mongo3-2a1ad4a6f862ff20969df2d36081cd9b.png"},8326:function(e,t,n){t.Z=n.p+"assets/images/mongo4-9331f2a4bd4c3d65d0a8eb87dfe1ea6d.png"},3946:function(e,t,n){t.Z=n.p+"assets/images/mongo5-c81655a61d41431b78f60e7d0cbae04c.png"},7665:function(e,t,n){t.Z=n.p+"assets/images/mongo6-02d44207255249335e01ad135e946163.png"},9922:function(e,t,n){t.Z=n.p+"assets/images/mongo7-4d6aa99411c23c036f7af4159a7b5e3f.png"},6609:function(e,t,n){t.Z=n.p+"assets/images/mongo8-5fd520782576e20cdae904eba570e708.png"},7675:function(e,t,n){t.Z=n.p+"assets/images/mongo9-805a8c5e18ae0bf987c15c65dc6b22e7.png"}}]);