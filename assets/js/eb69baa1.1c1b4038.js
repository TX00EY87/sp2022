"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9505],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(n),p=o,m=c["".concat(s,".").concat(p)]||c[p]||h[p]||r;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6060:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return h}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),l=["components"],i={title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},s="Lecture",d={unversionedId:"lecture-11/lecture",id:"lecture-11/lecture",title:"Lecture",description:"Lecture Slides will be in OMA after the session.",source:"@site/docs/lecture-11/lecture.md",sourceDirName:"lecture-11",slug:"/lecture-11/lecture",permalink:"/sp2022/lecture-11/lecture",tags:[],version:"current",frontMatter:{title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},sidebar:"docs"},u={},h=[{value:"Node",id:"node",level:2},{value:"Installing Node",id:"installing-node",level:3},{value:"Running your first Node script",id:"running-your-first-node-script",level:4},{value:"package.json",id:"packagejson",level:3},{value:"npm",id:"npm",level:4},{value:"Using modules",id:"using-modules",level:3},{value:"Define own modules",id:"define-own-modules",level:3},{value:"Built-in modules",id:"built-in-modules",level:3},{value:"third-party modules",id:"third-party-modules",level:3},{value:"Node: an asynchronous world",id:"node-an-asynchronous-world",level:3},{value:"HTTPS",id:"https",level:3},{value:"routing",id:"routing",level:3},{value:"Express",id:"express",level:2},{value:"Installation",id:"installation",level:3},{value:"Routing",id:"routing-1",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Error-handling middleware",id:"error-handling-middleware",level:3},{value:"Morgan:",id:"morgan",level:3},{value:"Deno",id:"deno",level:2},{value:"Ref",id:"ref",level:2}],c={toc:h};function p(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lecture"},"Lecture"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Lecture Slides will be in OMA after the session."))),(0,r.kt)("h2",{id:"node"},"Node"),(0,r.kt)("h3",{id:"installing-node"},"Installing Node"),(0,r.kt)("p",null,"The official downloads page at ",(0,r.kt)("a",{parentName:"p",href:"http://nodejs.org/download/"},"http://nodejs.org/download/")," has a number of links for Windows, Mac, and Linux."),(0,r.kt)("h4",{id:"running-your-first-node-script"},"Running your first Node script"),(0,r.kt)("p",null,"To build the classic Hello World. Create a file called helloworld.js and put the following inside."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'//helloworld.js\nconsole.log("Hello, world!");\n')),(0,r.kt)("p",null,'You call the console.log function with the argument you want to print: the string "Hello, world!". '),(0,r.kt)("p",null,"To run, type "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node helloworld.js\n")),(0,r.kt)("h3",{id:"packagejson"},"package.json"),(0,r.kt)("p",null,"Every Node project sits in a folder, and at the root of every Node project there\u2019s a file called package.json. "),(0,r.kt)("p",null,"\u201cpackage dot json\u201d is a pretty simple JSON file that defines project metadata like the name of the project, its version, and its authors. It also defines the project\u2019s dependencies."),(0,r.kt)("h4",{id:"npm"},"npm"),(0,r.kt)("p",null,"When you install Node, you actually get two programs: Node and npm, an official helper for Node that helps you with your Node projects."),(0,r.kt)("p",null,"npm allows you to autogenerate your package.json file. You can create package.json by hand, but npm can do it for you."),(0,r.kt)("p",null,"In your new project directory, you can type ",(0,r.kt)("inlineCode",{parentName:"p"},"npm init"),". It will ask you a bunch of questions about your project\u2014project name, author, version\u2014and when it\u2019s finished, it will save a new package.json. npm can save you a bit of time when creating these package.json files."),(0,r.kt)("h3",{id:"using-modules"},"Using modules"),(0,r.kt)("p",null,"Most programming languages have a way of including the code in file A from inside file B so that you can split your code into multiple files. C and C++ have #include; Python has import. "),(0,r.kt)("p",null,"For most of its life, the JavaScript language didn\u2019t have an official way of doing this. Node wanted to solve this problem elegantly, and its developers implemented a standard module system called CommonJS. At its core, CommonJS lets you include code from one file in another."),(0,r.kt)("p",null,"There are three major components to this module system:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"requiring built-in modules, "),(0,r.kt)("li",{parentName:"ul"},"requiring third-party modules, and "),(0,r.kt)("li",{parentName:"ul"},"making your own modules. ")),(0,r.kt)("h3",{id:"define-own-modules"},"Define own modules"),(0,r.kt)("p",null,"Let\u2019s say you want a function that returns a random integer between 0 and 100. Without any module magic, that function might look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const MAX = 100;\n\nfunction randomInteger() {\n  return Math.floor(Math.random() * MAX);\n}\n")),(0,r.kt)("p",null,"This might be how you\u2019d write that function in a browser context. But in Node, you can\u2019t save this into a file and call it a day; you need to choose a variable to export, so that when other files require this one, they know what to grab. In this case, you\u2019ll be exporting randomInteger. Try saving this into a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"random-integer.js"),", as shown:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const MAX = 100;\n\nfunction randomInteger() {\n  return Math.floor(Math.random() * MAX);\n}\n\nmodule.exports = randomInteger;\n")),(0,r.kt)("p",null,"In this case, the variable you\u2019re exporting is a function. In this module, MAX is not exported, so that variable won\u2019t be available to anyone who requires this file. Nobody will be able to require it\u2014it\u2019ll stay private to the module."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"module.exports can be anything you want. Anything to which you can assign a variable can be assigned to module.exports. It\u2019s a function in this example, but it\u2019s often an object. It could even be a string or a number or an array if you\u2019d like."))),(0,r.kt)("p",null,"Now, let\u2019s say you want to use your new module. In the same directory as random-integer.js, save a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js"),", as shown"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const randomInteger= require("./random-integers")\n\nconsole.log(randomInteger())\nconsole.log(randomInteger())\nconsole.log(randomInteger())\n')),(0,r.kt)("p",null,"require is similar to keywords like import or include in other languages. require takes the name of a package as a string argument and returns a package. There\u2019s nothing special about the object that\u2019s returned\u2014it\u2019s often an object, but it could be a function or a string or a number. "),(0,r.kt)("h3",{id:"built-in-modules"},"Built-in modules"),(0,r.kt)("p",null,"Node has a number of built-in modules, ranging from filesystem access in a module called fs to utility functions in a built-in module called util. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: http module")),(0,r.kt)("p",null,"We can Build a web server with Node's built in http module."),(0,r.kt)("p",null,"Node\u2019s http module has various features (making requests to other servers, for instance) but we\u2019ll use its HTTP server component: a function called http.create-Server. This function takes a callback that\u2019s called every time a request comes into your server, and it returns a server object. The following listing contains a very simple server that sends \u201cHello world\u201d with every request (which you can save into myserver.js if you\u2019d like to run it)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const http = require("http");\n\nconst requestHandler= (request, response) => {\n  console.log(`request from ${request.url}`);\n  response.end("Hello World");\n}\n\nconst app = http.createServer(requestHandler);\n\napp.listen(3001);\n')),(0,r.kt)("p",null,"This code is split up into four chunks. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The first chunk requires the http module and puts it into a variable called http. "),(0,r.kt)("li",{parentName:"ul"},"Next, you define a request handler function.  These request handler functions take two arguments: an object that represents the request (often shortened to req) and an object that represents the response (often shortened to res). The request object has things like the URL that the browser requested (did they request the homepage or the about page?), or the type of browser visiting your page (called the user-agent), or things like that. You call methods on the response object and Node will package the bytes and send them across the internet."),(0,r.kt)("li",{parentName:"ul"},"The rest of the code points Node\u2019s built-in HTTP server at the request handler function and "),(0,r.kt)("li",{parentName:"ul"},"starts it on port 3001.")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The code above can be written as follow:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const http = require("http");\n\nconst app = http.createServer((request, response) => {\n  console.log(`request from ${request.url}`);  \n  response.writeHead(200, { "Content-Type": "text/plain" });\n  response.end("Hello World");\n});\n\nconst PORT = 3001;\napp.listen(PORT);\nconsole.log(`Server running on port ${PORT}`);\n')),(0,r.kt)("h3",{id:"third-party-modules"},"third-party modules"),(0,r.kt)("p",null,"Node has several built-in modules, but they\u2019re rarely enough; third-party packages are indispensable when making applications. "),(0,r.kt)("p",null,"From the root directory, run "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install someLibrary\n\n")),(0,r.kt)("p",null,"This command creates a folder called node_modules. Then it downloads the latest version of the library package and puts it into this new node_modules folder. Also npm install the dependencies.  "),(0,r.kt)("h3",{id:"node-an-asynchronous-world"},"Node: an asynchronous world"),(0,r.kt)("p",null,"Node follows the asynchronous model. A browser might request a 100 MB cat picture from your Node-powered web server. You begin to load this big photo from the hard disk. As far as you\u2019re concerned, the hard disk is an external resource, so you ask it for the file and then you can move on to other things while you wait for it to load."),(0,r.kt)("p",null,"While you\u2019re loading that file, a second request comes in. You don\u2019t have to wait for the first request to finish completely\u2014while you\u2019re waiting for the hard disk to finish what it was working on, you can start parsing the second request. Once again, Node is never really doing two things at once, but when an external resource is working on something, you\u2019re not held up waiting."),(0,r.kt)("p",null,"The two most common external resources you\u2019ll deal with in Express are"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Anything involving the filesystem \u2014Like reading and writing files from your hard drive"),(0,r.kt)("li",{parentName:"ul"},"Anything involving a network \u2014Like receiving requests, sending responses, or sending your own requests over the internet")),(0,r.kt)("h3",{id:"https"},"HTTPS"),(0,r.kt)("p",null,"Node also comes with a module called https. It\u2019s very similar to the http module, and creating a web server with it is almost identical. "),(0,r.kt)("h3",{id:"routing"},"routing"),(0,r.kt)("p",null,"When we try the code below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const http = require("http");\n\nconst requestHandler= (request, response) => {\n  console.log(`request from ${request.url}`);\n  response.end("Welcome");\n}\n\nconst app = http.createServer(requestHandler);\n\napp.listen(3001);\nconsole.log(`Server running on port 3001`);\n')),(0,r.kt)("p",null,"you\u2019ll also notice that something appears in your console every time you visit a page. Try visiting a few other URLs: http://localhost:3001/ or http://localhost:3001/hello/world or http://localhost:3001/what?is=anime. The output will change in the console, but your server won\u2019t do anything different and will always just say \u201cWelcome\u201d."),(0,r.kt)("p",null,"You could imagine parsing the request URL. You might do something like the following listing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const http = require("http");\n\nconst requestHandler = (request, response) => {\n  console.log(`request from ${request.url}`);\n  if (request.url === "/") {\n    response.end("Welcome");\n  } else if (request.url === "/about") {\n    response.end("Welcome to about");\n  } else {\n    response.end("Error: file not found");\n  }\n};\n\nconst app = http.createServer(requestHandler);\n\napp.listen(3001);\nconsole.log(`Server running on port 3001`);\n')),(0,r.kt)("p",null,"You could imagine building your entire site in this one request handler function. For very small sites, this might be easy, but you could see this function getting huge and unwieldy pretty quickly. You might want a framework to help you clean up this HTTP server\u2014things could get messy! "),(0,r.kt)("p",null,"That\u2019s where Express will come in."),(0,r.kt)("h2",{id:"express"},"Express"),(0,r.kt)("p",null,"Express is an abstraction layer on top of Node\u2019s built-in HTTP server. You could, in theory, write everything with plain vanilla Node and never touch Express. But Express smooths out a lot of the difficult parts."),(0,r.kt)("p",null,"At a high level, Express provides four major features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Routing: a lot like middleware, but the functions are called only when you visit a specific URL with a specific HTTP method. For example, you could only run a request handler when the browser visits yourwebsite.com/about."),(0,r.kt)("li",{parentName:"ul"},"Middleware \u2014In contrast to vanilla Node, where your requests flow through only one function, Express has a middleware stack, which is effectively an array of functions."),(0,r.kt)("li",{parentName:"ul"},"Extensions to request and response objects \u2014Express extends the request and response objects with extra methods and properties for developer convenience."),(0,r.kt)("li",{parentName:"ul"},"Views \u2014Views allow you to dynamically render HTML. This both allows you to change the HTML on the fly and to write the HTML in other languages.")),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install Express and save it to your package.json:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"npm install express\n")),(0,r.kt)("p",null,"Running this command will find Express in the directory of third-party Node packages and fetch the latest version. It will put it in a folder called node_modules. Also this will save it under the dependencies key of package.json. "),(0,r.kt)("p",null,"Now that we have installed it, we can use the express module from your code, as shown in the listing that follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\n\napp.get("/", (request, response) => {\n  response.send("<h1>Hello World!</h1>");\n});\n\napp.listen(3001, () => {\n  console.log(`Server running on port 3001`);\n});\n')),(0,r.kt)("h3",{id:"routing-1"},"Routing"),(0,r.kt)("p",null,"Routing is a way to map requests to specific handlers depending on their URL and HTTP verb. You could imagine having a homepage and an about page and a 404 page. Routing can do all of this. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\n\nlet notes = [\n  {\n    id: 1,\n    content: "HTML is easy",\n    date: "2022-05-30T17:30:31.098Z",\n    important: true,\n  },\n  {\n    id: 2,\n    content: "Browser can execute only Javascript",\n    date: "2022-05-30T18:39:34.091Z",\n    important: false,\n  },\n];\n\napp.get("/", (request, response) => {\n  response.send("<h1>Welcome!</h1>");\n});\n\napp.get("/api/notes", (request, response) => {\n  response.json(notes);\n});\n\nconst PORT = 3001;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n\n')),(0,r.kt)("p",null,"When we make changes to the application's code we have to restart the application in order to see the changes. We restart the application by first shutting it down by typing Ctrl+C and then restarting the application. "),(0,r.kt)("p",null,"We can use nodemon to watch the files in the directory in which it was started. If any files change, nodemon will automatically restart your node application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev nodemon\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"nodemon restarts the server as you make changes to the server.js file. That is, your endpoints are being updated. This will not cause your client to reload. As you are simply navigating to the endpoint that you are creating within the browser, you will not see the changes reflected without refreshing."))),(0,r.kt)("h3",{id:"middleware"},"Middleware"),(0,r.kt)("p",null,"One of Express\u2019s biggest features is called middleware. Middleware is very similar to the request handlers we saw in vanilla Node (accepting a request and sending back a response), but middleware has one important difference: rather than having just one handler, middleware allows for many to happen in sequence."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How middleware works at a high level")),(0,r.kt)("p",null,"In Node\u2019s HTTP server, every request goes through one big function. This looks like the following listing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function requestHandler(request, response) {\n  console.log("In comes a request to: " + request.url);\n  response.end("Hello, world!");\n}\n')),(0,r.kt)("p",null,"In a world without middleware, you\u2019d find yourself having one master request function that handles everything. Every request goes through just one request handler function, which eventually generates the response. That\u2019s not to say that the master handler function can\u2019t call other functions, but at the end of the day, the master function responds to every request."),(0,r.kt)("p",null,"With middleware, rather than having your request pass through one function you write, it passes through an array of functions you write called a middleware stack. "),(0,r.kt)("p",null,"Every function in this stack takes three arguments. The first two are req and res from before. They\u2019re given to you by Node, although Express decorates them with a few convenience features."),(0,r.kt)("p",null,"The third argument to each of these functions is itself a function, conventionally called next. When next is called, Express will go on to the next function in the stack. Eventually, one of these functions in the stack must call res.end, which will end the request. "),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In Express, you can also call some other methods like res.send or res.send-File, but these call res.end internally."),(0,r.kt)("p",{parentName:"div"},"You can call res.end in any of the functions in the middleware stack, but you must only do it once or you\u2019ll get an error."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const requestLogger = (request, response, next) => {\n  console.log("Method:", request.method);\n  console.log("Path:  ", request.path);\n  console.log("Body:  ", request.body);\n  console.log("---");\n  next();\n};\n\napp.use(requestLogger);\n')),(0,r.kt)("h3",{id:"error-handling-middleware"},"Error-handling middleware"),(0,r.kt)("p",null,"There are two types of middleware. The first type take three arguments (sometimes two when next is discarded). Most of the time, your app is in normal mode, which looks only at these middleware functions and skips the other."),(0,r.kt)("p",null,"The second kind  is the error-handling middleware. When your app is in error mode, all regular middleware is ignored and Express will execute only error-handling middleware functions. To enter error mode, simply call next with an argument. It\u2019s convention to call it with an error object."),(0,r.kt)("p",null,"These middleware functions take four arguments instead of two or three. The first one is the error (the argument passed into next), and the remainder are the three from before: req, res, and next. You can do anything you want in this middleware. When you\u2019re done, it\u2019s just like other middleware: you can call res.end or next. Calling next with no arguments will exit error mode and move onto the next normal middleware; calling it with an argument will continue onto the next error-handling middleware if one exists."),(0,r.kt)("p",null,"Let\u2019s say you have four middleware functions in a row. The first two are normal, the third handles errors, and the fourth is normal. If no errors happen, it\u2019ll be as if the error-handling middleware never existed. To reiterate more precisely, \u201cno errors\u201d means \u201cnext was never called with any arguments.\u201d If an error does happen, then Express will skip over all other middleware until the first error-handling middleware in the stack. "),(0,r.kt)("p",null,"While not enforced, error-handling middleware is conventionally placed at the end of your middleware stack, after all the normal middleware has been added. This is because you want to catch any errors that come cascading down from earlier in the stack."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"No catching")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Express\u2019s error-handling middleware does not handle errors that are thrown with the throw keyword, only when you call next with an argument."))),(0,r.kt)("h3",{id:"morgan"},"Morgan:"),(0,r.kt)("p",null,"A common piece of advice in software development is \u201cdon\u2019t reinvent the wheel.\u201d If someone else has already solved your problem, it\u2019s often a good idea to take their solution and move on to better things."),(0,r.kt)("p",null,"That\u2019s what you\u2019ll do with your logging middleware. You\u2019ll remove the hard work you put in (all five lines) and use a piece of middleware called Morgan (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/expressjs/morgan"},"https://github.com/expressjs/morgan"),"). It\u2019s not baked into core Express, but it is maintained by the Express team."),(0,r.kt)("p",null,"Morgan describes itself as \u201crequest logger middleware,\u201d which is exactly what you want. Run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install morgan")," to install the latest version of the Morgan package. You\u2019ll see it inside a new folder inside of node_modules, and it\u2019ll also appear in package.json."),(0,r.kt)("p",null,"To use Morgan instead of your logging middleware:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'npm install morgan\nconst morgan = require("morgan");\napp.use(morgan("tiny"));\n//or\napp.use(morgan("short"));\n')),(0,r.kt)("h2",{id:"deno"},"Deno"),(0,r.kt)("p",null,"Deno is a modern JavaScript runtime, competing with Node.js, that promises features like secure I/O and built-in TypeScript support. "),(0,r.kt)("p",null,"Ryan Dahl, the original author of Node.js,  ",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=M3BM9TB-8yA"},"talked")," about many problems related to Node. This includes things like Node's failure to embrace web standards, security, Node's way of compiling native modules (GYP), and npm. "),(0,r.kt)("p",null,"Ryan revealed Deno, a new project that fixed many of the problems mentioned earlier, along with extra advantages like built-in TypeScript support. "),(0,r.kt)("p",null,"Deno was initially written in Go but later switched to Rust."),(0,r.kt)("h2",{id:"ref"},"Ref"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Express in Action Evan Hahn, Evan M. Hahn"),(0,r.kt)("li",{parentName:"ul"},"Node.js in Action"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://byteofdev.com/posts/deno/"},"State of the Web: Deno")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=M3BM9TB-8yA"},'"Ten things I regret about Node"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://thenewstack.io/how-node-js-is-addressing-the-challenge-of-ryan-dahls-deno/"},"How Node.js Is Addressing the Challenge of Ryan Dahl\u2019s Deno"))))}p.isMDXComponent=!0}}]);