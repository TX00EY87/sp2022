"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1590],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=o,m=h["".concat(i,".").concat(d)]||h[d]||u[d]||r;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3499:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),l=["components"],s={title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},i=void 0,p={unversionedId:"lecture-06/post-lecture",id:"lecture-06/post-lecture",title:"Post Lecture Reading",description:"Recommended videos",source:"@site/docs/lecture-06/post-lecture.md",sourceDirName:"lecture-06",slug:"/lecture-06/post-lecture",permalink:"/sp2022/lecture-06/post-lecture",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},sidebar:"docs"},c={},u=[{value:"Recommended videos",id:"recommended-videos",level:2},{value:"Introduction to React",id:"introduction-to-react",level:2},{value:"Component",id:"component",level:3},{value:"JSX",id:"jsx",level:3},{value:"Multiple components",id:"multiple-components",level:3},{value:"props: passing data to components",id:"props-passing-data-to-components",level:3},{value:"Some notes",id:"some-notes",level:3},{value:"JavaScript",id:"javascript",level:2},{value:"Variables",id:"variables",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Objects",id:"objects",level:3},{value:"Functions",id:"functions",level:3},{value:"Object methods and &quot;this&quot;",id:"object-methods-and-this",level:3},{value:"Classes",id:"classes",level:3},{value:"JavaScript materials",id:"javascript-materials",level:3},{value:"Reference",id:"reference",level:2}],h={toc:u};function d(e){var t=e.components,s=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"recommended-videos"},"Recommended videos"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://egghead.io/lessons/react-a-beginners-guide-to-react-introduction"},"egghead.io: Videos 1 to 7 (~30min)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/playlist?list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG"},"React Tutorial: Videos 1 to 4 (~30min)"))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"}," ",(0,r.kt)("strong",{parentName:"p"},"Credits"),": The post lecture material has been written by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mluukkai"},"Matti Luukkainen")," from ",(0,r.kt)("a",{parentName:"p",href:"https://fullstackopen.com/en/"},"University of Helsinki"),". The material is licensed under the Creative Commons BY-NC-SA 3.0 License."))),(0,r.kt)("h2",{id:"introduction-to-react"},"Introduction to React"),(0,r.kt)("p",null,"We will now start getting familiar with probably the most important topic of this course, namely the ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React"),"-library. Let's start off with making a simple React application as well as getting to know the core concepts of React."),(0,r.kt)("p",null,"The easiest way to get started by far is by using a tool called ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/create-react-app"},"create-react-app"),". It is possible (but not necessary) to install ",(0,r.kt)("i",null,"create-react-app")," on your machine if the ",(0,r.kt)("i",null,"npm")," tool that was installed along with Node has a version number of at least ",(0,r.kt)("i",null,"5.3"),"."),(0,r.kt)("p",null,"Let's create an application called ",(0,r.kt)("i",null,"part1")," and navigate to its directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app part1\ncd part1\n")),(0,r.kt)("p",null,"The application is run as follows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n")),(0,r.kt)("p",null,"By default, the application runs in localhost port 3000 with the address ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")),(0,r.kt)("p",null,"Your default browser should launch automatically. Open the browser console ",(0,r.kt)("strong",{parentName:"p"},"immediately"),". Also open a text editor so that you can view the code as well as the web-page at the same time on the screen:"),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",src:n(2412).Z,width:"1684",height:"1214"})),(0,r.kt)("p",null,"The code of the application resides in the ",(0,r.kt)("i",null,"src")," folder. Let's simplify the default code such that the contents of the file ",(0,r.kt)("i",null,"index.js")," look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n")),(0,r.kt)("p",null,"and file ",(0,r.kt)("i",null,"App.js")," looks like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => (\n  <div>\n    <p>Hello world</p>\n  </div>\n)\n\nexport default App\n")),(0,r.kt)("p",null,"  The files ",(0,r.kt)("i",null,"App.css"),", ",(0,r.kt)("i",null,"App.test.js"),", ",(0,r.kt)("i",null,"index.css"),", ",(0,r.kt)("i",null,"logo.svg"),", ",(0,r.kt)("i",null,"setupTests.js")," and ",(0,r.kt)("i",null,"reportWebVitals.js")," may be deleted as they are not needed in our application right now."),(0,r.kt)("h3",{id:"component"},"Component"),(0,r.kt)("p",null,"The file ",(0,r.kt)("i",null,"App.js")," now defines a ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/components-and-props.html"},"React component")," with the name ",(0,r.kt)("i",null,"App"),". The command on the final line of file ",(0,r.kt)("i",null,"index.js")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"ReactDOM.render(<App />, document.getElementById('root'))\n")),(0,r.kt)("p",null,"renders its contents into the ",(0,r.kt)("i",null,"div"),"-element, defined in the file ",(0,r.kt)("i",null,"public/index.html"),", having the ",(0,r.kt)("i",null,"id")," value 'root'."),(0,r.kt)("p",null,"By default, the file ",(0,r.kt)("i",null,"public/index.html")," doesn't contain any HTML markup that is visible to us in the browser. You can try adding some HTML into the file. However, when using React, all content that needs to be rendered is usually defined as React components."),(0,r.kt)("p",null,"Let's take a closer look at the code defining the component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => (\n  <div>\n    <p>Hello world</p>\n  </div>\n)\n")),(0,r.kt)("p",null,"As you probably guessed, the component will be rendered as a ",(0,r.kt)("i",null,"div"),"-tag, which wraps a ",(0,r.kt)("i",null,"p"),"-tag containing the text ",(0,r.kt)("i",null,"Hello world"),"."),(0,r.kt)("p",null,"Technically the component is defined as a JavaScript function. The following is a function (which does not receive any parameters):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"() => (\n  <div>\n    <p>Hello world</p>\n  </div>\n)\n")),(0,r.kt)("p",null,"The function is then assigned to a constant variable ",(0,r.kt)("i",null,"App"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const App = ...\n")),(0,r.kt)("p",null,"There are a few ways to define functions in JavaScript. Here we will use ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"},"arrow functions"),", which are described in a newer version of JavaScript known as ",(0,r.kt)("a",{parentName:"p",href:"http://es6-features.org/#Constants"},"ECMAScript 6"),", also called ES6."),(0,r.kt)("p",null,"Because the function consists of only a single expression we have used a shorthand, which represents this piece of code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  return (\n    <div>\n      <p>Hello world</p>\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"In other words, the function returns the value of the expression."),(0,r.kt)("p",null,"The function defining the component may contain any kind of JavaScript code. Modify your component to be as follows and observe what happens in the console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  console.log('Hello from component')\n  return (\n    <div>\n      <p>Hello world</p>\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"It is also possible to render dynamic content inside of a component."),(0,r.kt)("p",null,"Modify the component as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const now = new Date()\n  const a = 10\n  const b = 20\n\n  return (\n    <div>\n      <p>Hello world, it is {now.toString()}</p>\n      <p>\n        {a} plus {b} is {a + b}\n      </p>\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"Any JavaScript code within the curly braces is evaluated and the result of this evaluation is embedded into the defined place in the HTML produced by the component."),(0,r.kt)("h3",{id:"jsx"},"JSX"),(0,r.kt)("p",null,"It seems like React components are returning HTML markup. However, this is not the case. The layout of React components is mostly written using ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/introducing-jsx.html"},"JSX"),". Although JSX looks like HTML, we are actually dealing with a way to write JavaScript. Under the hood, JSX returned by React components is compiled into JavaScript."),(0,r.kt)("p",null,"After compiling, our application looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const now = new Date()\n  const a = 10\n  const b = 20\n  return React.createElement(\n    'div',\n    null,\n    React.createElement(\n      'p', null, 'Hello world, it is ', now.toString()\n    ),\n    React.createElement(\n      'p', null, a, ' plus ', b, ' is ', a + b\n    )\n  )\n}\n")),(0,r.kt)("p",null,"The compiling is handled by ",(0,r.kt)("a",{parentName:"p",href:"https://babeljs.io/repl/"},"Babel"),". Projects created with ",(0,r.kt)("em",{parentName:"p"},"create-react-app")," are configured to compile automatically. We will learn more about this topic in later in  this course."),(0,r.kt)("p",null,'It is also possible to write React as "pure JavaScript" without using JSX. Although, nobody with a sound mind would actually do so.'),(0,r.kt)("p",null,"In practice, JSX is much like HTML with the distinction that with JSX you can easily embed dynamic content by writing appropriate JavaScript within curly braces. The idea of JSX is quite similar to many templating languages, such as Thymeleaf used along with Java Spring, which are used on servers."),(0,r.kt)("p",null,'JSX is "',(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction"},"XML"),'-like", which means that every tag needs to be closed. For example, a newline is an empty element, which in HTML can be written as follows:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<br>\n")),(0,r.kt)("p",null,"but when writing JSX, the tag needs to be closed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<br />\n")),(0,r.kt)("h3",{id:"multiple-components"},"Multiple components"),(0,r.kt)("p",null,"Let's modify the file ",(0,r.kt)("i",null,"App.js")," as follows (NB: import at the top of the file and export at the bottom are left out in these ",(0,r.kt)("i",null,"examples"),", now and in the future. They are still needed for the code to work):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"\nconst Hello = () => {\n  return (\n    <div>\n      <p>Hello world</p>\n    </div>\n  )\n}\n\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello /> \n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"We have defined a new component ",(0,r.kt)("i",null,"Hello")," and used it inside the component ",(0,r.kt)("i",null,"App"),". Naturally, a component can be used multiple times:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello />\n      \n      <Hello />\n      <Hello />\n      \n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"Writing components with React is easy, and by combining components, even a more complex application can be kept fairly maintainable. Indeed, a core philosophy of React is composing applications from many specialized reusable components."),(0,r.kt)("p",null,"Another strong convention is the idea of a ",(0,r.kt)("i",null,"root component")," called ",(0,r.kt)("i",null,"App")," at the top of the component tree of the application. Nevertheless, there are situations where the component ",(0,r.kt)("i",null,"App")," is not exactly the root, but is wrapped within an appropriate utility component."),(0,r.kt)("h3",{id:"props-passing-data-to-components"},"props: passing data to components"),(0,r.kt)("p",null,"It is possible to pass data to components using so called ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/components-and-props.html"},"props"),"."),(0,r.kt)("p",null,"Let's modify the component ",(0,r.kt)("i",null,"Hello")," as follows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const Hello = (props) => { \n  return (\n    <div>\n      <p>Hello {props.name}</p> \n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"Now the function defining the component has a parameter ",(0,r.kt)("i",null,"props"),'. As an argument, the parameter receives an object, which has fields corresponding to all the "props" the user of the component defines.'),(0,r.kt)("p",null,"The props are defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const App = () => {\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello name="George" /> \n      <Hello name="Daisy" /> \n    </div>\n  )\n}\n')),(0,r.kt)("p",null,'There can be an arbitrary number of props and their values can be "hard coded" strings or results of JavaScript expressions. If the value of the prop is achieved using JavaScript it must be wrapped with curly braces.'),(0,r.kt)("p",null,"Let's modify the code so that the component ",(0,r.kt)("i",null,"Hello")," uses two props:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const Hello = (props) => {\n  return (\n    <div>\n      <p>\n        Hello {props.name}, you are {props.age} years old \n      </p>\n    </div>\n  )\n}\n\nconst App = () => {\n  const name = 'Peter' \n  const age = 10       \n\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello name=\"Maya\" age={26 + 10} /> \n      <Hello name={name} age={age} />     \n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"The props sent by the component ",(0,r.kt)("i",null,"App")," are the values of the variables, the result of the evaluation of the sum expression and a regular string."),(0,r.kt)("h3",{id:"some-notes"},"Some notes"),(0,r.kt)("p",null,"React has been configured to generate quite clear error messages. Despite this, you should, at least in the beginning, advance in ",(0,r.kt)("strong",{parentName:"p"},"very small steps")," and make sure that every change works as desired."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The console should always be open"),". If the browser reports errors, it is not advisable to continue writing more code, hoping for miracles. You should instead try to understand the cause of the error and, for example, go back to the previous working state:"),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",src:n(7503).Z,width:"2140",height:"656"})),(0,r.kt)("p",null,"It is good to remember that in React it is possible and worthwhile to write ",(0,r.kt)("em",null,"console.log()")," commands (which print to the console) within your code."),(0,r.kt)("p",null,"Also keep in mind that ",(0,r.kt)("strong",{parentName:"p"},"React component names must be capitalized"),". If you try defining a component as follows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const footer = () => {\n  return (\n    <div>\n      greeting app created by <a href="https://github.com/mluukkai">mluukkai</a>\n    </div>\n  )\n}\n')),(0,r.kt)("p",null,"and use it like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const App = () => {\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello name="Maya" age={26 + 10} />\n      <footer /> \n    </div>\n  )\n}\n')),(0,r.kt)("p",null,"the page is not going to display the content defined within the Footer component, and instead React only creates an empty ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer"},"footer")," element, i.e. the built-in HTML element instead of the custom React element of the same name. If you change the first letter of the component name to a capital letter, then React creates a ",(0,r.kt)("i",null,"div"),"-element defined in the Footer component, which is rendered on the page."),(0,r.kt)("p",null,"Note that the content of a React component (usually) needs to contain ",(0,r.kt)("strong",{parentName:"p"},"one root element"),". If we, for example, try to define the component ",(0,r.kt)("i",null,"App")," without the outermost ",(0,r.kt)("i",null,"div"),"-element:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const App = () => {\n  return (\n    <h1>Greetings</h1>\n    <Hello name="Maya" age={26 + 10} />\n    <Footer />\n  )\n}\n')),(0,r.kt)("p",null,"the result is an error message."),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",src:n(986).Z,width:"1420",height:"1060"})),(0,r.kt)("p",null,"Using a root element is not the only working option. An ",(0,r.kt)("i",null,"array")," of components is also a valid solution:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const App = () => {\n  return [\n    <h1>Greetings</h1>,\n    <Hello name="Maya" age={26 + 10} />,\n    <Footer />\n  ]\n}\n')),(0,r.kt)("p",null,"However, when defining the root component of the application this is not a particularly wise thing to do, and it makes the code look a bit ugly."),(0,r.kt)("p",null,'Because the root element is stipulated, we have "extra" div-elements in the DOM-tree. This can be avoided by using ',(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/fragments.html#short-syntax"},"fragments"),", i.e. by wrapping the elements to be returned by the component with an empty element:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const name = 'Peter'\n  const age = 10\n\n  return (\n    <>\n      <h1>Greetings</h1>\n      <Hello name=\"Maya\" age={26 + 10} />\n      <Hello name={name} age={age} />\n      <Footer />\n    </>\n  )\n}\n")),(0,r.kt)("p",null,"It now compiles successfully, and the DOM generated by React no longer contains the extra div-element."),(0,r.kt)("h2",{id:"javascript"},"JavaScript"),(0,r.kt)("p",null,"During the course, we have a goal and a need to learn a sufficient amount of JavaScript in addition to web development."),(0,r.kt)("p",null,"JavaScript has advanced rapidly in the last few years and in this course we use features from the newer versions. The official name of the JavaScript standard is ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ECMAScript"},"ECMAScript"),". At this moment, the latest version is the one released in June of 2021 with the name ",(0,r.kt)("a",{parentName:"p",href:"https://www.ecma-international.org/ecma-262/"},"ECMAScript\xae2021"),", otherwise known as ES12."),(0,r.kt)("p",null,"Browsers do not yet support all of JavaScript's newest features. Due to this fact, a lot of code run in browsers has been ",(0,r.kt)("i",null,"transpiled")," from a newer version of JavaScript to an older, more compatible version."),(0,r.kt)("p",null,"Today, the most popular way to do the transpiling is by using ",(0,r.kt)("a",{parentName:"p",href:"https://babeljs.io/"},"Babel"),". Transpilation is automatically configured in React applications created with create-react-app. We will take a closer look at the configuration of the transpilation in another lecture."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/en/"},"Node.js")," is a JavaScript runtime environment based on Google's ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/v8/"},"Chrome V8")," JavaScript engine and works practically anywhere - from servers to mobile phones. Let's practice writing some JavaScript using Node. It is expected that the version of Node.js installed on your machine is at least version ",(0,r.kt)("i",null,"16.13.2"),". The latest versions of Node already understand the latest versions of JavaScript, so the code does not need to be transpiled."),(0,r.kt)("p",null,"The code is written into files ending with ",(0,r.kt)("i",null,".js")," that are run by issuing the command ",(0,r.kt)("em",null,"node name","_","of","_","file.js")),(0,r.kt)("p",null,"It is also possible to write JavaScript code into the Node.js console, which is opened by typing ",(0,r.kt)("em",{parentName:"p"},"node")," in the command-line, as well as into the browser's developer tool console. ",(0,r.kt)("a",{parentName:"p",href:"http://kangax.github.io/compat-table/es2016plus/"},"The newest revisions of Chrome handle the newer features of JavaScript pretty well")," without transpiling the code. Alternatively you can use a tool like ",(0,r.kt)("a",{parentName:"p",href:"https://jsbin.com/?js,console"},"JS Bin"),"."),(0,r.kt)("p",null,"JavaScript is sort of reminiscent, both in name and syntax, to Java. But when it comes to the core mechanism of the language they could not be more different. Coming from a Java background, the behavior of JavaScript can seem a bit alien, especially if one does not make the effort to look up its features."),(0,r.kt)("p",null,'In certain circles it has also been popular to attempt "simulating" Java features and design patterns in JavaScript. We do not recommend doing this as the languages and respective ecosystems are ultimately very different.'),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("p",null,"In JavaScript there are a few ways to go about defining variables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const x = 1\nlet y = 5\n\nconsole.log(x, y)   // 1, 5 are printed\ny += 10\nconsole.log(x, y)   // 1, 15 are printed\ny = 'sometext'\nconsole.log(x, y)   // 1, sometext are printed\nx = 4               // causes an error\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"},"const")," does not actually define a variable but a ",(0,r.kt)("i",null,"constant")," for which the value can no longer be changed. On the other hand ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"},"let")," defines a normal variable."),(0,r.kt)("p",null,"In the example above, we also see that the type of the data assigned to the variable can change during execution. At the start ",(0,r.kt)("em",{parentName:"p"},"y")," stores an integer and at the end a string."),(0,r.kt)("p",null,"It is also possible to define variables in JavaScript using the keyword ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var"},"var"),". var was, for a long time, the only way to define variables. const and let were only recently added in version ES6. In specific situations, var works in a different way compared to variable definitions in most languages - see ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/craft-academy/javascript-variables-should-you-use-let-var-or-const-394f7645c88f"},"JavaScript Variables - Should You Use let, var or const? on Medium")," or ",(0,r.kt)("a",{parentName:"p",href:"http://www.jstips.co/en/javascript/keyword-var-vs-let/"},"Keyword: var vs. let on JS Tips")," for more information. During this course the use of var is ill-advised and you should stick with using const and let!\nYou can find more on this topic on YouTube - e.g. ",(0,r.kt)("a",{parentName:"p",href:"https://youtu.be/sjyJBL5fkp8"},"var, let and const - ES6 JavaScript Features")),(0,r.kt)("h3",{id:"arrays"},"Arrays"),(0,r.kt)("p",null,"An ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"},"array")," and a couple of examples of its use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const t = [1, -1, 3]\n\nt.push(5)\n\nconsole.log(t.length) // 4 is printed\nconsole.log(t[1])     // -1 is printed\n\nt.forEach(value => {\n  console.log(value)  // numbers 1, -1, 3, 5 are printed, each to own line\n})                    \n")),(0,r.kt)("p",null,"Notable in this example is the fact that the contents of the array can be modified even though it is defined as a ",(0,r.kt)("em",{parentName:"p"},"const"),". Because the array is an object, the variable always points to the same object. However, the content of the array changes as new items are added to it."),(0,r.kt)("p",null,"One way of iterating through the items of the array is using ",(0,r.kt)("em",{parentName:"p"},"forEach")," as seen in the example. ",(0,r.kt)("em",{parentName:"p"},"forEach")," receives a ",(0,r.kt)("i",null,"function")," defined using the arrow syntax as a parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"value => {\n  console.log(value)\n}\n")),(0,r.kt)("p",null,"forEach calls the function ",(0,r.kt)("i",null,"for each of the items in the array"),", always passing the individual item as an argument. The function as the argument of forEach may also receive ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"},"other arguments"),"."),(0,r.kt)("p",null,"In the previous example, a new item was added to the array using the method ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push"},"push"),". When using React, techniques from functional programming are often used. One characteristic of the functional programming paradigm is the use of ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Immutable_object"},"immutable")," data structures. In React code, it is preferable to use the method ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"},"concat"),", which does not add the item to the array, but creates a new array in which the content of the old array and the new item are both included."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const t = [1, -1, 3]\n\nconst t2 = t.concat(5)\n\nconsole.log(t)  // [1, -1, 3] is printed\nconsole.log(t2) // [1, -1, 3, 5] is printed\n")),(0,r.kt)("p",null,"The method call ",(0,r.kt)("em",{parentName:"p"},"t.concat(5)")," does not add a new item to the old array but returns a new array which, besides containing the items of the old array, also contains the new item."),(0,r.kt)("p",null,"There are plenty of useful methods defined for arrays. Let's look at a short example of using the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"},"map")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const t = [1, 2, 3]\n\nconst m1 = t.map(value => value * 2)\nconsole.log(m1)   // [2, 4, 6] is printed\n")),(0,r.kt)("p",null,"Based on the old array, map creates a ",(0,r.kt)("i",null,"new array"),", for which the function given as a parameter is used to create the items. In the case of this example the original value is multiplied by two."),(0,r.kt)("p",null,"Map can also transform the array into something completely different:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const m2 = t.map(value => '<li>' + value + '</li>')\nconsole.log(m2)  \n// [ '<li>1</li>', '<li>2</li>', '<li>3</li>' ] is printed\n")),(0,r.kt)("p",null,"Here an array filled with integer values is transformed into an array containing strings of HTML using the map method. We will see that map is used quite frequently in React."),(0,r.kt)("h3",{id:"objects"},"Objects"),(0,r.kt)("p",null,"There are a few different ways of defining objects in JavaScript. One very common method is using ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Object_literals"},"object literals"),", which happens by listing its properties within braces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const object1 = {\n  name: 'Arto Hellas',\n  age: 35,\n  education: 'PhD',\n}\n\nconst object2 = {\n  name: 'Full Stack web application development',\n  level: 'intermediate studies',\n  size: 5,\n}\n\nconst object3 = {\n  name: {\n    first: 'Dan',\n    last: 'Abramov',\n  },\n  grades: [2, 3, 5, 3],\n  department: 'Stanford University',\n}\n")),(0,r.kt)("p",null,"The values of the properties can be of any type, like integers, strings, arrays, objects..."),(0,r.kt)("p",null,'The properties of an object are referenced by using the "dot" notation, or by using brackets:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"console.log(object1.name)         // Arto Hellas is printed\nconst fieldName = 'age' \nconsole.log(object1[fieldName])    // 35 is printed\n")),(0,r.kt)("p",null,"You can also add properties to an object on the fly by either using dot notation or brackets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"object1.address = 'Helsinki'\nobject1['secret number'] = 12341\n")),(0,r.kt)("p",null,"The latter of the additions has to be done by using brackets, because when using dot notation, ",(0,r.kt)("i",null,"secret number")," is not a valid property name because of the space character."),(0,r.kt)("p",null,"Naturally, objects in JavaScript can also have methods. However, during this course we do not need to define any objects with methods of their own. This is why they are only discussed briefly during the course."),(0,r.kt)("p",null,"Objects can also be defined using so-called constructor functions, which results in a mechanism reminiscent of many other programming languages, e.g. Java's classes. Despite this similarity, JavaScript does not have classes in the same sense as object-oriented programming languages. There has been, however, an addition of the ",(0,r.kt)("i",null,"class syntax")," starting from version ES6, which in some cases helps structure object-oriented classes."),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("p",null,"We have already become familiar with defining arrow functions. The complete process, without cutting corners, to defining an arrow function is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sum = (p1, p2) => {\n  console.log(p1)\n  console.log(p2)\n  return p1 + p2\n}\n")),(0,r.kt)("p",null,"and the function is called as can be expected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const result = sum(1, 5)\nconsole.log(result)\n")),(0,r.kt)("p",null,"If there is just a single parameter, we can exclude the parentheses from the definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const square = p => {\n  console.log(p)\n  return p * p\n}\n")),(0,r.kt)("p",null,"If the function only contains a single expression then the braces are not needed. In this case the function only returns the result of its only expression. Now, if we remove console printing, we can further shorten the function definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const square = p => p * p\n")),(0,r.kt)("p",null,"This form is particularly handy when manipulating arrays - e.g. when using the map method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const t = [1, 2, 3]\nconst tSquared = t.map(p => p * p)\n// tSquared is now [1, 4, 9]\n")),(0,r.kt)("p",null,"The arrow function feature was added to JavaScript only a couple of years ago, with version ",(0,r.kt)("a",{parentName:"p",href:"http://es6-features.org/"},"ES6"),". Prior to this the only way to define functions was by using the keyword ",(0,r.kt)("em",{parentName:"p"},"function"),"."),(0,r.kt)("p",null,"There are two ways to reference the function; one is giving a name in a ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function"},"function declaration"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function product(a, b) {\n  return a * b\n}\n\nconst result = product(2, 6)\n// result is now 12\n")),(0,r.kt)("p",null,"The other way to define the function is using a ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"},"function expression"),". In this case there is no need to give the function a name and the definition may reside among the rest of the code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const average = function(a, b) {\n  return (a + b) / 2\n}\n\nconst result = average(2, 5)\n// result is now 3.5\n")),(0,r.kt)("p",null,"During this course we will define all functions using the arrow syntax."),(0,r.kt)("h3",{id:"object-methods-and-this"},'Object methods and "this"'),(0,r.kt)("p",null,"Due to the fact that during this course we are using a version of React containing React Hooks we have no need for defining objects with methods. ",(0,r.kt)("strong",{parentName:"p"},"The contents of this chapter are not relevant to the course")," but are certainly in many ways good to know. In particular when using older versions of React one must understand the topics of this chapter."),(0,r.kt)("p",null,"Arrow functions and functions defined using the ",(0,r.kt)("em",{parentName:"p"},"function")," keyword vary substantially when it comes to how they behave with respect to the keyword ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"},"this"),", which refers to the object itself."),(0,r.kt)("p",null,"We can assign methods to an object by defining properties that are functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const arto = {\n  name: 'Arto Hellas',\n  age: 35,\n  education: 'PhD',\n  \n  greet: function() {\n    console.log('hello, my name is ' + this.name)\n  },\n  \n}\n\narto.greet()  // \"hello, my name is Arto Hellas\" gets printed\n")),(0,r.kt)("p",null,"Methods can be assigned to objects even after the creation of the object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const arto = {\n  name: 'Arto Hellas',\n  age: 35,\n  education: 'PhD',\n  greet: function() {\n    console.log('hello, my name is ' + this.name)\n  },\n}\n\n\narto.growOlder = function() {\n  this.age += 1\n}\n\n\nconsole.log(arto.age)   // 35 is printed\narto.growOlder()\nconsole.log(arto.age)   // 36 is printed\n")),(0,r.kt)("p",null,"Let's slightly modify the object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const arto = {\n  name: 'Arto Hellas',\n  age: 35,\n  education: 'PhD',\n  greet: function() {\n    console.log('hello, my name is ' + this.name)\n  },\n  \n  doAddition: function(a, b) {\n    console.log(a + b)\n  },\n  \n}\n\narto.doAddition(1, 4)        // 5 is printed\n\nconst referenceToAddition = arto.doAddition\nreferenceToAddition(10, 15)   // 25 is printed\n")),(0,r.kt)("p",null,"Now the object has the method ",(0,r.kt)("em",{parentName:"p"},"doAddition")," which calculates the sum of numbers given to it as parameters. The method is called in the usual way, using the object ",(0,r.kt)("em",null,"arto.doAddition(1, 4)")," or by storing a ",(0,r.kt)("i",null,"method reference")," in a variable and calling the method through the variable: ",(0,r.kt)("em",null,"referenceToAddition(10, 15)"),"."),(0,r.kt)("p",null,"If we try to do the same with the method ",(0,r.kt)("em",{parentName:"p"},"greet")," we run into an issue:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'arto.greet()       // "hello, my name is Arto Hellas" gets printed\n\nconst referenceToGreet = arto.greet\nreferenceToGreet() // prints "hello, my name is undefined"\n')),(0,r.kt)("p",null,"When calling the method through a reference, the method loses knowledge of what the original ",(0,r.kt)("em",{parentName:"p"},"this")," was. Contrary to other languages, in JavaScript the value of ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"},"this")," is defined based on ",(0,r.kt)("i",null,"how the method is called"),". When calling the method through a reference the value of ",(0,r.kt)("em",{parentName:"p"},"this")," becomes the so-called ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Global_object"},"global object")," and the end result is often not what the software developer had originally intended."),(0,r.kt)("p",null," We will come back later to the behavior of ",(0,r.kt)("em",{parentName:"p"},"this"),"."),(0,r.kt)("h3",{id:"classes"},"Classes"),(0,r.kt)("p",null,'As mentioned previously, there is no class mechanism in JavaScript like the ones in object-oriented programming languages. There are, however, features to make "simulating" object-oriented ',(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"},"classes")," possible."),(0,r.kt)("p",null,'The ES6 class syntax is used a lot in "old" React and also in Node.js, hence an understanding of it is beneficial even in this course. However, since we are using the new ',(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-intro.html"},"Hooks")," feature of React throughout this course, we have no concrete use for JavaScript's class syntax."),(0,r.kt)("h3",{id:"javascript-materials"},"JavaScript materials"),(0,r.kt)("p",null,"There exist both good and poor guides for JavaScript on the Internet. Most of the links on this page relating to JavaScript features reference ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"Mozilla's JavaScript Guide"),"."),(0,r.kt)("p",null,"It is highly recommended to immediately read ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript"},"A re-introduction to JavaScript (JS tutorial)")," on Mozilla's website."),(0,r.kt)("p",null,"If you wish to get to know JavaScript deeply there is a great free book series on the Internet called ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/getify/You-Dont-Know-JS"},"You-Dont-Know-JS"),"."),(0,r.kt)("p",null,"Another great resource for learning JavaScript is ",(0,r.kt)("a",{parentName:"p",href:"https://javascript.info"},"javascript.info"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://egghead.io"},"egghead.io")," has plenty of quality screencasts on JavaScript, React, and other interesting topics. Unfortunately, some of the material is behind a paywall."),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fullstackopen.com"},"FullStackOpen: Part1 A")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fullstackopen.com"},"FullStackOpen: Part1 B"))))}d.isMDXComponent=!0},2412:function(e,t,n){t.Z=n.p+"assets/images/1e-aa68eeee6d682eea2b50666bf1cb3579.png"},7503:function(e,t,n){t.Z=n.p+"assets/images/2a-8e1536c7d054312e0132ac29587ce865.png"},986:function(e,t,n){t.Z=n.p+"assets/images/3c-6c1002db19c321d2bb604a873dab43dc.png"}}]);