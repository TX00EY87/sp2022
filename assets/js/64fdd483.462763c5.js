"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2667],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=p(n),d=r,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3198:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=["components"],i={title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},l="Lecture",p={unversionedId:"lecture-10/lecture",id:"lecture-10/lecture",title:"Lecture",description:"Lecture Slides will be in OMA after the session.",source:"@site/docs/lecture-10/lecture.md",sourceDirName:"lecture-10",slug:"/lecture-10/lecture",permalink:"/sp2022/lecture-10/lecture",tags:[],version:"current",frontMatter:{title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},sidebar:"docs"},c={},u=[{value:"API",id:"api",level:2},{value:"RESTful API",id:"restful-api",level:3},{value:"HTTP Methods",id:"http-methods",level:3},{value:"PUT versus PATCH",id:"put-versus-patch",level:4},{value:"Headers",id:"headers",level:3},{value:"Status Codes",id:"status-codes",level:4},{value:"Accept Header and Content-Type Header",id:"accept-header-and-content-type-header",level:4},{value:"Accept header",id:"accept-header",level:4},{value:"Network ports",id:"network-ports",level:3},{value:"Tools",id:"tools",level:2},{value:"npm",id:"npm",level:3},{value:"json-server",id:"json-server",level:3},{value:"postman",id:"postman",level:3},{value:"JavaScript",id:"javascript",level:2},{value:"Json",id:"json",level:3},{value:"Promise",id:"promise",level:3},{value:"Guarantees",id:"guarantees",level:4},{value:"Chaining",id:"chaining",level:4},{value:"fetch()",id:"fetch",level:3},{value:"Axios",id:"axios",level:3},{value:"EventLoop",id:"eventloop",level:3},{value:"React",id:"react",level:2},{value:"Effect-hooks",id:"effect-hooks",level:3},{value:"Effects Without Cleanup",id:"effects-without-cleanup",level:4},{value:"Effects with Cleanup",id:"effects-with-cleanup",level:4},{value:"Tip: Use Multiple Effects to Separate Concerns",id:"tip-use-multiple-effects-to-separate-concerns",level:4},{value:"Tip: Optimizing Performance by Skipping Effects",id:"tip-optimizing-performance-by-skipping-effects",level:4},{value:"Ref",id:"ref",level:2}],h={toc:u};function d(e){var t=e.components,i=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lecture"},"Lecture"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Lecture Slides will be in OMA after the session."))),(0,o.kt)("p",null,"Most modern apps receive data from servers and dynamically update the content. For example, a weather application will make requests to receive today's weather data from its servers. With React apps, it is also essential to communicate with servers in order to get the requested data to display content dynamically based on the user's interaction with the app."),(0,o.kt)("p",null,"In this lecture we will investigate various ways to fetch data by making API requests in React. We will do some hands-on exercises on fetching data from servers using RESTful APIs, the Fetch API, and Axios. "),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("p",null,"An Application Programming Interface (",(0,o.kt)("inlineCode",{parentName:"p"},"API"),") is a set of rules that allow programs to talk to each other. The developer creates the API on the server and allows the client to talk to it. When we connect to an ",(0,o.kt)("inlineCode",{parentName:"p"},"API")," we say that we are connecting to an ",(0,o.kt)("inlineCode",{parentName:"p"},"Endpoint"),"."),(0,o.kt)("p",null,"Some well-known APIs are ",(0,o.kt)("a",{parentName:"p",href:"https://developers.facebook.com/"},"Facebook APIs")," and ",(0,o.kt)("a",{parentName:"p",href:"https://developers.google.com/maps/documentation"},"Maps APIs")),(0,o.kt)("h3",{id:"restful-api"},"RESTful API"),(0,o.kt)("p",null,"To request data from a server, there are several web services you can use, such as SOAP and REST. "),(0,o.kt)("p",null,"REST stands for Representational State Transfer, and it is an architectural style of web architecture with six constraints that allows us to request data via the HTTP protocol using, for instance, GET and POST. When something is RESTful, it means it follows the REST constraints, and you can think of RESTful as the adjective of REST. Therefore, a RESTful API can be defined as an API that uses the HTTP protocol to request using GET, POST, and DELETE.\xa0"),(0,o.kt)("p",null,"When the client needs to talk to the server to receive or save data, these requests happen using the HTTP protocol, which exposes services from the server, and then the client can directly call the services by sending HTTP requests. This is where REST comes into play."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"There is another popular API-based declarative query language called ",(0,o.kt)("a",{parentName:"p",href:"https://graphql.org/code/#javascript"},"GraphQL"),". GraphQL is a syntax for querying APIs by allowing clients to specify what data it needs, and it can aggregate data from multiple places easily. "))),(0,o.kt)("h3",{id:"http-methods"},"HTTP Methods"),(0,o.kt)("p",null,"There are five common HTTP methods that you must provide when you request data through a RESTful API. The following table summarizes the five common HTTP methods \u2013 CRUD (Create, Read, Update, Delete):"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",src:n(4176).Z,width:"558",height:"590"})),(0,o.kt)("p",null,"A lot of developers get confused with the PUT and PATCH HTTP methods, so let's take a closer look at them."),(0,o.kt)("h4",{id:"put-versus-patch"},"PUT versus PATCH"),(0,o.kt)("p",null,"Both PUT and PATCH update existing data but PUT entirely updates the existing data whereas PATCH partially updates the existing data. To better explain, let's have a look at an example."),(0,o.kt)("p",null,"Let's say we have this JSON data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n\xa0\xa0"name": "Rami",\n\xa0\xa0"age": "29",\n\xa0\xa0"city": "Helsinki",\n\xa0\xa0"fav_language": "React"\n}\n')),(0,o.kt)("p",null,"When we PUT the new data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n\xa0\xa0"age": "30"\n}\n')),(0,o.kt)("p",null,"The outcome will only have the age and nothing else:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n\xa0\xa0"age": "30"\n}\n')),(0,o.kt)("p",null,"Now, if we apply this update with the PATCH method, the result will still contain other details but will only update age:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n\xa0\xa0"name": "Rami",\n\xa0\xa0"age": "30",\n\xa0\xa0"city": "Helsinki",\n\xa0\xa0"Fav_language": "React"\n}\n')),(0,o.kt)("p",null,"Thus, as we can see from the example, the PUT method overwrites the entire content and the PATCH method only updates the specified property."),(0,o.kt)("p",null,"Therefore, wherever we want to make minor modifications to a resource, we use PATCH, whereas PUT is used when we want to completely rewrite the data in a resource."),(0,o.kt)("p",null,"Now, when you make a network request, you must have often noticed the status messages that get displayed on the web page when a request is completed. Let's take a look at the various types of HTTP status codes and messages that get returned."),(0,o.kt)("h3",{id:"headers"},"Headers"),(0,o.kt)("p",null,"Each request and response sent has meta data, information about the data, at the beginning called a ",(0,o.kt)("inlineCode",{parentName:"p"},"header"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"header")," contains information such as a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"status code indicating whether a request was successful"),(0,o.kt)("li",{parentName:"ul"},"content type which indicates what the request or response contains")),(0,o.kt)("h4",{id:"status-codes"},"Status Codes"),(0,o.kt)("p",null,"REST APIs respond to a request with a status code to inform developers of the status of the request. There are 40 standard status codes, but the following table shows you the 7 most common status codes you will see with REST APIs:"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",src:n(6172).Z,width:"986",height:"666"})),(0,o.kt)("p",null,"You must have seen 404 quite often when there is a failure in retrieving the requested data. This simply means the resource was not found at the defined web address. "),(0,o.kt)("p",null,"The response codes can be grouped into categories"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1xx: Informational"),(0,o.kt)("li",{parentName:"ul"},"2xx: Success"),(0,o.kt)("li",{parentName:"ul"},"3xx: Redirection"),(0,o.kt)("li",{parentName:"ul"},"4xx: Client Error"),(0,o.kt)("li",{parentName:"ul"},"5xx: Server Error")),(0,o.kt)("p",null,"Formore info you can check ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"},"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"),"."),(0,o.kt)("h4",{id:"accept-header-and-content-type-header"},"Accept Header and Content-Type Header"),(0,o.kt)("p",null,"When we request data from a server, we include HTTP headers in a REST request to tell the server the format of data the client is expecting. Among many headers, Accept and Content-Type are the two main headers for formatting the data properly. The difference between them is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Accept is used by HTTP clients when requesting data from a server and tells the server what data format the client is expecting."),(0,o.kt)("li",{parentName:"ul"},"The server will send back the response including the Content-Type header telling the client what format the response is returned with.")),(0,o.kt)("p",null,"Common content types include"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"text/html")," - HTML web page"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"text/css")," - CSS"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"image/jpeg")," - JPEG image"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"application/javascript")," - JavaScript code"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"application/json")," - JSON data")),(0,o.kt)("p",null,"To look at the details of headers, open the DevTools, go to the Network tab, and refresh the page to request the data. Let's write the following code in the Console:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const xhr = new XMLHttpRequest();\n// assign json\nxhr.responseType = 'json';\n// initialize the request\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/posts/1');\n// send request to the server\nxhr.send();\n")),(0,o.kt)("p",null,"We will see something like this on the screen:\n",(0,o.kt)("img",{loading:"lazy",src:n(1779).Z,width:"1216",height:"468"})),(0,o.kt)("p",null,"When you click XHR and 1 in the Name panel, you will see the Headers tab. Clicking on it gives you all the header details you have included with your request."),(0,o.kt)("p",null,"Under Response Headers, you will see the content-type header. Here, you should\xa0get"),(0,o.kt)("p",null,"application/json; charset=utf-8"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",src:n(4688).Z,width:"546",height:"337"})),(0,o.kt)("p",null,"Under the Request Headers, there will be Accept header with ",(0,o.kt)("em",{parentName:"p"},"/")," which is any MIME type as we can see in the following figure:"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",src:n(1676).Z,width:"582",height:"198"})),(0,o.kt)("h4",{id:"accept-header"},"Accept header"),(0,o.kt)("p",null,"we can see that the client is giving the server a hint that the client is expecting the response in the format of ",(0,o.kt)("em",{parentName:"p"},"/")," and if the server cannot handle the format, it'll return anything it can respond with. However, it is up to the server to handle it. In the previous example, the content-type header has returned with application/json. When the content-type header is included in the request to the server and when the server handles it correctly, the response should come back with the content-type the client had asked for."),(0,o.kt)("p",null,"Giving the server a hint about the data format gives it a chance to properly handle the data format and return the response in the expected format."),(0,o.kt)("h3",{id:"network-ports"},(0,o.kt)("a",{parentName:"h3",href:"https://en.wikipedia.org/wiki/Port_(computer_networking)"},"Network ports")),(0,o.kt)("h2",{id:"tools"},"Tools"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/typicode/json-server#routes"},"json-server")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://npmjs.com/"},"npm")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.getpostman.com/downloads/"},"postman"))),(0,o.kt)("h3",{id:"npm"},"npm"),(0,o.kt)("p",null,"npm is the world's largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well."),(0,o.kt)("p",null,"npm consists of three distinct components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"https://npmjs.com/"},"website")),(0,o.kt)("li",{parentName:"ul"},"The Command Line Interface ",(0,o.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/cli/npm"},"(CLI)")," runs from a terminal, and is how most developers interact with npm."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/misc/registry"},"registry")," is a large public database of JavaScript software and the meta-information surrounding it.")),(0,o.kt)("h3",{id:"json-server"},(0,o.kt)("a",{parentName:"h3",href:"https://github.com/typicode/json-server"},"json-server")),(0,o.kt)("h3",{id:"postman"},(0,o.kt)("a",{parentName:"h3",href:"https://www.getpostman.com/downloads/"},"postman")),(0,o.kt)("h2",{id:"javascript"},"JavaScript"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Please review the material related to Asynchronous programming discuused in lectire 05."))),(0,o.kt)("h3",{id:"json"},"Json"),(0,o.kt)("p",null,"JSON string is a data interchange format\nA Javascript object is a data type in Javascript - it makes sense only in Javascript. Often you see a Javascript object literal like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var obj = {\n    a: 1,\n    b: 2\n};\n")),(0,o.kt)("h3",{id:"promise"},"Promise"),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Promise"))," is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a ",(0,o.kt)("em",{parentName:"p"},"promise")," to supply the value at some point in the future."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise")," is in one of these states:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"pending"),": initial state, neither fulfilled nor rejected."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"fulfilled"),": meaning that the operation was completed successfully."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"rejected"),": meaning that the operation failed.")),(0,o.kt)("p",null,"A pending promise can either be ",(0,o.kt)("em",{parentName:"p"},"fulfilled")," with a value or ",(0,o.kt)("em",{parentName:"p"},"rejected")," with a reason (error). When either of these options happens, the associated handlers queued up by a promise's ",(0,o.kt)("inlineCode",{parentName:"p"},"then")," method are called. If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached."),(0,o.kt)("p",null,"Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function."),(0,o.kt)("p",null,"Imagine a function, ",(0,o.kt)("inlineCode",{parentName:"p"},"createAudioFileAsync()"),", which asynchronously generates a sound file given a configuration record and two callback functions, one called if the audio file is successfully created, and the other called if an error occurs."),(0,o.kt)("p",null,"Here's some code that uses ",(0,o.kt)("inlineCode",{parentName:"p"},"createAudioFileAsync()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function successCallback(result) {\n  console.log("Audio file ready at URL: " + result);\n}\n\nfunction failureCallback(error) {\n  console.error("Error generating audio file: " + error);\n}\n\ncreateAudioFileAsync(audioSettings, successCallback, failureCallback);\n')),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"createAudioFileAsync()")," were rewritten to return a promise, you would attach your callbacks to it instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"createAudioFileAsync(audioSettings).then(successCallback, failureCallback);\n")),(0,o.kt)("p",null,"This convention has several advantages. "),(0,o.kt)("h4",{id:"guarantees"},"Guarantees"),(0,o.kt)("p",null,"Unlike old-fashioned ",(0,o.kt)("em",{parentName:"p"},"passed-in")," callbacks, a promise comes with some guarantees:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Callbacks added with ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"},(0,o.kt)("inlineCode",{parentName:"a"},"then()"))," will never be invoked before the ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#run-to-completion"},"completion of the current run")," of the JavaScript event loop."),(0,o.kt)("li",{parentName:"ul"},"These callbacks will be invoked even if they were added ",(0,o.kt)("em",{parentName:"li"},"after")," the success or failure of the asynchronous operation that the promise represents.")),(0,o.kt)("h4",{id:"chaining"},"Chaining"),(0,o.kt)("p",null,"A common need is to execute two or more asynchronous operations back to back, where each subsequent operation starts when the previous operation succeeds, with the result from the previous step. We accomplish this by creating a ",(0,o.kt)("strong",{parentName:"p"},"promise chain"),"."),(0,o.kt)("p",null,"Here's the magic: the ",(0,o.kt)("inlineCode",{parentName:"p"},"then()")," function returns a ",(0,o.kt)("strong",{parentName:"p"},"new promise"),", different from the original:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const promise = doSomething();\nconst promise2 = promise.then(successCallback, failureCallback);\n")),(0,o.kt)("p",null,"or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const promise2 = doSomething().then(successCallback, failureCallback);\n")),(0,o.kt)("p",null,"This second promise (",(0,o.kt)("inlineCode",{parentName:"p"},"promise2"),") represents the completion not just of ",(0,o.kt)("inlineCode",{parentName:"p"},"doSomething()"),", but also of the ",(0,o.kt)("inlineCode",{parentName:"p"},"successCallback")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"failureCallback")," you passed in, which can be other asynchronous functions returning a promise. When that's the case, any callbacks added to ",(0,o.kt)("inlineCode",{parentName:"p"},"promise2")," get queued behind the promise returned by either ",(0,o.kt)("inlineCode",{parentName:"p"},"successCallback")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"failureCallback"),"."),(0,o.kt)("p",null,"Basically, each promise represents the completion of another asynchronous step in the chain."),(0,o.kt)("p",null,"In the old days, doing several asynchronous operations in a row would lead to the classic callback pyramid of doom:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"doSomething(function(result) {\n  doSomethingElse(result, function(newResult) {\n    doThirdThing(newResult, function(finalResult) {\n      console.log('Got the final result: ' + finalResult);\n    }, failureCallback);\n  }, failureCallback);\n}, failureCallback);\n")),(0,o.kt)("p",null,"With modern functions, we attach our callbacks to the returned promises instead, forming a promise chain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"doSomething()\n.then(function(result) {\n  return doSomethingElse(result);\n})\n.then(function(newResult) {\n  return doThirdThing(newResult);\n})\n.then(function(finalResult) {\n  console.log('Got the final result: ' + finalResult);\n})\n.catch(failureCallback);\n")),(0,o.kt)("p",null,"The arguments to ",(0,o.kt)("inlineCode",{parentName:"p"},"then")," are optional, and ",(0,o.kt)("inlineCode",{parentName:"p"},"catch(failureCallback)")," is short for ",(0,o.kt)("inlineCode",{parentName:"p"},"then(null, failureCallback)"),". You might see this expressed with ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"},"arrow functions")," instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"doSomething()\n.then(result => doSomethingElse(result))\n.then(newResult => doThirdThing(newResult))\n.then(finalResult => {\n  console.log(`Got the final result: ${finalResult}`);\n})\n.catch(failureCallback);\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Important:")," Always return results, otherwise callbacks won't catch the result of a previous promise (with arrow functions ",(0,o.kt)("inlineCode",{parentName:"p"},"() => x")," is short for ",(0,o.kt)("inlineCode",{parentName:"p"},"() => { return x; }"),")."),(0,o.kt)("p",null,"The Promise API also comes with several methods, such as then(), catch() and finally()."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"try {\n  // code that we will 'try' to run\n} catch(error) {\n  // code to run if there are any problems\n} finally {\n  // run this code no matter what the previous outcomes\n}\n")),(0,o.kt)("h3",{id:"fetch"},"fetch()"),(0,o.kt)("p",null,"The global ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"fetch()"))," method starts the process of fetching a\nresource from the network, returning a promise which is fulfilled once the response is\navailable."),(0,o.kt)("p",null,"The promise resolves to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," object representing the response to your request."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch()")," promise only rejects when a network error is encountered (which is usually when there's a permissions issue or  similar). A fetch() promise ",(0,o.kt)("em",{parentName:"p"},"does\nnot")," reject on HTTP errors (",(0,o.kt)("inlineCode",{parentName:"p"},"404"),", etc.). Instead, a ",(0,o.kt)("inlineCode",{parentName:"p"},"then()")," handler must check the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response.ok")," and/or ",(0,o.kt)("inlineCode",{parentName:"p"},"Response.status")," properties."),(0,o.kt)("p",null,"Here's an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mdn/fetch-examples/tree/master/fetch-request"},"example")," (see ",(0,o.kt)("a",{parentName:"p",href:"https://mdn.github.io/fetch-examples/fetch-request/"},"Fetch Request live"),")."),(0,o.kt)("p",null,"We create a new Request object using the relevant constructor, then fetch it\nusing a ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch()")," call. Since we are fetching an image, we run\n",(0,o.kt)("inlineCode",{parentName:"p"},"Response.blob()")," on the response to give it the proper MIME type so it will be\nhandled properly, then create an Object URL of it and display it in an\n",(0,o.kt)("inlineCode",{parentName:"p"},"img")," element."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const myImage = document.querySelector('img');\n\nconst myRequest = new Request('flowers.jpg');\n\nfetch(myRequest)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${ response.status }`);\n    }\n    \n    return response.blob();\n  })\n  .then((response) => {\n    myImage.src = URL.createObjectURL(response);\n  });\n")),(0,o.kt)("p",null,"We can pass in an ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," object when we invoke ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch()")," Hers's an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mdn/fetch-examples/blob/master/fetch-with-init-then-request/index.html"},"example")," (see ",(0,o.kt)("a",{parentName:"p",href:"https://mdn.github.io/fetch-examples/fetch-with-init-then-request/"},"Fetch Request init live"),")."),(0,o.kt)("h3",{id:"axios"},"Axios"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/axios/axios"},"https://github.com/axios/axios"))),(0,o.kt)("h3",{id:"eventloop"},"EventLoop"),(0,o.kt)("p",null,"JavaScript has a runtime model based on an ",(0,o.kt)("strong",{parentName:"p"},"event loop"),", which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java."),(0,o.kt)("p",null,"A JavaScript runtime uses a message queue, which is a list of messages to be processed. Each message has an associated function that gets called to handle the message."),(0,o.kt)("p",null,"At some point during the ",(0,o.kt)("a",{parentName:"p",href:"#event_loop"},"event loop"),", the runtime starts handling the messages on the queue, starting with the oldest one. To do so, the message is removed from the queue and its corresponding function is called with the message as an input parameter. As always, calling a function creates a new stack frame for that function's use."),(0,o.kt)("p",null,"The processing of functions continues until the stack is once again empty. Then, the event loop will process the next message in the queue (if there is one)."),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"event loop")," got its name because of how it's usually implemented, which usually resembles:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"while (queue.waitForMessage()) {\n  queue.processNextMessage()\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"queue.waitForMessage()")," waits synchronously for a message to arrive (if one is not already available and waiting to be handled)."),(0,o.kt)("p",null,"Each message is processed completely before any other message is processed."),(0,o.kt)("p",null,"This offers some nice properties when reasoning about your program, including the fact that whenever a function runs, it cannot be preempted and will run entirely before any other code runs (and can modify data the function manipulates). This differs from C, for instance, where if a function runs in a thread, it may be stopped at any point by the runtime system to run some other code in another thread."),(0,o.kt)("p",null,'A downside of this model is that if a message takes too long to complete, the web application is unable to process user interactions like click or scroll. The browser mitigates this with the "a script is taking too long to run" dialog. A good practice to follow is to make message processing short and if possible cut down one message into several messages.'),(0,o.kt)("h2",{id:"react"},"React"),(0,o.kt)("h3",{id:"effect-hooks"},"Effect-hooks"),(0,o.kt)("p",null,"Hooks",(0,o.kt)("em",{parentName:"p"}," are a new addition in React 16.8. They let you use state and other React features without writing a class. The "),"Effect Hook* lets you perform side effects in function components. "),(0,o.kt)("p",null,"There are two common kinds of side effects in React components: those that don't require cleanup, and those that do. Let's look at this distinction in more detail."),(0,o.kt)("h4",{id:"effects-without-cleanup"},"Effects Without Cleanup"),(0,o.kt)("p",null,"Sometimes, we want to ",(0,o.kt)("strong",{parentName:"p"},"run some additional code after React has updated the DOM.")," Network requests, manual DOM mutations, and logging are common examples of effects that don't require a cleanup. We say that because we can run them and immediately forget about them. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example Using Hooks")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom'\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"What does ",(0,o.kt)("inlineCode",{parentName:"strong"},"useEffect")," do?"),' By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we\'ll refer to it as our "effect"), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why is ",(0,o.kt)("inlineCode",{parentName:"strong"},"useEffect")," called inside a component?")," Placing ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," inside the component lets us access the ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," state variable (or any props) right from the effect. We don't need a special API to read it -- it's already in the function scope. Hooks embrace JavaScript closures and avoid introducing React-specific APIs where JavaScript already provides a solution."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Does ",(0,o.kt)("inlineCode",{parentName:"strong"},"useEffect")," run after every render?")," Yes! By default, it runs both after the first render ",(0,o.kt)("em",{parentName:"p"},"and"),' after every update. (We will later talk about how to customize this. You might find it easier to think that effects happen "after render". React guarantees the DOM has been updated by the time it runs the effects.'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Detailed Explanation")),(0,o.kt)("p",null,"Now that we know more about effects, these lines should make sense:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n}\n")),(0,o.kt)("p",null,"We declare the ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," state variable, and then we tell React we need to use an effect. We pass a function to the ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," Hook. This function we pass ",(0,o.kt)("em",{parentName:"p"},"is")," our effect. Inside our effect, we set the document title using the ",(0,o.kt)("inlineCode",{parentName:"p"},"document.title")," browser API. We can read the latest ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," inside the effect because it's in the scope of our function. When React renders our component, it will remember the effect we used, and then run our effect after updating the DOM. This happens for every render, including the first one."),(0,o.kt)("p",null,"Experienced JavaScript developers might notice that the function passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," is going to be different on every render. This is intentional. In fact, this is what lets us read the ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," value from inside the effect without worrying about it getting stale. Every time we re-render, we schedule a ",(0,o.kt)("em",{parentName:"p"},"different"),' effect, replacing the previous one. In a way, this makes the effects behave more like a part of the render result -- each effect "belongs" to a particular render. We will see more clearly why this is useful later .'),(0,o.kt)("h4",{id:"effects-with-cleanup"},"Effects with Cleanup"),(0,o.kt)("p",null,"Earlier, we looked at how to express side effects that don't require any cleanup. However, some effects do. For example, ",(0,o.kt)("strong",{parentName:"p"},"we might want to set up a subscription")," to some external data source. In that case, it is important to clean up so that we don't introduce a memory leak! "),(0,o.kt)("p",null,"For example, let\u2019s say we have a ChatAPI module that lets us subscribe to a friend\u2019s online status. Let's see how we could write this component with Hooks."),(0,o.kt)("p",null,"You might be thinking that we'd need a separate effect to perform the cleanup. But code for adding and removing a subscription is so tightly related that ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," is designed to keep it together. If your effect returns a function, React will run it when it is time to clean up:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why did we return a function from our effect?")," This is the optional cleanup mechanism for effects. Every effect may return a function that cleans up after it. This lets us keep the logic for adding and removing subscriptions close to each other. They're part of the same effect!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"When exactly does React clean up an effect?")," React performs the cleanup when the component unmounts. However, as we learned earlier, effects run for every render and not just once. This is why React ",(0,o.kt)("em",{parentName:"p"},"also")," cleans up effects from the previous render before running the effects next time. "),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"We don't have to return a named function from the effect. We called it ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanup")," here to clarify its purpose, but you could return an arrow function or call it something different."))),(0,o.kt)("h4",{id:"tip-use-multiple-effects-to-separate-concerns"},"Tip: Use Multiple Effects to Separate Concerns"),(0,o.kt)("p",null,"Just like you can use the ",(0,o.kt)("em",{parentName:"p"},"State")," Hook more than once, you can also use several effects. This lets us separate unrelated logic into different effects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function FriendStatusWithCounter(props) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n  // ...\n}\n")),(0,o.kt)("h4",{id:"tip-optimizing-performance-by-skipping-effects"},"Tip: Optimizing Performance by Skipping Effects"),(0,o.kt)("p",null,"In some cases, cleaning up or applying the effect after every render might create a performance problem."),(0,o.kt)("p",null,"This requirement is common enough that it is built into the ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," Hook API. You can tell React to ",(0,o.kt)("em",{parentName:"p"},"skip")," applying an effect if certain values haven't changed between re-renders. To do so, pass an array as an optional second argument to ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"useEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]); // Only re-run the effect if count changes\n")),(0,o.kt)("p",null,"In the example above, we pass ",(0,o.kt)("inlineCode",{parentName:"p"},"[count]")," as the second argument. What does this mean? If the ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"5"),", and then our component re-renders with ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," still equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"5"),", React will compare ",(0,o.kt)("inlineCode",{parentName:"p"},"[5]")," from the previous render and ",(0,o.kt)("inlineCode",{parentName:"p"},"[5]")," from the next render. Because all items in the array are the same (",(0,o.kt)("inlineCode",{parentName:"p"},"5 === 5"),"), React would skip the effect. That's our optimization."),(0,o.kt)("p",null,"When we render with ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," updated to ",(0,o.kt)("inlineCode",{parentName:"p"},"6"),", React will compare the items in the ",(0,o.kt)("inlineCode",{parentName:"p"},"[5]")," array from the previous render to items in the ",(0,o.kt)("inlineCode",{parentName:"p"},"[6]")," array from the next render. This time, React will re-apply the effect because ",(0,o.kt)("inlineCode",{parentName:"p"},"5 !== 6"),". If there are multiple items in the array, React will re-run the effect even if just one of them is different."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array (",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),") as a second argument. This tells React that your effect doesn't depend on ",(0,o.kt)("em",{parentName:"p"},"any")," values from props or state, so it never needs to re-run. This isn't handled as a special case -- it follows directly from how the dependencies array always works."))),(0,o.kt)("h2",{id:"ref"},"Ref"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://learning.oreilly.com/library/view/the-react-workshop"},"The React Workshop")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/"},"npm")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"},"Using promises")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch"},"fetch()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"},"Event Loop")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/hooks-effect.html"},"Hooks effect")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://javascript.info/promise-chaining"},"javascript.info"))))}d.isMDXComponent=!0},4688:function(e,t,n){t.Z=n.p+"assets/images/header-2268302b959239720db4561388e2e3cf.png"},1676:function(e,t,n){t.Z=n.p+"assets/images/header2-1d48eb3a78d51fb61516cddd9bae2427.png"},4176:function(e,t,n){t.Z=n.p+"assets/images/http-methods-af470187b60ae6049be4a02a29f968b5.png"},6172:function(e,t,n){t.Z=n.p+"assets/images/http-status-15b5f712a100e50cc17cceeca8e6e340.png"},1779:function(e,t,n){t.Z=n.p+"assets/images/netw-fe3033073112756faee6bcc5edda2d95.png"}}]);