"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8689],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var s=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,o=function(e,t){if(null==e)return{};var n,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var r=s.createContext({}),p=function(e){var t=s.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return s.createElement(r.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),g=o,h=d["".concat(r,".").concat(g)]||d[g]||c[g]||a;return n?s.createElement(h,i(i({ref:t},u),{},{components:n})):s.createElement(h,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9058:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return r},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var s=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={title:"Exercises",sidebar_label:"Exercises",pagination_next:null,pagination_prev:null,slug:"exercises",hide_table_of_contents:!1,sidebar_position:2},r="Exercises",p={unversionedId:"lecture-14/exercises",id:"lecture-14/exercises",title:"Exercises",description:"Submission",source:"@site/docs/lecture-14/exercises.md",sourceDirName:"lecture-14",slug:"/lecture-14/exercises",permalink:"/sp2022/lecture-14/exercises",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Exercises",sidebar_label:"Exercises",pagination_next:null,pagination_prev:null,slug:"exercises",hide_table_of_contents:!1,sidebar_position:2},sidebar:"docs"},u={},c=[{value:"Submission",id:"submission",level:2},{value:"Blog list, step1",id:"blog-list-step1",level:3},{value:"Blog list, step2",id:"blog-list-step2",level:3},{value:"Blog list expansions, step1",id:"blog-list-expansions-step1",level:3},{value:"Blog list expansions, step2",id:"blog-list-expansions-step2",level:3},{value:"bloglist expansion, step3",id:"bloglist-expansion-step3",level:3},{value:"bloglist expansion, step4",id:"bloglist-expansion-step4",level:3},{value:"bloglist expansion, step5",id:"bloglist-expansion-step5",level:3},{value:"bloglist expansion, step6",id:"bloglist-expansion-step6",level:3},{value:"bloglist expansion, step7",id:"bloglist-expansion-step7",level:3},{value:"bloglist expansion, step9",id:"bloglist-expansion-step9",level:3},{value:"Reference",id:"reference",level:2}],d={toc:c};function g(e){var t=e.components,l=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,s.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"exercises"},"Exercises"),(0,a.kt)("h2",{id:"submission"},"Submission"),(0,a.kt)("p",null,"Please submit the ",(0,a.kt)("inlineCode",{parentName:"p"},"*.js")," files to OMA by the deadline. Use the following naming convention ",(0,a.kt)("inlineCode",{parentName:"p"},"ex-14-step1.js, ex-14-step2.js etc,")),(0,a.kt)("h3",{id:"blog-list-step1"},"Blog list, step1"),(0,a.kt)("p",null,"We will be building a ",(0,a.kt)("i",null,"blog list application"),", that allows users to save information about interesting blogs they have stumbled across on the internet. For each listed blog we will save the author, title, url, and amount of upvotes from users of the application."),(0,a.kt)("p",null,"Let's imagine a situation, where you receive an email that contains the following application body:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const http = require('http')\nconst express = require('express')\nconst app = express()\nconst cors = require('cors')\nconst mongoose = require('mongoose')\n\nconst blogSchema = new mongoose.Schema({\n  title: String,\n  author: String,\n  url: String,\n  likes: Number\n})\n\nconst Blog = mongoose.model('Blog', blogSchema)\n\nconst mongoUrl = 'mongodb://localhost/bloglist'\nmongoose.connect(mongoUrl)\n\napp.use(cors())\napp.use(express.json())\n\napp.get('/api/blogs', (request, response) => {\n  Blog\n    .find({})\n    .then(blogs => {\n      response.json(blogs)\n    })\n})\n\napp.post('/api/blogs', (request, response) => {\n  const blog = new Blog(request.body)\n\n  blog\n    .save()\n    .then(result => {\n      response.status(201).json(result)\n    })\n})\n\nconst PORT = 3003\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`)\n})\n")),(0,a.kt)("p",null,"Turn the application into a functioning ",(0,a.kt)("i",null,"npm")," project. In order to keep your development productive, configure the application to be executed with ",(0,a.kt)("i",null,"nodemon"),". You can create a new database for your application with MongoDB Atlas, or use the same database from the previous part's exercises."),(0,a.kt)("p",null,"Verify that it is possible to add blogs to list with Postman or the VS Code REST client and that the application returns the added blogs at the correct endpoint."),(0,a.kt)("h3",{id:"blog-list-step2"},"Blog list, step2"),(0,a.kt)("p",null,"Refactor the application into separate modules as shown earlier in this part of the course material."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NB"),' refactor your application in baby steps and verify that the application works after every change you make. If you try to take a "shortcut" by refactoring many things at once, then it is almost certain that something will break in your application. The "shortcut" will end up taking more time than moving forward slowly and systematically.'),(0,a.kt)("p",null,"One best practice is to commit your code every time it is in a stable state. This makes it easy to rollback to a situation where the application still works."),(0,a.kt)("h3",{id:"blog-list-expansions-step1"},"Blog list expansions, step1"),(0,a.kt)("p",null,"Implement functionality for deleting a single blog post resource."),(0,a.kt)("p",null,"Use the async/await syntax. Follow RESTful conventions when defining the HTTP API."),(0,a.kt)("h3",{id:"blog-list-expansions-step2"},"Blog list expansions, step2"),(0,a.kt)("p",null,"Implement functionality for updating the information of an individual blog post."),(0,a.kt)("p",null,"Use async/await."),(0,a.kt)("p",null,"The application mostly needs to update the amount of ",(0,a.kt)("i",null,"likes")," for a blog post. "),(0,a.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In the next exercises, basics of user management will be implemented for the Bloglist application. "),(0,a.kt)("p",{parentName:"div"},"If you notice you are mixing async/await and ",(0,a.kt)("em",{parentName:"p"},"then")," calls, it is 99% certain you are doing something wrong. Use either or, never both."))),(0,a.kt)("h3",{id:"bloglist-expansion-step3"},"bloglist expansion, step3"),(0,a.kt)("p",null,"Implement a way to create new users by doing a HTTP POST-request to address ",(0,a.kt)("i",null,"api/users"),". Users have ",(0,a.kt)("i",null,"username, password and name"),"."),(0,a.kt)("p",null,"Do not save passwords to the database as clear text, but use the ",(0,a.kt)("i",null,"bcrypt")," library."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NB")," Some Windows users have had problems with ",(0,a.kt)("i",null,"bcrypt"),". If you run into problems, remove the library with command "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm uninstall bcrypt \n")),(0,a.kt)("p",null,"and install ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/bcryptjs"},"bcryptjs")," instead. "),(0,a.kt)("p",null,"Implement a way to see the details of all users by doing a suitable HTTP request. "),(0,a.kt)("p",null,"List of users can for example, look as follows: "),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",src:n(7852).Z,width:"1336",height:"474"})),(0,a.kt)("h3",{id:"bloglist-expansion-step4"},"bloglist expansion, step4"),(0,a.kt)("p",null,"Add a feature which adds the following restrictions to creating new users: Both username and password must be given. Both username and password must be at least 3 characters long. The username must be unique. "),(0,a.kt)("p",null,"The operation must respond with a suitable status code and some kind of an error message if invalid user is created. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NB")," Do not test password restrictions with Mongoose validations. It is not a good idea because the password received by the backend and the password hash saved to the database are not the same thing. The password length should be validated in the controller before using Mongoose validation. "),(0,a.kt)("h3",{id:"bloglist-expansion-step5"},"bloglist expansion, step5"),(0,a.kt)("p",null,"Expand blogs so that each blog contains information on the creator of the blog. "),(0,a.kt)("p",null,"Modify listing all blogs so that the creator's user information is displayed with the blog: "),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",src:n(6694).Z,width:"1598",height:"970"})),(0,a.kt)("p",null,"and listing all users also displays the blogs created by each user: "),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",src:n(3024).Z,width:"1560",height:"1014"})),(0,a.kt)("h3",{id:"bloglist-expansion-step6"},"bloglist expansion, step6"),(0,a.kt)("p",null,"Implement token-based authentication."),(0,a.kt)("h3",{id:"bloglist-expansion-step7"},"bloglist expansion, step7"),(0,a.kt)("p",null,"Modify adding new blogs so that it is only possible if a valid token is sent with the HTTP POST request. The user identified by the token is designated as the creator of the blog. "),(0,a.kt)("h3",{id:"bloglist-expansion-step9"},"bloglist expansion, step9"),(0,a.kt)("p",null,"Change the delete blog operation so that a blog can be deleted only by the user who added the blog. Therefore, deleting a blog is possible only if the token sent with the request is the same as that of the blog's creator. "),(0,a.kt)("p",null,"If deleting a blog is attempted without a token or by a wrong user, the operation should return a suitable status code. "),(0,a.kt)("p",null,"Note that if you fetch a blog from the database,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const blog = await Blog.findById(...)\n")),(0,a.kt)("p",null,"the field ",(0,a.kt)("i",null,"blog.user")," does not contain a string, but an Object. So if you want to compare the id of the object fetched from the database and a string id, normal comparison operation does not work. The id fetched from the database must be parsed into a string first. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if ( blog.user.toString() === userid.toString() ) ...\n")),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://fullstackopen.com"},"FullStackOpen: Exercises 4.1.,4.2.,4.13-4.21. "))))}g.isMDXComponent=!0},7852:function(e,t,n){t.Z=n.p+"assets/images/22-48a814fb87aaee35975ff30aac4a7b3f.png"},6694:function(e,t,n){t.Z=n.p+"assets/images/23e-1bafae6c5804474eb619609ff753eae1.png"},3024:function(e,t,n){t.Z=n.p+"assets/images/24e-1dc71bb4a71c9a2784bad858b0dd4856.png"}}]);