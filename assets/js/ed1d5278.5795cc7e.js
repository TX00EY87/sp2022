"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4236],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=u(n),d=a,f=h["".concat(l,".").concat(d)]||h[d]||p[d]||o;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2859:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},l="Lecture",u={unversionedId:"lecture-14/lecture",id:"lecture-14/lecture",title:"Lecture",description:"Group Presentations",source:"@site/docs/lecture-14/lecture.md",sourceDirName:"lecture-14",slug:"/lecture-14/lecture",permalink:"/sp2022/lecture-14/lecture",tags:[],version:"current",frontMatter:{title:"Lecture",sidebar_label:"Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1},sidebar:"docs"},c={},p=[{value:"Group Presentations",id:"group-presentations",level:2},{value:"Hashes and salts",id:"hashes-and-salts",level:2},{value:"JSON Web Token",id:"json-web-token",level:2},{value:"Three parts of a JWT",id:"three-parts-of-a-jwt",level:3},{value:"Ref",id:"ref",level:2}],h={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lecture"},"Lecture"),(0,o.kt)("h2",{id:"group-presentations"},"Group Presentations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"async/await"),(0,o.kt)("li",{parentName:"ul"},"Authentication"),(0,o.kt)("li",{parentName:"ul"},"Authorization"),(0,o.kt)("li",{parentName:"ul"},"JWT")),(0,o.kt)("h2",{id:"hashes-and-salts"},"Hashes and salts"),(0,o.kt)("p",null,"One-way password encryption:"),(0,o.kt)("p",null,"One-way encryption prevents anyone from decrypting the password, while still making it easy to validate a correct password. When a user tries to log in, the application can encrypt a given password and see whether it matches the stored value."),(0,o.kt)("p",null,"Encrypting isn\u2019t enough, though. If several people used the word password as their password, the encryption for each is the same. Any hackers looking through the database could see this pattern and identify potentially weak passwords."),(0,o.kt)("p",null,"This is where the concept of a salt comes in. A salt is a random string generated by the application for each user that\u2019s combined with the password before encryption. The resulting encrypted value is called a hash."),(0,o.kt)("p",null,"A hash is created by combining a user\u2019s password with a random salt and encrypting them."),(0,o.kt)("p",null,"The salt and the hash are both stored in the database, rather than just a single password field. In this approach, all hashes should be unique, and passwords are well protected."),(0,o.kt)("h2",{id:"json-web-token"},"JSON Web Token"),(0,o.kt)("p",null,"A JWT (pronounced jot) is used to pass data around, in your case between the API on the server and the SPA in the browser. A JWT can also be used by the server that generated the token to authenticate a user when it\u2019s returned in a subsequent request."),(0,o.kt)("p",null,"The next section takes a quick look at the parts of a JWT."),(0,o.kt)("h3",{id:"three-parts-of-a-jwt"},"Three parts of a JWT"),(0,o.kt)("p",null,"A JWT is comprised of three random-looking, dot-separated strings. These strings can be long. Here\u2019s a real-world example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiI1NTZiZWRmNDhmOTUzOTViMTlhNjc1\n     ODgiLCJlbWFpbCI6InNpbW9uQGZ1bGxzdGFja3RyYWluaW5nLmNvbSIsIm5hbWUiOiJTaW1v\n     biBIb2xtZXMiLCJleHAiOjE0MzUwNDA0MTgsImlhdCI6MTQzNDQzNTYxOH0.GD7UrfnLk295\n     rwvIrCikbkAKctFFoRCHotLYZwZpdlE\n")),(0,o.kt)("p",null,"This string is meaningless to the human eye, but you should be able to spot the two dots and therefore the three separate parts. These three parts are"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Header\u2014 An encoded JSON object containing the type and the hashing algorithm used"),(0,o.kt)("li",{parentName:"ul"},"Payload\u2014 An encoded JSON object containing the data, the real body of the token"),(0,o.kt)("li",{parentName:"ul"},"Signature\u2014 An encrypted hash of the header and payload, using a secret that only the originating server knows")),(0,o.kt)("p",null,"Note that the first two parts aren\u2019t encrypted; they\u2019re encoded, so it\u2019s easy for the browser\u2014or indeed, other applications\u2014to decode them. Most modern browsers have a native function called atob() that can decode a Base64 string. A sister function called btoa() can encode to a Base64 string."),(0,o.kt)("p",null,"The third part, the signature, is encrypted. To decrypt it, you need to use the secret that was set on the server. This secret should remain on the server and never be revealed in public."),(0,o.kt)("p",null,"The good news is that there are libraries to deal with all the complicated parts of the process. In the next section, you\u2019ll install one of these libraries into your application and create a schema method to generate a JWT."),(0,o.kt)("h2",{id:"ref"},"Ref"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Getting MEAN with Mongo, Express, Angular, and Node, Second Edition")))}d.isMDXComponent=!0}}]);