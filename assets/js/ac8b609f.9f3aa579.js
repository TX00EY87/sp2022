"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3207],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,m=u["".concat(i,".").concat(d)]||u[d]||h[d]||s;return n?o.createElement(m,r(r({ref:t},c),{},{components:n})):o.createElement(m,r({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<s;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1310:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return h}});var o=n(7462),a=n(3366),s=(n(7294),n(3905)),r=["components"],l={title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},i="After Lecture",p={unversionedId:"lecture-10/post-lecture",id:"lecture-10/post-lecture",title:"Post Lecture Reading",description:"Recommended videos",source:"@site/docs/lecture-10/post-lecture.md",sourceDirName:"lecture-10",slug:"/lecture-10/post-lecture",permalink:"/sp2022/lecture-10/post-lecture",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Post Lecture Reading",sidebar_label:"Post Lecture",pagination_next:null,pagination_prev:null,hide_table_of_contents:!1,sidebar_position:5},sidebar:"docs"},c={},h=[{value:"Recommended videos",id:"recommended-videos",level:2},{value:"Getting data from server",id:"getting-data-from-server",level:2},{value:"The browser as a runtime environment",id:"the-browser-as-a-runtime-environment",level:3},{value:"npm",id:"npm",level:3},{value:"Axios and promises",id:"axios-and-promises",level:3},{value:"Effect-hooks",id:"effect-hooks",level:3},{value:"The development runtime environment",id:"the-development-runtime-environment",level:3},{value:"Altering data in server",id:"altering-data-in-server",level:2},{value:"REST",id:"rest",level:3},{value:"Sending Data to the Server",id:"sending-data-to-the-server",level:3},{value:"Changing the Importance of Notes",id:"changing-the-importance-of-notes",level:3},{value:"Extracting Communication with the Backend into a Separate Module",id:"extracting-communication-with-the-backend-into-a-separate-module",level:3},{value:"Cleaner Syntax for Defining Object Literals",id:"cleaner-syntax-for-defining-object-literals",level:3},{value:"Promises and Errors",id:"promises-and-errors",level:3},{value:"Adding styles to React app",id:"adding-styles-to-react-app",level:2},{value:"Improved error message",id:"improved-error-message",level:3},{value:"Inline styles",id:"inline-styles",level:3},{value:"Reference",id:"reference",level:2}],u={toc:h};function d(e){var t=e.components,l=(0,a.Z)(e,r);return(0,s.kt)("wrapper",(0,o.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"after-lecture"},"After Lecture"),(0,s.kt)("h2",{id:"recommended-videos"},"Recommended videos"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.youtube.com/playlist?list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG"},"React Tutorial - Videos 14 to 19 (~55min)")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"}," ",(0,s.kt)("strong",{parentName:"p"},"Credits"),": The post lecture material has been written by ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/mluukkai"},"Matti Luukkainen")," from ",(0,s.kt)("a",{parentName:"p",href:"https://fullstackopen.com/en/"},"University of Helsinki"),". The material is licensed under the Creative Commons BY-NC-SA 3.0 License."))),(0,s.kt)("h2",{id:"getting-data-from-server"},"Getting data from server"),(0,s.kt)("p",null,"Our focus shifts towards looking at how JavaScript code in the browser can fetch and handle data stored in a remote backend server. Lastly, we will take a quick look at a few simple ways of adding CSS styles to our React applications."),(0,s.kt)("p",null,'For a while now we have only been working on "frontend", i.e. client-side (browser) functionality. We will begin working on "backend", i.e. server-side functionality later in the course. Nonetheless, we will now take a step in that direction by familiarizing ourselves with how code executing in the browser communicates with the backend.'),(0,s.kt)("p",null,"Let's use a tool meant to be used during software development called ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/typicode/json-server"},"JSON Server")," to act as our server."),(0,s.kt)("p",null,"Create a file named ",(0,s.kt)("i",null,"db.json")," in the root directory of the project with the following content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "notes": [\n    {\n      "id": 1,\n      "content": "HTML is easy",\n      "date": "2022-1-17T17:30:31.098Z",\n      "important": true\n    },\n    {\n      "id": 2,\n      "content": "Browser can execute only JavaScript",\n      "date": "2022-1-17T18:39:34.091Z",\n      "important": false\n    },\n    {\n      "id": 3,\n      "content": "GET and POST are the most important methods of HTTP protocol",\n      "date": "2022-1-17T19:20:14.298Z",\n      "important": true\n    }\n  ]\n}\n')),(0,s.kt)("p",null,"You can ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/typicode/json-server#getting-started"},"install")," JSON server globally on your machine using the command ",(0,s.kt)("em",{parentName:"p"},"npm install -g json-server"),". A global installation requires administrative privileges, which means that it is not possible on the faculty computers or freshman laptops."),(0,s.kt)("p",null,"However, a global installation is not necessary.  From the root directory of your app, we can run the ",(0,s.kt)("i",null,"json-server")," using the command ",(0,s.kt)("em",{parentName:"p"},"npx"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"npx json-server --port 3001 --watch db.json\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("i",null,"json-server")," starts running on port 3000 by default; but since projects created using create-react-app reserve port 3000, we must define an alternate port, such as port 3001, for the json-server."),(0,s.kt)("p",null,"Let's navigate to the address ",(0,s.kt)("a",{parentName:"p",href:"http://localhost:3001/notes"},"http://localhost:3001/notes")," in the browser. We can see that ",(0,s.kt)("i",null,"json-server")," serves the notes we previously wrote to the file in JSON format:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(6094).Z,width:"1564",height:"760"})),(0,s.kt)("p",null,"If your browser doesn't have a way to format the display of JSON-data, then install an appropriate plugin, e.g. ",(0,s.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc"},"JSONView")," to make your life easier."),(0,s.kt)("p",null,'Going forward, the idea will be to save the notes to the server, which in this case means saving to the json-server. The React code fetches the notes from the server and renders them to the screen. Whenever a new note is added to the application the React code also sends it to the server to make the new note persist in "memory".'),(0,s.kt)("p",null,"json-server stores all the data in the ",(0,s.kt)("i",null,"db.json")," file, which resides on the server. In the real world, data would be stored in some kind of database. However, json-server is a handy tool that enables the use of server-side functionality in the development phase without the need to program any of it."),(0,s.kt)("p",null,"We will get familiar with the principles of implementing server-side functionality in more detail later in this course."),(0,s.kt)("h3",{id:"the-browser-as-a-runtime-environment"},"The browser as a runtime environment"),(0,s.kt)("p",null,"Our first task is fetching the already existing notes to our React application from the address ",(0,s.kt)("a",{parentName:"p",href:"http://localhost:3001/notes"},"http://localhost:3001/notes"),"."),(0,s.kt)("p",null,"JavaScript engines, or runtime environments, follow the ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"},"asynchronous model"),". In principle, this requires all ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Input/output"},"IO-operations")," (with some exceptions) to be executed as non-blocking. This means that the code execution continues immediately after calling an IO function, without waiting for it to return."),(0,s.kt)("p",null,"When an asynchronous operation is completed, or more specifically, at some point after its completion, the JavaScript engine calls the event handlers registered to the operation."),(0,s.kt)("p",null,"Currently, JavaScript engines are ",(0,s.kt)("i",null,"single-threaded"),', which means that they cannot execute code in parallel. As a result, it is a requirement in practice to use a non-blocking model for executing IO operations. Otherwise, the browser would "freeze" during, for instance, the fetching of data from a server.'),(0,s.kt)("p",null,"Another consequence of this single-threaded nature of JavaScript engines is that if some code execution takes up a lot of time, the browser will get stuck for the duration of the execution. If we added the following code at the top of our application:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"setTimeout(() => {\n  console.log('loop..')\n  let i = 0\n  while (i < 50000000000) {\n    i++\n  }\n  console.log('end')\n}, 5000)\n")),(0,s.kt)("p",null,"everything would work normally for 5 seconds. However, when the function defined as the parameter for ",(0,s.kt)("em",null,"setTimeout")," is run, the browser will be stuck for the duration of the execution of the long loop. Even the browser tab cannot be closed during the execution of the loop, at least not in Chrome."),(0,s.kt)("p",null,"For the browser to remain ",(0,s.kt)("i",null,"responsive"),", i.e. to be able to continuously react to user operations with sufficient speed, the code logic needs to be such that no single computation can take too long."),(0,s.kt)("p",null,"There is a host of additional material on the subject to be found on the internet. One particularly clear presentation of the topic is the keynote by Philip Roberts called ",(0,s.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=8aGhZQkoFbQ"},"What the heck is the event loop anyway?")),(0,s.kt)("p",null,"In today's browsers, it is possible to run parallelized code with the help of so-called ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"},"web workers"),". The event loop of an individual browser window is, however, still only handled by a ",(0,s.kt)("a",{parentName:"p",href:"https://medium.com/techtrument/multithreading-javascript-46156179cf9a"},"single thread"),"."),(0,s.kt)("h3",{id:"npm"},"npm"),(0,s.kt)("p",null,"Let's get back to the topic of fetching data from the server."),(0,s.kt)("p",null,"We could use the previously mentioned promise based function ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch"},"fetch")," to pull the data from the server. Fetch is a great tool. It is standardized and supported by all modern browsers (excluding IE)."),(0,s.kt)("p",null,"That being said, we will be using the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"axios")," library instead for communication between the browser and server. It functions like fetch, but is somewhat more pleasant to use. Another good reason to use axios is our getting familiar with adding external libraries, so-called ",(0,s.kt)("i",null,"npm packages"),", to React projects."),(0,s.kt)("p",null,"Nowadays, practically all JavaScript projects are defined using the node package manager, aka ",(0,s.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/getting-started/what-is-npm"},"npm"),". The projects created using create-react-app also follow the npm format. A clear indicator that a project uses npm is the ",(0,s.kt)("i",null,"package.json")," file located at the root of the project:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "notes",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "@testing-library/jest-dom": "^5.16.1",\n    "@testing-library/react": "^12.1.2",\n    "@testing-library/user-event": "^13.5.0",\n    "react": "^17.0.2",\n    "react-dom": "^17.0.2",\n    "react-scripts": "5.0.0",\n    "web-vitals": "^2.1.3"\n  },\n  "scripts": {\n    "start": "react-scripts start",\n    "build": "react-scripts build",\n    "test": "react-scripts test",\n    "eject": "react-scripts eject"\n  },\n  "eslintConfig": {\n    "extends": [\n      "react-app",\n      "react-app/jest"\n    ]\n  },\n  "browserslist": {\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ],\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ]\n  }\n}\n')),(0,s.kt)("p",null,"At this point the ",(0,s.kt)("i",null,"dependencies")," part is of most interest to us as it defines what ",(0,s.kt)("i",null,"dependencies"),", or external libraries, the project has."),(0,s.kt)("p",null,"We now want to use axios. Theoretically, we could define the library directly in the ",(0,s.kt)("i",null,"package.json")," file, but it is better to install it from the command line."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"npm install axios\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NB ",(0,s.kt)("em",{parentName:"strong"},"npm"),"-commands should always be run in the project root directory"),", which is where the ",(0,s.kt)("i",null,"package.json")," file can be found."),(0,s.kt)("p",null,"Axios is now included among the other dependencies:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "notes",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "@testing-library/jest-dom": "^5.16.1",\n    "@testing-library/react": "^12.1.2",\n    "@testing-library/user-event": "^13.5.0",\n    "axios": "^0.24.0", // highlight-line\n    "react": "^17.0.2",\n    "react-dom": "^17.0.2",\n    "react-scripts": "5.0.0",\n    "web-vitals": "^2.1.3"\n  },\n  // ...\n}\n')),(0,s.kt)("p",null,"In addition to adding axios to the dependencies, the ",(0,s.kt)("em",null,"npm install")," command also ",(0,s.kt)("i",null,"downloaded")," the library code. As with other dependencies, the code can be found in the ",(0,s.kt)("i",null,"node","_","modules")," directory located in the root. As one might have noticed, ",(0,s.kt)("i",null,"node","_","modules")," contains a fair amount of interesting stuff."),(0,s.kt)("p",null,"Let's make another addition. Install ",(0,s.kt)("i",null,"json-server")," as a development dependency (only used during development) by executing the command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"npm install json-server --save-dev\n")),(0,s.kt)("p",null,"and making a small addition to the ",(0,s.kt)("i",null,"scripts")," part of the ",(0,s.kt)("i",null,"package.json")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // ... \n  "scripts": {\n    "start": "react-scripts start",\n    "build": "react-scripts build",\n    "test": "react-scripts test",\n    "eject": "react-scripts eject",\n    "server": "json-server -p3001 --watch db.json" // highlight-line\n  },\n}\n')),(0,s.kt)("p",null,"We can now conveniently, without parameter definitions, start the json-server from the project root directory with the command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"npm run server\n")),(0,s.kt)("p",null,"We will get more familiar with the ",(0,s.kt)("em",{parentName:"p"},"npm")," tool later in the course."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NB")," The previously started json-server must be terminated before starting a new one, otherwise there will be trouble:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(4457).Z,width:"1572",height:"346"})),(0,s.kt)("p",null,"The red print in the error message informs us about the issue:"),(0,s.kt)("i",null,"Cannot bind to the port 3001. Please specify another port number either through --port argument or through the json-server.json configuration file"),(0,s.kt)("p",null,"As we can see, the application is not able to bind itself to the ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Port_(computer_networking)"},"port"),". The reason being that port 3001 is already occupied by the previously started json-server."),(0,s.kt)("p",null,"We used the command ",(0,s.kt)("em",{parentName:"p"},"npm install")," twice, but with slight differences:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"npm install axios\nnpm install json-server --save-dev\n")),(0,s.kt)("p",null,"There is a fine difference in the parameters. ",(0,s.kt)("i",null,"axios")," is installed as a runtime dependency of the application, because the execution of the program requires the existence of the library. On the other hand, ",(0,s.kt)("i",null,"json-server")," was installed as a development dependency (",(0,s.kt)("em",{parentName:"p"},"--save-dev"),"), since the program itself doesn't require it. It is used for assistance during software development. There will be more on different dependencies in the next part of the course."),(0,s.kt)("h3",{id:"axios-and-promises"},"Axios and promises"),(0,s.kt)("p",null,"Now we are ready to use axios. Going forward, json-server is assumed to be running on port 3001."),(0,s.kt)("p",null,"NB: To run json-server and your react app simultaneously, you may need to use two terminal windows. One to keep json-server running and the other to run react-app."),(0,s.kt)("p",null,"The library can be brought into use the same way other libraries, e.g. React, are, i.e. by using an appropriate ",(0,s.kt)("em",null,"import")," statement."),(0,s.kt)("p",null,"Add the following to the file ",(0,s.kt)("i",null,"index.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\n\nconst promise = axios.get('http://localhost:3001/notes')\nconsole.log(promise)\n\nconst promise2 = axios.get('http://localhost:3001/foobar')\nconsole.log(promise2)\n")),(0,s.kt)("p",null,"If you open ",(0,s.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")," in the browser, this should be printed to the console"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(9341).Z,width:"1672",height:"484"})),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," when the content of the file ",(0,s.kt)("i",null,"index.js")," changes, React does not always notice that automatically so you might need to refresh the browser to see your changes! A simple workaround to make React notice the change automatically, is to create a file named ",(0,s.kt)("i",null,".env")," in the root directory of the project and add this line ",(0,s.kt)("i",null,"FAST_REFRESH=false"),". Restart the app for the applied changes to take effect."),(0,s.kt)("p",null,"Axios' method ",(0,s.kt)("em",{parentName:"p"},"get")," returns a ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"},"promise"),"."),(0,s.kt)("p",null,"The documentation on Mozilla's site states the following about promises:"),(0,s.kt)("blockquote",null,(0,s.kt)("i",null,"A Promise is an object representing the eventual completion or failure of an asynchronous operation.")),(0,s.kt)("p",null,"In other words, a promise is an object that represents an asynchronous operation. A promise can have three distinct states:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The promise is ",(0,s.kt)("i",null,"pending"),": It means that the final value (one of the following two) is not available yet."),(0,s.kt)("li",{parentName:"ol"},"The promise is ",(0,s.kt)("i",null,"fulfilled"),": It means that the operation has completed and the final value is available, which generally is a successful operation. This state is sometimes also called ",(0,s.kt)("i",null,"resolved"),"."),(0,s.kt)("li",{parentName:"ol"},"The promise is ",(0,s.kt)("i",null,"rejected"),": It means that an error prevented the final value from being determined, which generally represents a failed operation.")),(0,s.kt)("p",null,"The first promise in our example is ",(0,s.kt)("i",null,"fulfilled"),", representing a successful ",(0,s.kt)("em",{parentName:"p"},"axios.get('http://localhost:3001/notes')")," request. The second one, however, is ",(0,s.kt)("i",null,"rejected"),", and the console tells us the reason. It looks like we were trying to make an HTTP GET request to a non-existent address."),(0,s.kt)("p",null,"If, and when, we want to access the result of the operation represented by the promise, we must register an event handler to the promise. This is achieved using the method ",(0,s.kt)("em",null,"then"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\n\nconst promise = axios.get('http://localhost:3001/notes')\n\npromise.then(response => {\n  console.log(response)\n})\n")),(0,s.kt)("p",null,"The following is printed to the console:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(3415).Z,width:"1778",height:"450"})),(0,s.kt)("p",null,"The JavaScript runtime environment calls the callback function registered by the ",(0,s.kt)("em",null,"then")," method providing it with a ",(0,s.kt)("em",null,"response")," object as a parameter. The ",(0,s.kt)("em",null,"response")," object contains all the essential data related to the response of an HTTP GET request, which would include the returned ",(0,s.kt)("i",null,"data"),", ",(0,s.kt)("i",null,"status code"),", and ",(0,s.kt)("i",null,"headers"),"."),(0,s.kt)("p",null,"Storing the promise object in a variable is generally unnecessary, and it's instead common to chain the ",(0,s.kt)("em",null,"then")," method call to the axios method call, so that it follows it directly:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\n\naxios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n  console.log(notes)\n})\n")),(0,s.kt)("p",null,"The callback function now takes the data contained within the response, stores it in a variable and prints the notes to the console."),(0,s.kt)("p",null,"A more readable way to format ",(0,s.kt)("i",null,"chained")," method calls is to place each call on its own line:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\n\naxios\n  .get('http://localhost:3001/notes')\n  .then(response => {\n    const notes = response.data\n    console.log(notes)\n  })\n")),(0,s.kt)("p",null,"The data returned by the server is plain text, basically just one long string. The axios library is still able to parse the data into a JavaScript array, since the server has specified that the data format is ",(0,s.kt)("i",null,"application/json; charset=utf-8")," (see previous image) using the ",(0,s.kt)("i",null,"content-type")," header."),(0,s.kt)("p",null,"We can finally begin using the data fetched from the server."),(0,s.kt)("p",null,"Let's try and request the notes from our local server and render them, initially as the App component. Please note that this approach has many issues, as we're rendering the entire ",(0,s.kt)("i",null,"App")," component only when we successfully retrieve a response:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import ReactDOM from 'react-dom'\nimport App from './App'\n\nimport axios from 'axios' // highlight-line\n\naxios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n  ReactDOM.render(\n    <App notes={notes} />,\n    document.getElementById('root')\n  )\n})\n")),(0,s.kt)("p",null,"This method could be acceptable in some circumstances, but it's somewhat problematic. Let's instead move the fetching of the data into the ",(0,s.kt)("i",null,"App")," component."),(0,s.kt)("p",null,"What's not immediately obvious, however, is where the command ",(0,s.kt)("em",null,"axios.get")," should be placed within the component."),(0,s.kt)("h3",{id:"effect-hooks"},"Effect-hooks"),(0,s.kt)("p",null,"We have already used ",(0,s.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-state.html"},"state hooks")," that were introduced along with React version ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/react/v/16.8.0"},"16.8.0"),", which provide state to React components defined as functions - the so-called ",(0,s.kt)("i",null,"functional components"),". Version 16.8.0 also introduces the ",(0,s.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-effect.html"},"effect hooks")," as a new feature. As per the official docs:"),(0,s.kt)("blockquote",null,(0,s.kt)("i",null,"The Effect Hook lets you perform side effects in function components."),(0,s.kt)("i",null,"Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects.")),(0,s.kt)("p",null,"As such, effect hooks are precisely the right tool to use when fetching data from a server."),(0,s.kt)("p",null,"Let's remove the fetching of data from ",(0,s.kt)("i",null,"index.js"),". Since we're gonna be retrieving the notes from the server, there is no longer a need to pass data as props to the ",(0,s.kt)("i",null,"App")," component. So ",(0,s.kt)("i",null,"index.js")," can be simplified to:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"ReactDOM.render(<App />, document.getElementById('root'))\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("i",null,"App")," component changes as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react' // highlight-line\nimport axios from 'axios' // highlight-line\nimport Note from './components/Note'\n\nconst App = () => { // highlight-line\n  const [notes, setNotes] = useState([]) // highlight-line\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n// highlight-start\n  useEffect(() => {\n    console.log('effect')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fulfilled')\n        setNotes(response.data)\n      })\n  }, [])\n\n  console.log('render', notes.length, 'notes')\n// highlight-end\n\n  // ...\n}\n")),(0,s.kt)("p",null,"We have also added a few helpful prints, which clarify the progression of the execution."),(0,s.kt)("p",null,"This is printed to the console"),(0,s.kt)("pre",null,"render 0 notes effect promise fulfilled render 3 notes"),(0,s.kt)("p",null,"First the body of the function defining the component is executed and the component is rendered for the first time. At this point ",(0,s.kt)("i",null,"render 0 notes")," is printed, meaning data hasn't been fetched from the server yet."),(0,s.kt)("p",null,"The following function, or effect in React parlance:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"() => {\n  console.log('effect')\n  axios\n    .get('http://localhost:3001/notes')\n    .then(response => {\n      console.log('promise fulfilled')\n      setNotes(response.data)\n    })\n}\n")),(0,s.kt)("p",null,"is executed immediately after rendering. The execution of the function results in ",(0,s.kt)("i",null,"effect")," being printed to the console, and the command ",(0,s.kt)("em",null,"axios.get")," initiates the fetching of data from the server as well as registers the following function as an ",(0,s.kt)("i",null,"event handler")," for the operation:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"response => {\n  console.log('promise fulfilled')\n  setNotes(response.data)\n})\n")),(0,s.kt)("p",null,"When data arrives from the server, the JavaScript runtime calls the function registered as the event handler, which prints ",(0,s.kt)("i",null,"promise fulfilled")," to the console and stores the notes received from the server into the state using the function ",(0,s.kt)("em",null,"setNotes(response.data)"),"."),(0,s.kt)("p",null,"As always, a call to a state-updating function triggers the re-rendering of the component. As a result, ",(0,s.kt)("i",null,"render 3 notes")," is printed to the console, and the notes fetched from the server are rendered to the screen."),(0,s.kt)("p",null,"Finally, let's take a look at the definition of the effect hook as a whole:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"useEffect(() => {\n  console.log('effect')\n  axios\n    .get('http://localhost:3001/notes').then(response => {\n      console.log('promise fulfilled')\n      setNotes(response.data)\n    })\n}, [])\n")),(0,s.kt)("p",null,"Let's rewrite the code a bit differently."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const hook = () => {\n  console.log('effect')\n  axios\n    .get('http://localhost:3001/notes')\n    .then(response => {\n      console.log('promise fulfilled')\n      setNotes(response.data)\n    })\n}\n\nuseEffect(hook, [])\n")),(0,s.kt)("p",null,"Now we can see more clearly that the function ",(0,s.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#useeffect"},"useEffect")," actually takes ",(0,s.kt)("i",null,"two parameters"),". The first is a function, the ",(0,s.kt)("i",null,"effect")," itself. According to the documentation:"),(0,s.kt)("blockquote",null,(0,s.kt)("i",null,"By default, effects run after every completed render, but you can choose to fire it only when certain values have changed.")),(0,s.kt)("p",null,"So by default the effect is ",(0,s.kt)("i",null,"always")," run after the component has been rendered. In our case, however, we only want to execute the effect along with the first render."),(0,s.kt)("p",null,"The second parameter of ",(0,s.kt)("em",null,"useEffect")," is used to ",(0,s.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect"},"specify how often the effect is run"),". If the second parameter is an empty array ",(0,s.kt)("em",null,"[]"),", then the effect is only run along with the first render of the component."),(0,s.kt)("p",null,"There are many possible use cases for an effect hook other than fetching data from the server. However, this use is sufficient for us, for now."),(0,s.kt)("p",null,"Think back to the sequence of events we just discussed. Which parts of the code are run? In what order? How often? Understanding the order of events is critical!"),(0,s.kt)("p",null,"Note that we could have also written the code of the effect function this way:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"useEffect(() => {\n  console.log('effect')\n\n  const eventHandler = response => {\n    console.log('promise fulfilled')\n    setNotes(response.data)\n  }\n\n  const promise = axios.get('http://localhost:3001/notes')\n  promise.then(eventHandler)\n}, [])\n")),(0,s.kt)("p",null,"A reference to an event handler function is assigned to the variable ",(0,s.kt)("em",null,"eventHandler"),". The promise returned by the ",(0,s.kt)("em",null,"get")," method of Axios is stored in the variable ",(0,s.kt)("em",null,"promise"),". The registration of the callback happens by giving the ",(0,s.kt)("em",null,"eventHandler")," variable, referring to the event-handler function, as a parameter to the ",(0,s.kt)("em",null,"then")," method of the promise. It isn't usually necessary to assign functions and promises to variables, and a more compact way of representing things, as seen further above, is sufficient."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"useEffect(() => {\n  console.log('effect')\n  axios\n    .get('http://localhost:3001/notes')\n    .then(response => {\n      console.log('promise fulfilled')\n      setNotes(response.data)\n    })\n}, [])\n")),(0,s.kt)("p",null,"We still have a problem in our application. When adding new notes, they are not stored on the server."),(0,s.kt)("p",null,"The code for the application, as described so far, can be found in full on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-4"},"github"),", on branch ",(0,s.kt)("i",null,"part2-4"),"."),(0,s.kt)("h3",{id:"the-development-runtime-environment"},"The development runtime environment"),(0,s.kt)("p",null,"The configuration for the whole application has steadily grown more complex. Let's review what happens and where. The following image describes the makeup of the application"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(4045).Z,width:"1060",height:"722"})),(0,s.kt)("p",null,"The JavaScript code making up our React application is run in the browser. The browser gets the JavaScript from the ",(0,s.kt)("i",null,"React dev server"),", which is the application that runs after running the command ",(0,s.kt)("em",null,"npm start"),". The dev-server transforms the JavaScript into a format understood by the browser. Among other things, it stitches together JavaScript from different files into one file. We'll discuss the dev-server in more detail in part 7 of the course."),(0,s.kt)("p",null,"The React application running in the browser fetches the JSON formatted data from ",(0,s.kt)("i",null,"json-server")," running on port 3001 on the machine. The server we query the data from - ",(0,s.kt)("i",null,"json-server")," - gets its data from the file ",(0,s.kt)("i",null,"db.json"),"."),(0,s.kt)("p",null,"At this point in development, all the parts of the application happen to reside on the software developer's machine, otherwise known as localhost. The situation changes when the application is deployed to the internet. We will do this in part 3."),(0,s.kt)("h2",{id:"altering-data-in-server"},"Altering data in server"),(0,s.kt)("p",null,"When creating notes in our application, we would naturally want to store them in some backend server. The ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/typicode/json-server"},"json-server")," package claims to be a so-called REST or RESTful API in its documentation:"),(0,s.kt)("blockquote",null,(0,s.kt)("i",null,"Get a full fake REST API with zero coding in less than 30 seconds (seriously)")),(0,s.kt)("p",null,"The json-server does not exactly match the description provided by the textbook ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Representational_state_transfer"},"definition")," of a REST API, but neither do most other APIs claiming to be RESTful."),(0,s.kt)("p",null,"We will take a closer look at REST later in the course, but it's important to familiarize ourselves at this point with some of the ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Representational_state_transfer#Applied_to_web_services"},"conventions")," used by json-server and REST APIs in general. In particular, we will be taking a look at the conventional use of ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/typicode/json-server#routes"},"routes"),", aka URLs and HTTP request types, in REST."),(0,s.kt)("h3",{id:"rest"},"REST"),(0,s.kt)("p",null,"In REST terminology, we refer to individual data objects, such as the notes in our application, as ",(0,s.kt)("i",null,"resources"),". Every resource has a unique address associated with it - its URL. According to a general convention used by json-server, we would be able to locate an individual note at the resource URL ",(0,s.kt)("i",null,"notes/3"),", where 3 is the id of the resource. The ",(0,s.kt)("i",null,"notes")," url, on the other hand, would point to a resource collection containing all the notes."),(0,s.kt)("p",null,"Resources are fetched from the server with HTTP GET requests. For instance, an HTTP GET request to the URL ",(0,s.kt)("i",null,"notes/3")," will return the note that has the id number 3. An HTTP GET request to the ",(0,s.kt)("i",null,"notes")," URL would return a list of all notes."),(0,s.kt)("p",null,"Creating a new resource for storing a note is done by making an HTTP POST request to the ",(0,s.kt)("i",null,"notes")," URL according to the REST convention that the json-server adheres to. The data for the new note resource is sent in the ",(0,s.kt)("i",null,"body")," of the request."),(0,s.kt)("p",null,"json-server requires all data to be sent in JSON format. What this means in practice is that the data must be a correctly formatted string, and that the request must contain the ",(0,s.kt)("i",null,"Content-Type")," request header with the value ",(0,s.kt)("i",null,"application/json"),"."),(0,s.kt)("h3",{id:"sending-data-to-the-server"},"Sending Data to the Server"),(0,s.kt)("p",null,"Let's make the following changes to the event handler responsible for creating a new note:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"addNote = event => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date(),\n    important: Math.random() < 0.5,\n  }\n\n// highlight-start\n  axios\n    .post('http://localhost:3001/notes', noteObject)\n    .then(response => {\n      console.log(response)\n    })\n// highlight-end\n}\n")),(0,s.kt)("p",null,"We create a new object for the note but omit the ",(0,s.kt)("i",null,"id")," property, since it's better to let the server generate ids for our resources!"),(0,s.kt)("p",null,"The object is sent to the server using the axios ",(0,s.kt)("em",null,"post")," method. The registered event handler logs the response that is sent back from the server to the console."),(0,s.kt)("p",null,"When we try to create a new note, the following output pops up in the console:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(2707).Z,width:"1592",height:"410"})),(0,s.kt)("p",null,"The newly created note resource is stored in the value of the ",(0,s.kt)("i",null,"data")," property of the ",(0,s.kt)("em",{parentName:"p"},"response")," object."),(0,s.kt)("p",null,"Sometimes it can be useful to inspect HTTP requests in the ",(0,s.kt)("i",null,"Network")," tab of Chrome developer tools:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(4354).Z,width:"1712",height:"846"})),(0,s.kt)("p",null,"We can use the inspector to check that the headers sent in the POST request are what we expected them to be, and that their values are correct."),(0,s.kt)("p",null,"Since the data we sent in the POST request was a JavaScript object, axios automatically knew to set the appropriate ",(0,s.kt)("i",null,"application/json")," value for the ",(0,s.kt)("i",null,"Content-Type")," header."),(0,s.kt)("p",null,"The new note is not rendered to the screen yet. This is because we did not update the state of the ",(0,s.kt)("i",null,"App")," component when we created the new note. Let's fix this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"addNote = event => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date(),\n    important: Math.random() > 0.5,\n  }\n\n  axios\n    .post('http://localhost:3001/notes', noteObject)\n    .then(response => {\n      // highlight-start\n      setNotes(notes.concat(response.data))\n      setNewNote('')\n      // highlight-end\n    })\n}\n")),(0,s.kt)("p",null,"The new note returned by the backend server is added to the list of notes in our application's state in the customary way of using the ",(0,s.kt)("em",null,"setNotes")," function and then resetting the note creation form. An important detail to remember is that the ",(0,s.kt)("em",null,"concat")," method does not change the component's original state, but instead creates a new copy of the list."),(0,s.kt)("p",null,"Once the data returned by the server starts to have an effect on the behavior of our web applications, we are immediately faced with a whole new set of challenges arising from, for instance, the asynchronicity of communication. This necessitates new debugging strategies, console logging and other means of debugging become increasingly more important. We must also develop a sufficient understanding of the principles of both the JavaScript runtime and React components. Guessing won't be enough."),(0,s.kt)("p",null,"It's beneficial to inspect the state of the backend server, e.g. through the browser:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(898).Z,width:"1754",height:"922"})),(0,s.kt)("p",null,"This makes it possible to verify that all the data we intended to send was actually received by the server."),(0,s.kt)("p",null,"In the next part of the course we will learn to implement our own logic in the backend. We will then take a closer look at tools like ",(0,s.kt)("a",{parentName:"p",href:"https://www.postman.com/downloads/"},"Postman")," that helps us to debug our server applications. However, inspecting the state of the json-server through the browser is sufficient for our current needs."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("strong",{parentName:"p"},"NB:")," In the current version of our application the browser adds the creation date property to the note. Since the clock of the machine running the browser can be wrongly configured, it's much wiser to let the backend server generate this timestamp for us. This is in fact what we will do in the next part of the course.")),(0,s.kt)("p",null,"The code for the current state of our application can be found in the  ",(0,s.kt)("i",null,"part2-5")," branch on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-5"},"GitHub"),"."),(0,s.kt)("h3",{id:"changing-the-importance-of-notes"},"Changing the Importance of Notes"),(0,s.kt)("p",null,"Let's add a button to every note that can be used for toggling its importance."),(0,s.kt)("p",null,"We make the following changes to the ",(0,s.kt)("i",null,"Note")," component:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n")),(0,s.kt)("p",null,"We add a button to the component and assign its event handler as the ",(0,s.kt)("em",null,"toggleImportance")," function passed in the component's props."),(0,s.kt)("p",null,"The ",(0,s.kt)("i",null,"App")," component defines an initial version of the ",(0,s.kt)("em",null,"toggleImportanceOf")," event handler function and passes it to every ",(0,s.kt)("i",null,"Note")," component:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  // ...\n\n  // highlight-start\n  const toggleImportanceOf = (id) => {\n    console.log('importance of ' + id + ' needs to be toggled')\n  }\n  // highlight-end\n\n  // ...\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      <ul>\n        {notesToShow.map(note => \n          <Note\n            key={note.id}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)} // highlight-line\n          />\n        )}\n      </ul>\n      // ...\n    </div>\n  )\n}\n")),(0,s.kt)("p",null,"Notice how every note receives its own ",(0,s.kt)("i",null,"unique")," event handler function, since the ",(0,s.kt)("i",null,"id")," of every note is unique."),(0,s.kt)("p",null,"E.g. if ",(0,s.kt)("i",null,"note.id")," is 3, the event handler function returned by ",(0,s.kt)("em",{parentName:"p"},"toggleImportance(note.id)")," will be:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"() => { console.log('importance of 3 needs to be toggled') }\n")),(0,s.kt)("p",null,"A short reminder here. The string printed by the event handler is defined in Java-like manner by adding the strings:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"console.log('importance of ' + id + ' needs to be toggled')\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"},"template string")," syntax added in ES6 can be used to write similar strings in a much nicer way:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"console.log(`importance of ${id} needs to be toggled`)\n")),(0,s.kt)("p",null,'We can now use the "dollar-bracket"-syntax to add parts to the string that will evaluate JavaScript expressions, e.g. the value of a variable. Note that the quotation marks used in template strings differ from the quotation marks used in regular JavaScript strings.'),(0,s.kt)("p",null,"Individual notes stored in the json-server backend can be modified in two different ways by making HTTP requests to the note's unique URL. We can either ",(0,s.kt)("i",null,"replace")," the entire note with an HTTP PUT request, or only change some of the note's properties with an HTTP PATCH request."),(0,s.kt)("p",null,"The final form of the event handler function is the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const toggleImportanceOf = id => {\n  const url = `http://localhost:3001/notes/${id}`\n  const note = notes.find(n => n.id === id)\n  const changedNote = { ...note, important: !note.important }\n\n  axios.put(url, changedNote).then(response => {\n    setNotes(notes.map(note => note.id !== id ? note : response.data))\n  })\n}\n")),(0,s.kt)("p",null,"Almost every line of code in the function body contains important details. The first line defines the unique url for each note resource based on its id."),(0,s.kt)("p",null,"The array ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"},"find method")," is used to find the note we want to modify, and we then assign it to the ",(0,s.kt)("em",{parentName:"p"},"note")," variable."),(0,s.kt)("p",null,"After this we create a ",(0,s.kt)("i",null,"new object")," that is an exact copy of the old note, apart from the important property. "),(0,s.kt)("p",null,"The code for creating the new object that uses the ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"},"object spread")," syntax may seem a bit strange at first:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const changedNote = { ...note, important: !note.important }\n")),(0,s.kt)("p",null,"In practice ",(0,s.kt)("em",null,"{ ...note }")," creates a new object with copies of all the properties from the ",(0,s.kt)("em",{parentName:"p"},"note")," object. When we add properties inside the curly braces after the spreaded object, e.g. ",(0,s.kt)("em",null,"{ ...note, important: true }"),", then the value of the ",(0,s.kt)("em",{parentName:"p"},"important")," property of the new object will be ",(0,s.kt)("em",{parentName:"p"},"true"),". In our example the ",(0,s.kt)("em",null,"important")," property gets the negation of its previous value in the original object."),(0,s.kt)("p",null,"There's a few things to point out. Why did we make a copy of the note object we wanted to modify, when the following code also appears to work?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const note = notes.find(n => n.id === id)\nnote.important = !note.important\n\naxios.put(url, note).then(response => {\n  // ...\n")),(0,s.kt)("p",null,"This is not recommended because the variable ",(0,s.kt)("em",null,"note")," is a reference to an item in the ",(0,s.kt)("em",null,"notes")," array in the component's state, and as we recall we must never mutate state directly in React. "),(0,s.kt)("p",null,"It's also worth noting that the new object ",(0,s.kt)("em",{parentName:"p"},"changedNote")," is only a so-called ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Object_copying#Shallow_copy"},"shallow copy"),", meaning that the values of the new object are the same as the values of the old object. If the values of the old object were objects themselves, then the copied values in new object would reference the same objects that were in the old object."),(0,s.kt)("p",null,"The new note is then sent with a PUT request to the backend where it will replace the old object."),(0,s.kt)("p",null,"The callback function sets the component's ",(0,s.kt)("em",null,"notes")," state to a new array that contains all the items from the previous ",(0,s.kt)("em",null,"notes")," array, except for the old note which is replaced by the updated version of it returned by the server:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"axios.put(url, changedNote).then(response => {\n  setNotes(notes.map(note => note.id !== id ? note : response.data))\n})\n")),(0,s.kt)("p",null,"This is accomplished with the ",(0,s.kt)("em",null,"map")," method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"notes.map(note => note.id !== id ? note : response.data)\n")),(0,s.kt)("p",null,"The map method creates a new array by mapping every item from the old array into an item in the new array. In our example, the new array is created conditionally so that if ",(0,s.kt)("em",null,"note.id !== id")," is true, we simply copy the item from the old array into the new array. If the condition is false, then the note object returned by the server is added to the array instead."),(0,s.kt)("p",null,"This ",(0,s.kt)("em",null,"map")," trick may seem a bit strange at first, but it's worth spending some time wrapping your head around it. We will be using this method many times throughout the course."),(0,s.kt)("h3",{id:"extracting-communication-with-the-backend-into-a-separate-module"},"Extracting Communication with the Backend into a Separate Module"),(0,s.kt)("p",null,"The ",(0,s.kt)("i",null,"App")," component has become somewhat bloated after adding the code for communicating with the backend server. In the spirit of the ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Single_responsibility_principle"},"single responsibility principle"),", we deem it wise to extract this communication into its own module."),(0,s.kt)("p",null,"Let's create a ",(0,s.kt)("i",null,"src/services")," directory and add a file there called ",(0,s.kt)("i",null,"notes.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/notes'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update \n}\n")),(0,s.kt)("p",null,"The module returns an object that has three functions (",(0,s.kt)("i",null,"getAll"),", ",(0,s.kt)("i",null,"create"),", and ",(0,s.kt)("i",null,"update"),") as its properties that deal with notes. The functions directly return the promises returned by the axios methods."),(0,s.kt)("p",null,"The ",(0,s.kt)("i",null,"App")," component uses ",(0,s.kt)("em",null,"import")," to get access to the module:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import noteService from './services/notes' // highlight-line\n\nconst App = () => {\n")),(0,s.kt)("p",null,"The functions of the module can be used directly with the imported variable ",(0,s.kt)("em",{parentName:"p"},"noteService")," as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  // ...\n\n  useEffect(() => {\n    // highlight-start\n    noteService\n      .getAll()\n      .then(response => {\n        setNotes(response.data)\n      })\n    // highlight-end\n  }, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    // highlight-start\n    noteService\n      .update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response.data))\n      })\n    // highlight-end\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n// highlight-start\n    noteService\n      .create(noteObject)\n      .then(response => {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n// highlight-end\n  }\n\n  // ...\n}\n\nexport default App\n")),(0,s.kt)("p",null,"We could take our implementation a step further. When the ",(0,s.kt)("i",null,"App")," component uses the functions, it receives an object that contains the entire response for the HTTP request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"noteService\n  .getAll()\n  .then(response => {\n    setNotes(response.data)\n  })\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("i",null,"App")," component only uses the ",(0,s.kt)("i",null,"response.data")," property of the response object."),(0,s.kt)("p",null,"The module would be much nicer to use if, instead of the entire HTTP response, we would only get the response data. Using the module would then look like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"noteService\n  .getAll()\n  .then(initialNotes => {\n    setNotes(initialNotes)\n  })\n")),(0,s.kt)("p",null,"We can achieve this by changing the code in the module as follows (the current code contains some copy-paste, but we will tolerate that for now):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update \n}\n")),(0,s.kt)("p",null,"We no longer return the promise returned by axios directly. Instead, we assign the promise to the ",(0,s.kt)("em",null,"request")," variable and call its ",(0,s.kt)("em",null,"then")," method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n")),(0,s.kt)("p",null,"The last row in our function is simply a more compact expression of the same code as shown below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const getAll = () => {\n  const request = axios.get(baseUrl)\n  // highlight-start\n  return request.then(response => {\n    return response.data\n  })\n  // highlight-end\n}\n")),(0,s.kt)("p",null,"The modified ",(0,s.kt)("em",null,"getAll")," function still returns a promise, as the ",(0,s.kt)("em",null,"then")," method of a promise also ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"},"returns a promise"),". "),(0,s.kt)("p",null,"After defining the parameter of the ",(0,s.kt)("em",null,"then")," method to directly return ",(0,s.kt)("i",null,"response.data"),", we have gotten the ",(0,s.kt)("em",null,"getAll")," function to work like we wanted it to. When the HTTP request is successful, the promise returns the data sent back in the response from the backend."),(0,s.kt)("p",null,"We have to update the ",(0,s.kt)("i",null,"App")," component to work with the changes made to our module.  We have to fix the callback functions given as parameters to the ",(0,s.kt)("em",null,"noteService")," object's methods, so that they use the directly returned response data:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  // ...\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      // highlight-start      \n      .then(initialNotes => {\n        setNotes(initialNotes)\n      // highlight-end\n      })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      // highlight-start      \n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      // highlight-end\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      // highlight-start      \n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n      // highlight-end\n        setNewNote('')\n      })\n  }\n\n  // ...\n}\n")),(0,s.kt)("p",null,"This is all quite complicated and attempting to explain it may just make it harder to understand. The internet is full of material discussing the topic, such as ",(0,s.kt)("a",{parentName:"p",href:"https://javascript.info/promise-chaining"},"this")," one."),(0,s.kt)("p",null,'The "Async and performance" book from the ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/getify/You-Dont-Know-JS/tree/1st-ed"},"You do not know JS")," book series ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch3.md"},"explains the topic")," well, but the explanation is many pages long."),(0,s.kt)("p",null,"Promises are central to modern JavaScript development and it is highly recommended to invest a reasonable amount of time into understanding them."),(0,s.kt)("h3",{id:"cleaner-syntax-for-defining-object-literals"},"Cleaner Syntax for Defining Object Literals"),(0,s.kt)("p",null,"The module defining note related services currently exports an object with the properties ",(0,s.kt)("i",null,"getAll"),", ",(0,s.kt)("i",null,"create")," and ",(0,s.kt)("i",null,"update")," that are assigned to functions for handling notes."),(0,s.kt)("p",null,"The module definition was:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update \n}\n")),(0,s.kt)("p",null,"The module exports the following, rather peculiar looking, object:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"{ \n  getAll: getAll, \n  create: create, \n  update: update \n}\n")),(0,s.kt)("p",null,"The labels to the left of the colon in the object definition are the ",(0,s.kt)("i",null,"keys")," of the object, whereas the ones to the right of it are ",(0,s.kt)("i",null,"variables")," that are defined inside of the module."),(0,s.kt)("p",null,"Since the names of the keys and the assigned variables are the same, we can write the object definition with more compact syntax:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"{ \n  getAll, \n  create, \n  update \n}\n")),(0,s.kt)("p",null,"As a result the module definition gets simplified into the following form:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update } // highlight-line\n")),(0,s.kt)("p",null,"In defining the object using this shorter notation, we make use of a ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Property_definitions"},"new feature")," that was introduced to JavaScript through ES6, enabling a slightly more compact way of defining objects using variables."),(0,s.kt)("p",null,"To demonstrate this feature, let's consider a situation where we have the following values assigned to variables:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const name = 'Leevi'\nconst age = 0\n")),(0,s.kt)("p",null,"In older versions of JavaScript we had to define an object like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const person = {\n  name: name,\n  age: age\n}\n")),(0,s.kt)("p",null,"However, since both the property fields and the variable names in the object are the same, it's enough to simply write the following in ES6 JavaScript: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const person = { name, age }\n")),(0,s.kt)("p",null,"The result is identical for both expressions. They both create an object with a ",(0,s.kt)("i",null,"name")," property with the value ",(0,s.kt)("i",null,"Leevi")," and an ",(0,s.kt)("i",null,"age")," property with the value ",(0,s.kt)("i",null,"0"),"."),(0,s.kt)("h3",{id:"promises-and-errors"},"Promises and Errors"),(0,s.kt)("p",null,"If our application allowed users to delete notes, we could end up in a situation where a user tries to change the importance of a note that has already been deleted from the system."),(0,s.kt)("p",null,"Let's simulate this situation by making the ",(0,s.kt)("em",null,"getAll"),' function of the note service return a "hardcoded" note that does not actually exist in the backend server:'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n")),(0,s.kt)("p",null,"When we try to change the importance of the hardcoded note, we see the following error message in the console. The error says that the backend server responded to our HTTP PUT request with a status code 404 ",(0,s.kt)("i",null,"not found"),"."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(7360).Z,width:"1778",height:"294"})),(0,s.kt)("p",null,"The application should be able to handle these types of error situations gracefully. Users won't be able to tell that an error has actually occurred unless they happen to have their console open. The only way the error can be seen  in the application is that clicking the button has no effect on the importance of the note."),(0,s.kt)("p",null,"A promise can be in one of three different states. When an HTTP request fails, the associated promise is ",(0,s.kt)("i",null,"rejected"),". Our current code does not handle this rejection in any way."),(0,s.kt)("p",null,"The rejection of a promise is ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"},"handled")," by providing the ",(0,s.kt)("em",null,"then")," method with a second callback function, which is called in the situation where the promise is rejected."),(0,s.kt)("p",null,"The more common way of adding a handler for rejected promises is to use the ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"},"catch")," method. "),(0,s.kt)("p",null,"In practice, the error handler for rejected promises is defined like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"axios\n  .get('http://example.com/probably_will_fail')\n  .then(response => {\n    console.log('success!')\n  })\n  .catch(error => {\n    console.log('fail')\n  })\n")),(0,s.kt)("p",null,"If the request fails, the event handler registered with the ",(0,s.kt)("em",null,"catch")," method gets called."),(0,s.kt)("p",null,"The ",(0,s.kt)("em",null,"catch")," method is often utilized by placing it deeper within the promise chain."),(0,s.kt)("p",null,"When our application makes an HTTP request, we are in fact creating a ",(0,s.kt)("a",{parentName:"p",href:"https://javascript.info/promise-chaining"},"promise chain"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"axios\n  .put(`${baseUrl}/${id}`, newObject)\n  .then(response => response.data)\n  .then(changedNote => {\n    // ...\n  })\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("em",null,"catch")," method can be used to define a handler function at the end of a promise chain, which is called once any promise in the chain throws an error and the promise becomes ",(0,s.kt)("i",null,"rejected"),". "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"axios\n  .put(`${baseUrl}/${id}`, newObject)\n  .then(response => response.data)\n  .then(changedNote => {\n    // ...\n  })\n  .catch(error => {\n    console.log('fail')\n  })\n")),(0,s.kt)("p",null,"Let's use this feature and register an error handler in the ",(0,s.kt)("i",null,"App")," component:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const toggleImportanceOf = id => {\n  const note = notes.find(n => n.id === id)\n  const changedNote = { ...note, important: !note.important }\n\n  noteService\n    .update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    // highlight-start\n    .catch(error => {\n      alert(\n        `the note '${note.content}' was already deleted from server`\n      )\n      setNotes(notes.filter(n => n.id !== id))\n    })\n    // highlight-end\n}\n")),(0,s.kt)("p",null,"The error message is displayed to the user with the trusty old ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert"},"alert")," dialog popup, and the deleted note gets filtered out from the state."),(0,s.kt)("p",null,"Removing an already deleted note from the application's state is done with the array ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"},"filter")," method, which returns a new array comprising only of the items from the list for which the function that was passed as a parameter returns true for:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"notes.filter(n => n.id !== id)\n")),(0,s.kt)("p",null,"It's probably not a good idea to use alert in more serious React applications. We will soon learn a more advanced way of displaying messages and notifications to users. There are situations, however, where a simple, battle-tested method like ",(0,s.kt)("em",null,"alert")," can function as a starting point. A more advanced method could always be added in later, given that there's time and energy for it."),(0,s.kt)("p",null,"The code for the current state of our application can be found in the  ",(0,s.kt)("i",null,"part2-6")," branch on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-6"},"GitHub"),"."),(0,s.kt)("h2",{id:"adding-styles-to-react-app"},"Adding styles to React app"),(0,s.kt)("p",null,"The appearance of our current application is quite modest. Before we move onto the next part, let's take a look at how we can add styles to a React application. There are several different ways of doing this and we will take a look at the other methods later on. At first, we will add CSS to our application the old-school way; in a single file without using a ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor"},"CSS preprocessor")," (although this is not entirely true as we will learn later on). "),(0,s.kt)("p",null,"Let's add a new ",(0,s.kt)("i",null,"index.css")," file under the ",(0,s.kt)("i",null,"src")," directory and then add it to the application by importing it in the ",(0,s.kt)("i",null,"index.js")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import './index.css'\n")),(0,s.kt)("p",null,"Let's add the following CSS rule to the ",(0,s.kt)("i",null,"index.css")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},"h1 {\n  color: green;\n}\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," when the content of the file ",(0,s.kt)("i",null,"index.css")," changes, React might not notice that automatically so you may need to refresh the browser to see your changes!"),(0,s.kt)("p",null,"CSS rules comprise of ",(0,s.kt)("i",null,"selectors")," and ",(0,s.kt)("i",null,"declarations"),". The selector defines which elements the rule should be applied to. The selector above is ",(0,s.kt)("i",null,"h1"),", which will match all of the ",(0,s.kt)("i",null,"h1")," header tags in our application."),(0,s.kt)("p",null,"The declaration sets the ",(0,s.kt)("em",{parentName:"p"},"color")," property to the value ",(0,s.kt)("i",null,"green"),"."),(0,s.kt)("p",null,"One CSS rule can contain an arbitrary number of properties. Let's modify the previous rule to make the text cursive, by defining the font style as ",(0,s.kt)("i",null,"italic"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},"h1 {\n  color: green;\n  font-style: italic;  // highlight-line\n}\n")),(0,s.kt)("p",null,"There are many ways of matching elements by using ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"},"different types of CSS selectors"),"."),(0,s.kt)("p",null,"If we wanted to target, let's say, each one of the notes with our styles, we could use the selector ",(0,s.kt)("i",null,"li"),", as all of the notes are wrapped inside ",(0,s.kt)("i",null,"li")," tags:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const Note = ({ note, toggleImportance }) => {\n  const label = note.important \n    ? 'make not important' \n    : 'make important';\n\n  return (\n    <li>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n")),(0,s.kt)("p",null,"Let's add the following rule to our style sheet (since my knowledge of elegant web design is close to zero, the styles don't make much sense):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},"li {\n  color: grey;\n  padding-top: 3px;\n  font-size: 15px;\n}\n")),(0,s.kt)("p",null,"Using element types for defining CSS rules is slightly problematic. If our application contained other ",(0,s.kt)("i",null,"li")," tags, the same style rule would also be applied to them."),(0,s.kt)("p",null,"If we want to apply our style specifically to notes, then it is better to use ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors"},"class selectors"),"."),(0,s.kt)("p",null,"In regular HTML, classes are defined as the value of the ",(0,s.kt)("i",null,"class")," attribute:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<li class="note">some text...</li>\n')),(0,s.kt)("p",null,"In React we have to use the ",(0,s.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/dom-elements.html#classname"},"className")," attribute instead of the class attribute. With this in mind, let's make the following changes to our ",(0,s.kt)("i",null,"Note")," component:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const Note = ({ note, toggleImportance }) => {\n  const label = note.important \n    ? 'make not important' \n    : 'make important';\n\n  return (\n    <li className='note'> // highlight-line\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n")),(0,s.kt)("p",null,"Class selectors are defined with the ",(0,s.kt)("em",{parentName:"p"},".classname")," syntax:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".note {\n  color: grey;\n  padding-top: 5px;\n  font-size: 15px;\n}\n")),(0,s.kt)("p",null,"If you now add other ",(0,s.kt)("i",null,"li")," elements to the application, they will not be affected by the style rule above."),(0,s.kt)("h3",{id:"improved-error-message"},"Improved error message"),(0,s.kt)("p",null,"We previously implemented the error message that was displayed when the user tried to toggle the importance of a deleted note with the ",(0,s.kt)("em",null,"alert")," method. Let's implement the error message as its own React component."),(0,s.kt)("p",null,"The component is quite simple:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n")),(0,s.kt)("p",null,"If the value of the ",(0,s.kt)("em",null,"message")," prop is ",(0,s.kt)("em",null,"null"),", then nothing is rendered to the screen, and in other cases the message gets rendered inside of a div element."),(0,s.kt)("p",null,"Let's add a new piece of state called ",(0,s.kt)("i",null,"errorMessage")," to the ",(0,s.kt)("i",null,"App")," component. Let's initialize it with some error message so that we can immediately test our component:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...') // highlight-line\n\n  // ...\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} /> // highlight-line\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      // ...\n    </div>\n  )\n}\n")),(0,s.kt)("p",null,"Then let's add a style rule that suits an error message:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".error {\n  color: red;\n  background: lightgrey;\n  font-size: 20px;\n  border-style: solid;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 10px;\n}\n")),(0,s.kt)("p",null,"Now we are ready to add the logic for displaying the error message. Let's change the ",(0,s.kt)("em",null,"toggleImportanceOf")," function in the following way:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        // highlight-start\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        // highlight-end\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n")),(0,s.kt)("p",null,"When the error occurs we add a descriptive error message to the ",(0,s.kt)("em",null,"errorMessage")," state. At the same time we start a timer, that will set the ",(0,s.kt)("em",null,"errorMessage")," state to ",(0,s.kt)("em",null,"null")," after five seconds."),(0,s.kt)("p",null,"The result looks like this:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(1138).Z,width:"1478",height:"700"})),(0,s.kt)("p",null,"The code for the current state of our application can be found in the  ",(0,s.kt)("i",null,"part2-7")," branch on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-7"},"GitHub"),"."),(0,s.kt)("h3",{id:"inline-styles"},"Inline styles"),(0,s.kt)("p",null,"React also makes it possible to write styles directly in the code as so-called ",(0,s.kt)("a",{parentName:"p",href:"https://react-cn.github.io/react/tips/inline-styles.html"},"inline styles"),"."),(0,s.kt)("p",null,"The idea behind defining inline styles is extremely simple. Any React component or element can be provided with a set of CSS properties as a JavaScript object through the ",(0,s.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/dom-elements.html#style"},"style")," attribute."),(0,s.kt)("p",null,"CSS rules are defined slightly differently in JavaScript than in normal CSS files. Let's say that we wanted to give some element the color green and italic font that's 16 pixels in size. In CSS, it would look like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},"{\n  color: green;\n  font-style: italic;\n  font-size: 16px;\n}\n")),(0,s.kt)("p",null,"But as a React inline style object it would look like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"{\n  color: 'green',\n  fontStyle: 'italic',\n  fontSize: 16\n}\n")),(0,s.kt)("p",null,"Every CSS property is defined as a separate property of the JavaScript object. Numeric values for pixels can be simply defined as integers. One of the major differences compared to regular CSS, is that hyphenated (kebab case) CSS properties are written in camelCase."),(0,s.kt)("p",null,'Next, we could add a "bottom block" to our application by creating a ',(0,s.kt)("i",null,"Footer")," component and define the following inline styles for it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// highlight-start\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2022</em>\n    </div>\n  )\n}\n// highlight-end\n\nconst App = () => {\n  // ...\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      // ...  \n\n      <Footer /> // highlight-line\n    </div>\n  )\n}\n")),(0,s.kt)("p",null,"Inline styles come with certain limitations. For instance, so-called ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"},"pseudo-classes")," can't be used straightforwardly."),(0,s.kt)("p",null,"Inline styles and some of the other ways of adding styles to React components go completely against the grain of old conventions. Traditionally, it has been considered best practice to entirely separate CSS from the content (HTML) and functionality (JavaScript). According to this older school of thought, the goal was to write CSS, HTML, and JavaScript into their separate files."),(0,s.kt)("p",null,"The philosophy of React is, in fact, the polar opposite of this. Since the separation of CSS, HTML, and JavaScript into separate files did not seem to scale well in larger applications, React bases the division of the application along the lines of its logical functional entities."),(0,s.kt)("p",null,"The structural units that make up the application's functional entities are React components. A React component defines the HTML for structuring the content, the JavaScript functions for determining functionality, and also the component's styling; all in one place. This is to create individual components that are as independent and reusable as possible."),(0,s.kt)("p",null,"The code of the final version of our application can be found in the  ",(0,s.kt)("i",null,"part2-8")," branch on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fullstack-hy2020/part2-notes/tree/part2-8"},"GitHub"),"."),(0,s.kt)("h2",{id:"reference"},"Reference"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://fullstackopen.com"},"FullStackOpen: Part 2C, 2D, 2E"))))}d.isMDXComponent=!0},6094:function(e,t,n){t.Z=n.p+"assets/images/14e-5950739e9fb04ff02fff9846ab019dc3.png"},4457:function(e,t,n){t.Z=n.p+"assets/images/15b-dfc04a022d02b9215cba09179e94c7ca.png"},9341:function(e,t,n){t.Z=n.p+"assets/images/16b-f920d5c1c7a89b9402981d4a72b27bfb.png"},3415:function(e,t,n){t.Z=n.p+"assets/images/17e-53a0e5cfb9d743e59f2349467b99c8de.png"},4045:function(e,t,n){t.Z=n.p+"assets/images/18e-aca14ff852ebd8fbfa6730d9e558b489.png"},2707:function(e,t,n){t.Z=n.p+"assets/images/20e-2ba4442eb9d030005c78aeecac57c2d8.png"},4354:function(e,t,n){t.Z=n.p+"assets/images/21e-10f9cb65a64d556e0798ffd563cd855c.png"},898:function(e,t,n){t.Z=n.p+"assets/images/22e-26562848c3104b58e190f7034078d579.png"},7360:function(e,t,n){t.Z=n.p+"assets/images/23e-b0367363986a95cc4221caa50e84e695.png"},1138:function(e,t,n){t.Z=n.p+"assets/images/26e-34730eb5ace1308744ef977b63f727ea.png"}}]);