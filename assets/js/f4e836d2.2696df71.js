"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5818],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=p(n),c=a,b=h["".concat(l,".").concat(c)]||h[c]||d[c]||r;return n?o.createElement(b,s(s({ref:t},u),{},{components:n})):o.createElement(b,s({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2023:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return d}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),s=["components"],i={title:"Exercises",sidebar_label:"Exercises",pagination_next:null,pagination_prev:null,slug:"exercises",hide_table_of_contents:!1,sidebar_position:2},l="Exercises",p={unversionedId:"lecture-13/exercises",id:"lecture-13/exercises",title:"Exercises",description:"Submission",source:"@site/docs/lecture-13/exercises.md",sourceDirName:"lecture-13",slug:"/lecture-13/exercises",permalink:"/sp2022/lecture-13/exercises",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Exercises",sidebar_label:"Exercises",pagination_next:null,pagination_prev:null,slug:"exercises",hide_table_of_contents:!1,sidebar_position:2},sidebar:"docs"},u={},d=[{value:"Submission",id:"submission",level:2},{value:"Phonebook database, step1",id:"phonebook-database-step1",level:2},{value:"Phonebook database, step2",id:"phonebook-database-step2",level:2},{value:"Phonebook database, step3",id:"phonebook-database-step3",level:2},{value:"Phonebook database, step4",id:"phonebook-database-step4",level:2},{value:"Phonebook database, step5",id:"phonebook-database-step5",level:2},{value:"Phonebook database step6",id:"phonebook-database-step6",level:2},{value:"Phonebook database, step7",id:"phonebook-database-step7",level:2},{value:"Phonebook database, step8",id:"phonebook-database-step8",level:2},{value:"Reference",id:"reference",level:2}],h={toc:d};function c(e){var t=e.components,i=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"exercises"},"Exercises"),(0,r.kt)("h2",{id:"submission"},"Submission"),(0,r.kt)("p",null,"Please submit the ",(0,r.kt)("inlineCode",{parentName:"p"},"*.js")," files to OMA by the deadline. Use the following naming convention ",(0,r.kt)("inlineCode",{parentName:"p"},"ex-13-step1.js, ex-13-step2.js etc,")),(0,r.kt)("h2",{id:"phonebook-database-step1"},"Phonebook database, step1"),(0,r.kt)("p",null,"Change the fetching of all phonebook entries so that the data is ",(0,r.kt)("i",null,"fetched from the database"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In the following exercises, write all Mongoose-specific code into its own module.")),(0,r.kt)("h2",{id:"phonebook-database-step2"},"Phonebook database, step2"),(0,r.kt)("p",null,"Change the backend so that new numbers are ",(0,r.kt)("strong",{parentName:"p"},"saved to the database"),". "),(0,r.kt)("p",null,"At this point, you can choose to simply allow users to create all phonebook entries. At this stage, the phonebook can have multiple entries for a person with the same name. "),(0,r.kt)("h2",{id:"phonebook-database-step3"},"Phonebook database, step3"),(0,r.kt)("p",null,"Change the backend so that deleting phonebook entries is reflected in the database."),(0,r.kt)("h2",{id:"phonebook-database-step4"},"Phonebook database, step4"),(0,r.kt)("p",null,"Move the error handling of the application to a new error handler middleware. "),(0,r.kt)("h2",{id:"phonebook-database-step5"},"Phonebook database, step5"),(0,r.kt)("p",null,"If the user tries to create a new phonebook entry for a person whose name is already in the phonebook, the frontend will try to update the phone number of the existing entry by making an HTTP PUT request to the entry's unique URL."),(0,r.kt)("p",null,"Modify the backend to support this request."),(0,r.kt)("h2",{id:"phonebook-database-step6"},"Phonebook database step6"),(0,r.kt)("p",null,"Also update the handling of the ",(0,r.kt)("i",null,"api/persons/:id")," and ",(0,r.kt)("i",null,"info")," routes to use the database, and verify that they work directly with the browser, Postman, or VS Code REST client."),(0,r.kt)("p",null,"Inspecting an individual phonebook entry from the browser should look like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",src:n(8558).Z,width:"1586",height:"254"})),(0,r.kt)("h2",{id:"phonebook-database-step7"},"Phonebook database, step7"),(0,r.kt)("p",null,"Expand the validation so that the name stored in the database has to be at least three characters long."),(0,r.kt)("p",null,"Error handling can be implemented by adding a ",(0,r.kt)("em",null,"catch")," block as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"personService\n    .create({ ... })\n    .then(createdPerson => {\n      // ...\n    })\n    .catch(error => {\n      // this is the way to access the error message\n      console.log(error.response.data)\n    })\n")),(0,r.kt)("p",null,"The default error message returned by Mongoose are not as readable as they could be."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NB:")," On update operations, mongoose validators are off by default. ",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/validation.html"},"Read the documentation")," to determine how to enable them."),(0,r.kt)("h2",{id:"phonebook-database-step8"},"Phonebook database, step8"),(0,r.kt)("p",null,"Add validation to your phonebook application, that will make sure that phone numbers are of the correct form. A phone number must "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"has length of 8 or more"),(0,r.kt)("li",{parentName:"ul"},"if formed of two parts that are separated by -, the first part has two or three numbers and the second part also consists of numbers",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"eg. 09-1234556 and 040-22334455 are valid phone numbers"),(0,r.kt)("li",{parentName:"ul"},"eg. 1234556, 1-22334455 and 10-22-334455 are invalid")))),(0,r.kt)("p",null,"Use a ",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/validation.html#custom-validators"},"Custom validatior")," to implement the second part of the validation."),(0,r.kt)("p",null,"If an HTTP POST request tries to add a name that is already in the phonebook, the server must respond with an appropriate status code and error message."),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fullstackopen.com"},"FullStackOpen: Exercises 3.13.-3.20."))))}c.isMDXComponent=!0},8558:function(e,t,n){t.Z=n.p+"assets/images/49-465968598f098ab630e3d5f390ee0fe6.png"}}]);